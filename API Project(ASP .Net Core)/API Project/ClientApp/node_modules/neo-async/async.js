              $async$goto = result != null ? 3 : 5;
              break;
            case 3:
              // then
              isDependency = $async$self._async_evaluate0$_inDependency;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 6;
              return A._asyncAwait(t1.loadAsync$3(originalUrl, previous, forImport), $async$_async_evaluate0$_importLikeNode$3);
            case 6:
              // returning from await.
              result = $async$result;
              if (result == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              isDependency = true;
            case 4:
              // join
              url = result.item2;
              t1 = B.JSString_methods.startsWith$1(url, "file") ? A.Syntax_forPath0(url) : B.Syntax_SCSS0;
              t2 = $async$self._async_evaluate0$_quietDeps && isDependency ? $.$get$Logger_quiet0() : $async$self._async_evaluate0$_logger;
              $async$returnValue = new A._LoadedStylesheet2(A.Stylesheet_Stylesheet$parse0(result.item1, t1, t2, url), null, isDependency);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_importLikeNode$3, $async$completer);
    },
    _async_evaluate0$_visitStaticImport$1($import) {
      return this._visitStaticImport$body$_EvaluateVisitor0($import);
    },
    _visitStaticImport$body$_EvaluateVisitor0($import) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, node, $async$temp1, $async$temp2;
      var $async$_async_evaluate0$_visitStaticImport$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait($async$self._async_evaluate0$_interpolationToValue$1($import.url), $async$_async_evaluate0$_visitStaticImport$1);
            case 2:
              // returning from await.
              $async$temp2 = $async$result;
              $async$goto = 3;
              return A._asyncAwait(A.NullableExtension_andThen0($import.modifiers, $async$self.get$_async_evaluate0$_interpolationToValue()), $async$_async_evaluate0$_visitStaticImport$1);
            case 3:
              // returning from await.
              node = new $async$temp1.ModifiableCssImport0($async$temp2, $async$result, $import.span);
              if ($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent") !== $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__root, "_root"))
                $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent").addChild$1(node);
              else if ($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__endOfImports, "_endOfImports") === J.get$length$asx($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__root, "_root").children._collection$_source)) {
                $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__root, "_root").addChild$1(node);
                $async$self._async_evaluate0$__endOfImports = $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__endOfImports, "_endOfImports") + 1;
              } else {
                t1 = $async$self._async_evaluate0$_outOfOrderImports;
                (t1 == null ? $async$self._async_evaluate0$_outOfOrderImports = A._setArrayType([], type$.JSArray_ModifiableCssImport_2) : t1).push(node);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_visitStaticImport$1, $async$completer);
    },
    visitIncludeRule$1(node) {
      return this.visitIncludeRule$body$_EvaluateVisitor0(node);
    },
    visitIncludeRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, nodeWithSpan, t1, mixin;
      var $async$visitIncludeRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              mixin = $async$self._async_evaluate0$_addExceptionSpan$2(node, new A._EvaluateVisitor_visitIncludeRule_closure11($async$self, node));
              if (mixin == null)
                throw A.wrapException($async$self._async_evaluate0$_exception$2("Undefined mixin.", node.span));
              nodeWithSpan = new A._FakeAstNode0(new A._EvaluateVisitor_visitIncludeRule_closure12(node));
              $async$goto = type$.AsyncBuiltInCallable_2._is(mixin) ? 3 : 5;
              break;
            case 3:
              // then
              if (node.content != null)
                throw A.wrapException($async$self._async_evaluate0$_exception$2("Mixin doesn't accept a content block.", node.span));
              $async$goto = 6;
              return A._asyncAwait($async$self._async_evaluate0$_runBuiltInCallable$3(node.$arguments, mixin, nodeWithSpan), $async$visitIncludeRule$1);
            case 6:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = type$.UserDefinedCallable_AsyncEnvironment_2._is(mixin) ? 7 : 9;
              break;
            case 7:
              // then
              t1 = node.content;
              if (t1 != null && !type$.MixinRule_2._as(mixin.declaration).get$hasContent())
                throw A.wrapException(A.MultiSpanSassRuntimeException$0("Mixin doesn't accept a content block.", node.get$spanWithoutContent(), "invocation", A.LinkedHashMap_LinkedHashMap$_literal([mixin.declaration.$arguments.get$spanWithName(), "declaration"], type$.FileSpan, type$.String), $async$self._async_evaluate0$_stackTrace$1(node.get$spanWithoutContent())));
              $async$goto = 10;
              return A._asyncAwait($async$self._async_evaluate0$_runUserDefinedCallable$1$4(node.$arguments, mixin, nodeWithSpan, new A._EvaluateVisitor_visitIncludeRule_closure13($async$self, A.NullableExtension_andThen0(t1, new A._EvaluateVisitor_visitIncludeRule_closure14($async$self)), mixin, nodeWithSpan), type$.Null), $async$visitIncludeRule$1);
            case 10:
              // returning from await.
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              throw A.wrapException(A.UnsupportedError$("Unknown callable type " + mixin.toString$0(0) + "."));
            case 8:
              // join
            case 4:
              // join
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitIncludeRule$1, $async$completer);
    },
    visitMixinRule$1(node) {
      return this.visitMixinRule$body$_EvaluateVisitor0(node);
    },
    visitMixinRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, index, t5;
      var $async$visitMixinRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._async_evaluate0$_environment;
              t2 = t1.closure$0();
              t3 = $async$self._async_evaluate0$_inDependency;
              t4 = t1._async_environment0$_mixins;
              index = t4.length - 1;
              t5 = node.name;
              t1._async_environment0$_mixinIndices.$indexSet(0, t5, index);
              J.$indexSet$ax(t4[index], t5, new A.UserDefinedCallable0(node, t2, t3, type$.UserDefinedCallable_AsyncEnvironment_2));
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitMixinRule$1, $async$completer);
    },
    visitLoudComment$1(node) {
      return this.visitLoudComment$body$_EvaluateVisitor0(node);
    },
    visitLoudComment$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, t1, $async$temp1, $async$temp2;
      var $async$visitLoudComment$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_inFunction) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              if ($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent") === $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__root, "_root") && $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__endOfImports, "_endOfImports") === J.get$length$asx($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__root, "_root").children._collection$_source))
                $async$self._async_evaluate0$__endOfImports = $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__endOfImports, "_endOfImports") + 1;
              t1 = node.text;
              $async$temp1 = $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent");
              $async$temp2 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_performInterpolation$1(t1), $async$visitLoudComment$1);
            case 3:
              // returning from await.
              $async$temp1.addChild$1(new $async$temp2.ModifiableCssComment0($async$result, t1.span));
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitLoudComment$1, $async$completer);
    },
    visitMediaRule$1(node) {
      return this.visitMediaRule$body$_EvaluateVisitor0(node);
    },
    visitMediaRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, queries, mergedQueries, t1;
      var $async$visitMediaRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw A.wrapException($async$self._async_evaluate0$_exception$2(string$.Media_, node.span));
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_visitMediaQueries$1(node.query), $async$visitMediaRule$1);
            case 3:
              // returning from await.
              queries = $async$result;
              mergedQueries = A.NullableExtension_andThen0($async$self._async_evaluate0$_mediaQueries, new A._EvaluateVisitor_visitMediaRule_closure8($async$self, queries));
              t1 = mergedQueries == null;
              if (!t1 && J.get$isEmpty$asx(mergedQueries)) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = t1 ? queries : mergedQueries;
              $async$goto = 4;
              return A._asyncAwait($async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(A.ModifiableCssMediaRule$0(t1, node.span), new A._EvaluateVisitor_visitMediaRule_closure9($async$self, mergedQueries, queries, node), node.hasDeclarations, new A._EvaluateVisitor_visitMediaRule_closure10(mergedQueries), type$.ModifiableCssMediaRule_2, type$.Null), $async$visitMediaRule$1);
            case 4:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitMediaRule$1, $async$completer);
    },
    _async_evaluate0$_visitMediaQueries$1(interpolation) {
      return this._visitMediaQueries$body$_EvaluateVisitor0(interpolation);
    },
    _visitMediaQueries$body$_EvaluateVisitor0(interpolation) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.List_CssMediaQuery_2),
        $async$returnValue, $async$self = this, $async$temp1, $async$temp2;
      var $async$_async_evaluate0$_visitMediaQueries$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = interpolation;
              $async$temp2 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_performInterpolation$2$warnForColor(interpolation, true), $async$_async_evaluate0$_visitMediaQueries$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate0$_adjustParseError$2($async$temp1, new $async$temp2._EvaluateVisitor__visitMediaQueries_closure2($async$self, $async$result));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_visitMediaQueries$1, $async$completer);
    },
    _async_evaluate0$_mergeMediaQueries$2(queries1, queries2) {
      var t1, t2, t3, t4, t5, result,
        queries = A._setArrayType([], type$.JSArray_CssMediaQuery_2);
      for (t1 = J.get$iterator$ax(queries1), t2 = J.getInterceptor$ax(queries2), t3 = type$.MediaQuerySuccessfulMergeResult_2; t1.moveNext$0();) {
        t4 = t1.get$current(t1);
        for (t5 = t2.get$iterator(queries2); t5.moveNext$0();) {
          result = t4.merge$1(t5.get$current(t5));
          if (result === B._SingletonCssMediaQueryMergeResult_empty0)
            continue;
          if (result === B._SingletonCssMediaQueryMergeResult_unrepresentable0)
            return null;
          queries.push(t3._as(result).query);
        }
      }
      return queries;
    },
    visitReturnRule$1(node) {
      return this.visitReturnRule$body$_EvaluateVisitor0(node);
    },
    visitReturnRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$self = this, t1;
      var $async$visitReturnRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.expression;
              $async$goto = 3;
              return A._asyncAwait(t1.accept$1($async$self), $async$visitReturnRule$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate0$_withoutSlash$2($async$result, t1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitReturnRule$1, $async$completer);
    },
    visitSilentComment$1(node) {
      return this.visitSilentComment$body$_EvaluateVisitor0(node);
    },
    visitSilentComment$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue;
      var $async$visitSilentComment$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitSilentComment$1, $async$completer);
    },
    visitStyleRule$1(node) {
      return this.visitStyleRule$body$_EvaluateVisitor0(node);
    },
    visitStyleRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, t2, selectorText, rule, oldAtRootExcludingStyleRule, t1;
      var $async$visitStyleRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              if ($async$self._async_evaluate0$_declarationName != null)
                throw A.wrapException($async$self._async_evaluate0$_exception$2(string$.Style_, node.span));
              t2 = node.selector;
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_interpolationToValue$3$trim$warnForColor(t2, true, true), $async$visitStyleRule$1);
            case 3:
              // returning from await.
              selectorText = $async$result;
              $async$goto = $async$self._async_evaluate0$_inKeyframes ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return A._asyncAwait($async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(A.ModifiableCssKeyframeBlock$0(new A.CssValue0(A.List_List$unmodifiable($async$self._async_evaluate0$_adjustParseError$2(t2, new A._EvaluateVisitor_visitStyleRule_closure20($async$self, selectorText)), type$.String), t2.span, type$.CssValue_List_String_2), node.span), new A._EvaluateVisitor_visitStyleRule_closure21($async$self, node), node.hasDeclarations, new A._EvaluateVisitor_visitStyleRule_closure22(), type$.ModifiableCssKeyframeBlock_2, type$.Null), $async$visitStyleRule$1);
            case 6:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 5:
              // join
              t1.parsedSelector = $async$self._async_evaluate0$_adjustParseError$2(t2, new A._EvaluateVisitor_visitStyleRule_closure23($async$self, selectorText));
              t1.parsedSelector = $async$self._async_evaluate0$_addExceptionSpan$2(t2, new A._EvaluateVisitor_visitStyleRule_closure24(t1, $async$self));
              rule = A.ModifiableCssStyleRule$0($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__extensionStore, "_extensionStore").addSelector$3(t1.parsedSelector, t2.span, $async$self._async_evaluate0$_mediaQueries), node.span, t1.parsedSelector);
              oldAtRootExcludingStyleRule = $async$self._async_evaluate0$_atRootExcludingStyleRule;
              t1 = $async$self._async_evaluate0$_atRootExcludingStyleRule = false;
              $async$goto = 7;
              return A._asyncAwait($async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(rule, new A._EvaluateVisitor_visitStyleRule_closure25($async$self, rule, node), node.hasDeclarations, new A._EvaluateVisitor_visitStyleRule_closure26(), type$.ModifiableCssStyleRule_2, type$.Null), $async$visitStyleRule$1);
            case 7:
              // returning from await.
              $async$self._async_evaluate0$_atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
              if ((oldAtRootExcludingStyleRule ? null : $async$self._async_evaluate0$_styleRuleIgnoringAtRoot) == null) {
                t1 = $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent").children;
                t1 = !t1.get$isEmpty(t1);
              }
              if (t1) {
                t1 = $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent").children;
                t1.get$last(t1).isGroupEnd = true;
              }
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitStyleRule$1, $async$completer);
    },
    visitSupportsRule$1(node) {
      return this.visitSupportsRule$body$_EvaluateVisitor0(node);
    },
    visitSupportsRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, t1, $async$temp1, $async$temp2;
      var $async$visitSupportsRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw A.wrapException($async$self._async_evaluate0$_exception$2(string$.Suppor, node.span));
              t1 = node.condition;
              $async$temp1 = A;
              $async$temp2 = A;
              $async$goto = 4;
              return A._asyncAwait($async$self._async_evaluate0$_visitSupportsCondition$1(t1), $async$visitSupportsRule$1);
            case 4:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_withParent$2$4$scopeWhen$through($async$temp1.ModifiableCssSupportsRule$0(new $async$temp2.CssValue0($async$result, t1.get$span(t1), type$.CssValue_String_2), node.span), new A._EvaluateVisitor_visitSupportsRule_closure5($async$self, node), node.hasDeclarations, new A._EvaluateVisitor_visitSupportsRule_closure6(), type$.ModifiableCssSupportsRule_2, type$.Null), $async$visitSupportsRule$1);
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitSupportsRule$1, $async$completer);
    },
    _async_evaluate0$_visitSupportsCondition$1(condition) {
      return this._visitSupportsCondition$body$_EvaluateVisitor0(condition);
    },
    _visitSupportsCondition$body$_EvaluateVisitor0(condition) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, t1, oldInSupportsDeclaration, t2, t3, $async$temp1, $async$temp2;
      var $async$_async_evaluate0$_visitSupportsCondition$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = condition instanceof A.SupportsOperation0 ? 3 : 5;
              break;
            case 3:
              // then
              t1 = condition.operator;
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait($async$self._async_evaluate0$_parenthesize$2(condition.left, t1), $async$_async_evaluate0$_visitSupportsCondition$1);
            case 6:
              // returning from await.
              $async$temp1 = $async$temp1.S($async$result) + " " + t1 + " ";
              $async$temp2 = A;
              $async$goto = 7;
              return A._asyncAwait($async$self._async_evaluate0$_parenthesize$2(condition.right, t1), $async$_async_evaluate0$_visitSupportsCondition$1);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1 + $async$temp2.S($async$result);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = condition instanceof A.SupportsNegation0 ? 8 : 10;
              break;
            case 8:
              // then
              $async$temp1 = A;
              $async$goto = 11;
              return A._asyncAwait($async$self._async_evaluate0$_parenthesize$1(condition.condition), $async$_async_evaluate0$_visitSupportsCondition$1);
            case 11:
              // returning from await.
              $async$returnValue = "not " + $async$temp1.S($async$result);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 9;
              break;
            case 10:
              // else
              $async$goto = condition instanceof A.SupportsInterpolation0 ? 12 : 14;
              break;
            case 12:
              // then
              $async$goto = 15;
              return A._asyncAwait($async$self._async_evaluate0$_evaluateToCss$2$quote(condition.expression, false), $async$_async_evaluate0$_visitSupportsCondition$1);
            case 15:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 13;
              break;
            case 14:
              // else
              $async$goto = condition instanceof A.SupportsDeclaration0 ? 16 : 18;
              break;
            case 16:
              // then
              oldInSupportsDeclaration = $async$self._async_evaluate0$_inSupportsDeclaration;
              $async$self._async_evaluate0$_inSupportsDeclaration = true;
              $async$temp1 = A;
              $async$goto = 19;
              return A._asyncAwait($async$self._async_evaluate0$_evaluateToCss$1(condition.name), $async$_async_evaluate0$_visitSupportsCondition$1);
            case 19:
              // returning from await.
              t1 = $async$temp1.S($async$result);
              t2 = condition.get$isCustomProperty() ? "" : " ";
              $async$temp1 = A;
              $async$goto = 20;
              return A._asyncAwait($async$self._async_evaluate0$_evaluateToCss$1(condition.value), $async$_async_evaluate0$_visitSupportsCondition$1);
            case 20:
              // returning from await.
              t3 = $async$temp1.S($async$result);
              $async$self._async_evaluate0$_inSupportsDeclaration = oldInSupportsDeclaration;
              $async$returnValue = "(" + t1 + ":" + t2 + t3 + ")";
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 17;
              break;
            case 18:
              // else
              $async$goto = condition instanceof A.SupportsFunction0 ? 21 : 23;
              break;
            case 21:
              // then
              $async$temp1 = A;
              $async$goto = 24;
              return A._asyncAwait($async$self._async_evaluate0$_performInterpolation$1(condition.name), $async$_async_evaluate0$_visitSupportsCondition$1);
            case 24:
              // returning from await.
              $async$temp1 = $async$temp1.S($async$result) + "(";
              $async$temp2 = A;
              $async$goto = 25;
              return A._asyncAwait($async$self._async_evaluate0$_performInterpolation$1(condition.$arguments), $async$_async_evaluate0$_visitSupportsCondition$1);
            case 25:
              // returning from await.
              $async$returnValue = $async$temp1 + $async$temp2.S($async$result) + ")";
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 22;
              break;
            case 23:
              // else
              $async$goto = condition instanceof A.SupportsAnything0 ? 26 : 28;
              break;
            case 26:
              // then
              $async$temp1 = A;
              $async$goto = 29;
              return A._asyncAwait($async$self._async_evaluate0$_performInterpolation$1(condition.contents), $async$_async_evaluate0$_visitSupportsCondition$1);
            case 29:
              // returning from await.
              $async$returnValue = "(" + $async$temp1.S($async$result) + ")";
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 27;
              break;
            case 28:
              // else
              throw A.wrapException(A.ArgumentError$("Unknown supports condition type " + A.getRuntimeType(condition).toString$0(0) + ".", null));
            case 27:
              // join
            case 22:
              // join
            case 17:
              // join
            case 13:
              // join
            case 9:
              // join
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_visitSupportsCondition$1, $async$completer);
    },
    _async_evaluate0$_parenthesize$2(condition, operator) {
      return this._parenthesize$body$_EvaluateVisitor0(condition, operator);
    },
    _async_evaluate0$_parenthesize$1(condition) {
      return this._async_evaluate0$_parenthesize$2(condition, null);
    },
    _parenthesize$body$_EvaluateVisitor0(condition, operator) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$_async_evaluate0$_parenthesize$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!(condition instanceof A.SupportsNegation0))
                if (condition instanceof A.SupportsOperation0)
                  t1 = operator == null || operator !== condition.operator;
                else
                  t1 = false;
              else
                t1 = true;
              $async$goto = t1 ? 3 : 5;
              break;
            case 3:
              // then
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait($async$self._async_evaluate0$_visitSupportsCondition$1(condition), $async$_async_evaluate0$_parenthesize$2);
            case 6:
              // returning from await.
              $async$returnValue = "(" + $async$temp1.S($async$result) + ")";
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 7;
              return A._asyncAwait($async$self._async_evaluate0$_visitSupportsCondition$1(condition), $async$_async_evaluate0$_parenthesize$2);
            case 7:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_parenthesize$2, $async$completer);
    },
    visitVariableDeclaration$1(node) {
      return this.visitVariableDeclaration$body$_EvaluateVisitor0(node);
    },
    visitVariableDeclaration$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, t1, value, $async$temp1, $async$temp2, $async$temp3;
      var $async$visitVariableDeclaration$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (node.isGuarded) {
                if (node.namespace == null && $async$self._async_evaluate0$_environment._async_environment0$_variables.length === 1) {
                  t1 = $async$self._async_evaluate0$_configuration._configuration$_values;
                  t1 = t1.get$isEmpty(t1) ? null : t1.remove$1(0, node.name);
                  if (t1 != null && !t1.value.$eq(0, B.C__SassNull0)) {
                    $async$self._async_evaluate0$_addExceptionSpan$2(node, new A._EvaluateVisitor_visitVariableDeclaration_closure8($async$self, node, t1));
                    $async$returnValue = null;
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                }
                value = $async$self._async_evaluate0$_addExceptionSpan$2(node, new A._EvaluateVisitor_visitVariableDeclaration_closure9($async$self, node));
                if (value != null && !value.$eq(0, B.C__SassNull0)) {
                  $async$returnValue = null;
                  // goto return
                  $async$goto = 1;
                  break;
                }
              }
              if (node.isGlobal && !$async$self._async_evaluate0$_environment.globalVariableExists$1(node.name)) {
                t1 = $async$self._async_evaluate0$_environment._async_environment0$_variables.length === 1 ? string$.As_of_S : string$.As_of_R + A.declarationName0(node.span) + ": null` at the stylesheet root.";
                $async$self._async_evaluate0$_warn$3$deprecation(t1, node.span, true);
              }
              t1 = node.expression;
              $async$temp1 = node;
              $async$temp2 = A;
              $async$temp3 = node;
              $async$goto = 3;
              return A._asyncAwait(t1.accept$1($async$self), $async$visitVariableDeclaration$1);
            case 3:
              // returning from await.
              $async$self._async_evaluate0$_addExceptionSpan$2($async$temp1, new $async$temp2._EvaluateVisitor_visitVariableDeclaration_closure10($async$self, $async$temp3, $async$self._async_evaluate0$_withoutSlash$2($async$result, t1)));
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitVariableDeclaration$1, $async$completer);
    },
    visitUseRule$1(node) {
      return this.visitUseRule$body$_EvaluateVisitor0(node);
    },
    visitUseRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, values, _i, variable, t3, variableNodeWithSpan, configuration, t1, t2, $async$temp1, $async$temp2, $async$temp3;
      var $async$visitUseRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.configuration;
              t2 = t1.length;
              $async$goto = t2 !== 0 ? 3 : 5;
              break;
            case 3:
              // then
              values = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.ConfiguredValue_2);
              _i = 0;
            case 6:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 8;
                break;
              }
              variable = t1[_i];
              t3 = variable.expression;
              variableNodeWithSpan = $async$self._async_evaluate0$_expressionNode$1(t3);
              $async$temp1 = values;
              $async$temp2 = variable.name;
              $async$temp3 = A;
              $async$goto = 9;
              return A._asyncAwait(t3.accept$1($async$self), $async$visitUseRule$1);
            case 9:
              // returning from await.
              $async$temp1.$indexSet(0, $async$temp2, new $async$temp3.ConfiguredValue0($async$self._async_evaluate0$_withoutSlash$2($async$result, variableNodeWithSpan), variable.span, variableNodeWithSpan));
            case 7:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 6;
              break;
            case 8:
              // after for
              configuration = new A.ExplicitConfiguration0(node, values);
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              configuration = B.Configuration_Map_empty0;
            case 4:
              // join
              $async$goto = 10;
              return A._asyncAwait($async$self._async_evaluate0$_loadModule$5$configuration(node.url, "@use", node, new A._EvaluateVisitor_visitUseRule_closure2($async$self, node), configuration), $async$visitUseRule$1);
            case 10:
              // returning from await.
              $async$self._async_evaluate0$_assertConfigurationIsEmpty$1(configuration);
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitUseRule$1, $async$completer);
    },
    visitWarnRule$1(node) {
      return this.visitWarnRule$body$_EvaluateVisitor0(node);
    },
    visitWarnRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, value, t1;
      var $async$visitWarnRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_addExceptionSpanAsync$1$2(node, new A._EvaluateVisitor_visitWarnRule_closure2($async$self, node), type$.Value_2), $async$visitWarnRule$1);
            case 3:
              // returning from await.
              value = $async$result;
              t1 = value instanceof A.SassString0 ? value._string0$_text : $async$self._async_evaluate0$_serialize$2(value, node.expression);
              $async$self._async_evaluate0$_logger.warn$2$trace(0, t1, $async$self._async_evaluate0$_stackTrace$1(node.span));
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitWarnRule$1, $async$completer);
    },
    visitWhileRule$1(node) {
      return this._async_evaluate0$_environment.scope$1$3$semiGlobal$when(new A._EvaluateVisitor_visitWhileRule_closure2(this, node), true, node.hasDeclarations, type$.nullable_Value_2);
    },
    visitBinaryOperationExpression$1(node) {
      return this._async_evaluate0$_addExceptionSpanAsync$1$2(node, new A._EvaluateVisitor_visitBinaryOperationExpression_closure2(this, node), type$.Value_2);
    },
    visitValueExpression$1(node) {
      return this.visitValueExpression$body$_EvaluateVisitor0(node);
    },
    visitValueExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue;
      var $async$visitValueExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = node.value;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitValueExpression$1, $async$completer);
    },
    visitVariableExpression$1(node) {
      return this.visitVariableExpression$body$_EvaluateVisitor0(node);
    },
    visitVariableExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$self = this, result;
      var $async$visitVariableExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              result = $async$self._async_evaluate0$_addExceptionSpan$2(node, new A._EvaluateVisitor_visitVariableExpression_closure2($async$self, node));
              if (result != null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              throw A.wrapException($async$self._async_evaluate0$_exception$2("Undefined variable.", node.span));
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitVariableExpression$1, $async$completer);
    },
    visitUnaryOperationExpression$1(node) {
      return this.visitUnaryOperationExpression$body$_EvaluateVisitor0(node);
    },
    visitUnaryOperationExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$self = this, $async$temp1, $async$temp2, $async$temp3;
      var $async$visitUnaryOperationExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = node;
              $async$temp2 = A;
              $async$temp3 = node;
              $async$goto = 3;
              return A._asyncAwait(node.operand.accept$1($async$self), $async$visitUnaryOperationExpression$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate0$_addExceptionSpan$2($async$temp1, new $async$temp2._EvaluateVisitor_visitUnaryOperationExpression_closure2($async$temp3, $async$result));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitUnaryOperationExpression$1, $async$completer);
    },
    visitBooleanExpression$1(node) {
      return this.visitBooleanExpression$body$_EvaluateVisitor0(node);
    },
    visitBooleanExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SassBoolean_2),
        $async$returnValue;
      var $async$visitBooleanExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = node.value ? B.SassBoolean_true0 : B.SassBoolean_false0;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitBooleanExpression$1, $async$completer);
    },
    visitIfExpression$1(node) {
      return this.visitIfExpression$body$_EvaluateVisitor0(node);
    },
    visitIfExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$self = this, condition, t2, ifTrue, ifFalse, result, pair, positional, named, t1;
      var $async$visitIfExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_evaluateMacroArguments$1(node), $async$visitIfExpression$1);
            case 3:
              // returning from await.
              pair = $async$result;
              positional = pair.item1;
              named = pair.item2;
              t1 = J.getInterceptor$asx(positional);
              $async$self._async_evaluate0$_verifyArguments$4(t1.get$length(positional), named, $.$get$IfExpression_declaration0(), node);
              if (t1.get$length(positional) > 0)
                condition = t1.$index(positional, 0);
              else {
                t2 = named.$index(0, "condition");
                t2.toString;
                condition = t2;
              }
              if (t1.get$length(positional) > 1)
                ifTrue = t1.$index(positional, 1);
              else {
                t2 = named.$index(0, "if-true");
                t2.toString;
                ifTrue = t2;
              }
              if (t1.get$length(positional) > 2)
                ifFalse = t1.$index(positional, 2);
              else {
                t1 = named.$index(0, "if-false");
                t1.toString;
                ifFalse = t1;
              }
              $async$goto = 4;
              return A._asyncAwait(condition.accept$1($async$self), $async$visitIfExpression$1);
            case 4:
              // returning from await.
              result = $async$result.get$isTruthy() ? ifTrue : ifFalse;
              $async$goto = 5;
              return A._asyncAwait(result.accept$1($async$self), $async$visitIfExpression$1);
            case 5:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate0$_withoutSlash$2($async$result, $async$self._async_evaluate0$_expressionNode$1(result));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitIfExpression$1, $async$completer);
    },
    visitNullExpression$1(node) {
      return this.visitNullExpression$body$_EvaluateVisitor0(node);
    },
    visitNullExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue;
      var $async$visitNullExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = B.C__SassNull0;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitNullExpression$1, $async$completer);
    },
    visitNumberExpression$1(node) {
      return this.visitNumberExpression$body$_EvaluateVisitor0(node);
    },
    visitNumberExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SassNumber_2),
        $async$returnValue, t1, t2;
      var $async$visitNumberExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.value;
              t2 = node.unit;
              $async$returnValue = t2 == null ? new A.UnitlessSassNumber0(t1, null) : new A.SingleUnitSassNumber0(t2, t1, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitNumberExpression$1, $async$completer);
    },
    visitParenthesizedExpression$1(node) {
      return node.expression.accept$1(this);
    },
    visitCalculationExpression$1(node) {
      return this.visitCalculationExpression$body$_EvaluateVisitor0(node);
    },
    visitCalculationExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$next = [], $async$self = this, $arguments, error, stackTrace, t2, t3, t4, t5, t6, _i, argument, exception, t1, $async$temp1;
      var $async$visitCalculationExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = A._setArrayType([], type$.JSArray_Object);
                t2 = node.$arguments, t3 = t2.length, t4 = node.name, t5 = t4 !== "min", t6 = t4 === "max", _i = 0;
              case 3:
                // for condition
                if (!(_i < t3)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                argument = t2[_i];
                $async$temp1 = t1;
                $async$goto = 6;
                return A._asyncAwait($async$self._async_evaluate0$_visitCalculationValue$2$inMinMax(argument, !t5 || t6), $async$visitCalculationExpression$1);
              case 6:
                // returning from await.
                $async$temp1.push($async$result);
              case 4:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                $arguments = t1;
                if ($async$self._async_evaluate0$_inSupportsDeclaration) {
                  $async$returnValue = new A.SassCalculation0(t4, A.List_List$unmodifiable($arguments, type$.Object));
                  // goto return
                  $async$goto = 1;
                  break;
                }
                try {
                  switch (t4) {
                    case "calc":
                      t1 = A.SassCalculation_calc0(J.$index$asx($arguments, 0));
                      $async$returnValue = t1;
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    case "min":
                      t1 = A.SassCalculation_min0($arguments);
                      $async$returnValue = t1;
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    case "max":
                      t1 = A.SassCalculation_max0($arguments);
                      $async$returnValue = t1;
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    case "clamp":
                      t1 = J.$index$asx($arguments, 0);
                      t3 = J.get$length$asx($arguments) > 1 ? J.$index$asx($arguments, 1) : null;
                      t1 = A.SassCalculation_clamp0(t1, t3, J.get$length$asx($arguments) > 2 ? J.$index$asx($arguments, 2) : null);
                      $async$returnValue = t1;
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    default:
                      t1 = A.UnsupportedError$('Unknown calculation name "' + t4 + '".');
                      throw A.wrapException(t1);
                  }
                } catch (exception) {
                  t1 = A.unwrapException(exception);
                  if (t1 instanceof A.SassScriptException0) {
                    error = t1;
                    stackTrace = A.getTraceFromException(exception);
                    $async$self._async_evaluate0$_verifyCompatibleNumbers$2($arguments, t2);
                    A.throwWithTrace0($async$self._async_evaluate0$_exception$2(error.message, node.span), stackTrace);
                  } else
                    throw exception;
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$visitCalculationExpression$1, $async$completer);
    },
    _async_evaluate0$_verifyCompatibleNumbers$2(args, nodesWithSpans) {
      var i, t1, arg, number1, j, number2;
      for (i = 0; t1 = args.length, i < t1; ++i) {
        arg = args[i];
        if (!(arg instanceof A.SassNumber0))
          continue;
        if (arg.get$numeratorUnits(arg).length > 1 || arg.get$denominatorUnits(arg).length !== 0)
          throw A.wrapException(this._async_evaluate0$_exception$2("Number " + arg.toString$0(0) + " isn't compatible with CSS calculations.", J.get$span$z(nodesWithSpans[i])));
      }
      for (i = 0; i < t1 - 1; ++i) {
        number1 = args[i];
        if (!(number1 instanceof A.SassNumber0))
          continue;
        for (j = i + 1; t1 = args.length, j < t1; ++j) {
          number2 = args[j];
          if (!(number2 instanceof A.SassNumber0))
            continue;
          if (number1.hasPossiblyCompatibleUnits$1(number2))
            continue;
          throw A.wrapException(A.MultiSpanSassRuntimeException$0(number1.toString$0(0) + " and " + number2.toString$0(0) + " are incompatible.", J.get$span$z(nodesWithSpans[i]), number1.toString$0(0), A.LinkedHashMap_LinkedHashMap$_literal([J.get$span$z(nodesWithSpans[j]), number2.toString$0(0)], type$.FileSpan, type$.String), this._async_evaluate0$_stackTrace$1(J.get$span$z(nodesWithSpans[i]))));
        }
      }
    },
    _async_evaluate0$_visitCalculationValue$2$inMinMax(node, inMinMax) {
      return this._visitCalculationValue$body$_EvaluateVisitor0(node, inMinMax);
    },
    _visitCalculationValue$body$_EvaluateVisitor0(node, inMinMax) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Object),
        $async$returnValue, $async$self = this, inner, result, t1, $async$temp1;
      var $async$_async_evaluate0$_visitCalculationValue$2$inMinMax = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = node instanceof A.ParenthesizedExpression0 ? 3 : 5;
              break;
            case 3:
              // then
              inner = node.expression;
              $async$goto = 6;
              return A._asyncAwait($async$self._async_evaluate0$_visitCalculationValue$2$inMinMax(inner, inMinMax), $async$_async_evaluate0$_visitCalculationValue$2$inMinMax);
            case 6:
              // returning from await.
              result = $async$result;
              if (inner instanceof A.FunctionExpression0)
                t1 = A.stringReplaceAllUnchecked(inner.originalName, "_", "-").toLowerCase() === "var" && result instanceof A.SassString0 && !result._string0$_hasQuotes;
              else
                t1 = false;
              $async$returnValue = t1 ? new A.SassString0("(" + result._string0$_text + ")", false) : result;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = node instanceof A.StringExpression0 ? 7 : 9;
              break;
            case 7:
              // then
              $async$temp1 = A;
              $async$goto = 10;
              return A._asyncAwait($async$self._async_evaluate0$_performInterpolation$1(node.text), $async$_async_evaluate0$_visitCalculationValue$2$inMinMax);
            case 10:
              // returning from await.
              $async$returnValue = new $async$temp1.CalculationInterpolation0($async$result);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              $async$goto = node instanceof A.BinaryOperationExpression0 ? 11 : 13;
              break;
            case 11:
              // then
              $async$goto = 14;
              return A._asyncAwait($async$self._async_evaluate0$_addExceptionSpanAsync$1$2(node, new A._EvaluateVisitor__visitCalculationValue_closure2($async$self, node, inMinMax), type$.Object), $async$_async_evaluate0$_visitCalculationValue$2$inMinMax);
            case 14:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 12;
              break;
            case 13:
              // else
              $async$goto = 15;
              return A._asyncAwait(node.accept$1($async$self), $async$_async_evaluate0$_visitCalculationValue$2$inMinMax);
            case 15:
              // returning from await.
              result = $async$result;
              if (result instanceof A.SassNumber0 || result instanceof A.SassCalculation0) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              if (result instanceof A.SassString0 && !result._string0$_hasQuotes) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              throw A.wrapException($async$self._async_evaluate0$_exception$2("Value " + result.toString$0(0) + " can't be used in a calculation.", node.get$span(node)));
            case 12:
              // join
            case 8:
              // join
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_visitCalculationValue$2$inMinMax, $async$completer);
    },
    _async_evaluate0$_binaryOperatorToCalculationOperator$1(operator) {
      switch (operator) {
        case B.BinaryOperator_AcR2:
          return B.CalculationOperator_Iem0;
        case B.BinaryOperator_iyO0:
          return B.CalculationOperator_uti0;
        case B.BinaryOperator_O1M0:
          return B.CalculationOperator_Dih0;
        case B.BinaryOperator_RTB0:
          return B.CalculationOperator_jB60;
        default:
          throw A.wrapException(A.UnsupportedError$("Invalid calculation operator " + operator.toString$0(0) + "."));
      }
    },
    visitColorExpression$1(node) {
      return this.visitColorExpression$body$_EvaluateVisitor0(node);
    },
    visitColorExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SassColor_2),
        $async$returnValue;
      var $async$visitColorExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = node.value;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitColorExpression$1, $async$completer);
    },
    visitListExpression$1(node) {
      return this.visitListExpression$body$_EvaluateVisitor0(node);
    },
    visitListExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SassList_2),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$visitListExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.mapAsync0(node.contents, new A._EvaluateVisitor_visitListExpression_closure2($async$self), type$.Expression_2, type$.Value_2), $async$visitListExpression$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.SassList$0($async$result, node.separator, node.hasBrackets);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitListExpression$1, $async$completer);
    },
    visitMapExpression$1(node) {
      return this.visitMapExpression$body$_EvaluateVisitor0(node);
    },
    visitMapExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SassMap_2),
        $async$returnValue, $async$self = this, t2, t3, _i, pair, t4, keyValue, valueValue, oldValueSpan, t1, map, keyNodes;
      var $async$visitMapExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.Value_2;
              map = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              keyNodes = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.AstNode_2);
              t2 = node.pairs, t3 = t2.length, _i = 0;
            case 3:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              pair = t2[_i];
              t4 = pair.item1;
              $async$goto = 6;
              return A._asyncAwait(t4.accept$1($async$self), $async$visitMapExpression$1);
            case 6:
              // returning from await.
              keyValue = $async$result;
              $async$goto = 7;
              return A._asyncAwait(pair.item2.accept$1($async$self), $async$visitMapExpression$1);
            case 7:
              // returning from await.
              valueValue = $async$result;
              if (map.$index(0, keyValue) != null) {
                t1 = keyNodes.$index(0, keyValue);
                oldValueSpan = t1 == null ? null : t1.get$span(t1);
                t1 = J.getInterceptor$z(t4);
                t2 = t1.get$span(t4);
                t3 = A.LinkedHashMap_LinkedHashMap$_empty(type$.FileSpan, type$.String);
                if (oldValueSpan != null)
                  t3.$indexSet(0, oldValueSpan, "first key");
                throw A.wrapException(A.MultiSpanSassRuntimeException$0("Duplicate key.", t2, "second key", t3, $async$self._async_evaluate0$_stackTrace$1(t1.get$span(t4))));
              }
              map.$indexSet(0, keyValue, valueValue);
              keyNodes.$indexSet(0, keyValue, t4);
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = new A.SassMap0(A.ConstantMap_ConstantMap$from(map, t1, t1));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitMapExpression$1, $async$completer);
    },
    visitFunctionExpression$1(node) {
      return this.visitFunctionExpression$body$_EvaluateVisitor0(node);
    },
    visitFunctionExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$self = this, oldInFunction, result, t1, $function;
      var $async$visitFunctionExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              $function = $async$self._async_evaluate0$_addExceptionSpan$2(node, new A._EvaluateVisitor_visitFunctionExpression_closure5($async$self, node));
              t1.$function = $function;
              if ($function == null) {
                if (node.namespace != null)
                  throw A.wrapException($async$self._async_evaluate0$_exception$2("Undefined function.", node.span));
                t1.$function = new A.PlainCssCallable0(node.originalName);
              }
              oldInFunction = $async$self._async_evaluate0$_inFunction;
              $async$self._async_evaluate0$_inFunction = true;
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_addErrorSpan$1$2(node, new A._EvaluateVisitor_visitFunctionExpression_closure6(t1, $async$self, node), type$.Value_2), $async$visitFunctionExpression$1);
            case 3:
              // returning from await.
              result = $async$result;
              $async$self._async_evaluate0$_inFunction = oldInFunction;
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitFunctionExpression$1, $async$completer);
    },
    visitInterpolatedFunctionExpression$1(node) {
      return this.visitInterpolatedFunctionExpression$body$_EvaluateVisitor0(node);
    },
    visitInterpolatedFunctionExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$self = this, result, t1, oldInFunction;
      var $async$visitInterpolatedFunctionExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_performInterpolation$1(node.name), $async$visitInterpolatedFunctionExpression$1);
            case 3:
              // returning from await.
              t1 = $async$result;
              oldInFunction = $async$self._async_evaluate0$_inFunction;
              $async$self._async_evaluate0$_inFunction = true;
              $async$goto = 4;
              return A._asyncAwait($async$self._async_evaluate0$_addErrorSpan$1$2(node, new A._EvaluateVisitor_visitInterpolatedFunctionExpression_closure2($async$self, node, new A.PlainCssCallable0(t1)), type$.Value_2), $async$visitInterpolatedFunctionExpression$1);
            case 4:
              // returning from await.
              result = $async$result;
              $async$self._async_evaluate0$_inFunction = oldInFunction;
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitInterpolatedFunctionExpression$1, $async$completer);
    },
    _async_evaluate0$_getFunction$2$namespace($name, namespace) {
      var local = this._async_evaluate0$_environment.getFunction$2$namespace($name, namespace);
      if (local != null || namespace != null)
        return local;
      return this._async_evaluate0$_builtInFunctions.$index(0, $name);
    },
    _async_evaluate0$_runUserDefinedCallable$1$4($arguments, callable, nodeWithSpan, run, $V) {
      return this._runUserDefinedCallable$body$_EvaluateVisitor0($arguments, callable, nodeWithSpan, run, $V, $V);
    },
    _runUserDefinedCallable$body$_EvaluateVisitor0($arguments, callable, nodeWithSpan, run, $V, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, oldCallable, result, evaluated, $name;
      var $async$_async_evaluate0$_runUserDefinedCallable$1$4 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_evaluateArguments$1($arguments), $async$_async_evaluate0$_runUserDefinedCallable$1$4);
            case 3:
              // returning from await.
              evaluated = $async$result;
              $name = callable.declaration.name;
              if ($name !== "@content")
                $name += "()";
              oldCallable = $async$self._async_evaluate0$_currentCallable;
              $async$self._async_evaluate0$_currentCallable = callable;
              $async$goto = 4;
              return A._asyncAwait($async$self._async_evaluate0$_withStackFrame$1$3($name, nodeWithSpan, new A._EvaluateVisitor__runUserDefinedCallable_closure2($async$self, callable, evaluated, nodeWithSpan, run, $V), $V), $async$_async_evaluate0$_runUserDefinedCallable$1$4);
            case 4:
              // returning from await.
              result = $async$result;
              $async$self._async_evaluate0$_currentCallable = oldCallable;
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_runUserDefinedCallable$1$4, $async$completer);
    },
    _async_evaluate0$_runFunctionCallable$3($arguments, callable, nodeWithSpan) {
      return this._runFunctionCallable$body$_EvaluateVisitor0($arguments, callable, nodeWithSpan);
    },
    _runFunctionCallable$body$_EvaluateVisitor0($arguments, callable, nodeWithSpan) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$self = this, t1, t2, t3, first, _i, argument, restArg, rest, $async$temp1;
      var $async$_async_evaluate0$_runFunctionCallable$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = type$.AsyncBuiltInCallable_2._is(callable) ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return A._asyncAwait($async$self._async_evaluate0$_runBuiltInCallable$3($arguments, callable, nodeWithSpan), $async$_async_evaluate0$_runFunctionCallable$3);
            case 6:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate0$_withoutSlash$2($async$result, nodeWithSpan);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = type$.UserDefinedCallable_AsyncEnvironment_2._is(callable) ? 7 : 9;
              break;
            case 7:
              // then
              $async$goto = 10;
              return A._asyncAwait($async$self._async_evaluate0$_runUserDefinedCallable$1$4($arguments, callable, nodeWithSpan, new A._EvaluateVisitor__runFunctionCallable_closure2($async$self, callable), type$.Value_2), $async$_async_evaluate0$_runFunctionCallable$3);
            case 10:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              $async$goto = callable instanceof A.PlainCssCallable0 ? 11 : 13;
              break;
            case 11:
              // then
              t1 = $arguments.named;
              if (t1.get$isNotEmpty(t1) || $arguments.keywordRest != null)
                throw A.wrapException($async$self._async_evaluate0$_exception$2(string$.Plain_, nodeWithSpan.get$span(nodeWithSpan)));
              t1 = callable.name + "(";
              t2 = $arguments.positional, t3 = t2.length, first = true, _i = 0;
            case 14:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 16;
                break;
              }
              argument = t2[_i];
              if (first)
                first = false;
              else
                t1 += ", ";
              $async$temp1 = A;
              $async$goto = 17;
              return A._asyncAwait($async$self._async_evaluate0$_evaluateToCss$1(argument), $async$_async_evaluate0$_runFunctionCallable$3);
            case 17:
              // returning from await.
              t1 += $async$temp1.S($async$result);
            case 15:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 14;
              break;
            case 16:
              // after for
              restArg = $arguments.rest;
              $async$goto = restArg != null ? 18 : 19;
              break;
            case 18:
              // then
              $async$goto = 20;
              return A._asyncAwait(restArg.accept$1($async$self), $async$_async_evaluate0$_runFunctionCallable$3);
            case 20:
              // returning from await.
              rest = $async$result;
              if (!first)
                t1 += ", ";
              t1 += $async$self._async_evaluate0$_serialize$2(rest, restArg);
            case 19:
              // join
              t1 += A.Primitives_stringFromCharCode(41);
              $async$returnValue = new A.SassString0(t1.charCodeAt(0) == 0 ? t1 : t1, false);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 12;
              break;
            case 13:
              // else
              throw A.wrapException(A.ArgumentError$("Unknown callable type " + J.get$runtimeType$u(callable).toString$0(0) + ".", null));
            case 12:
              // join
            case 8:
              // join
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_runFunctionCallable$3, $async$completer);
    },
    _async_evaluate0$_runBuiltInCallable$3($arguments, callable, nodeWithSpan) {
      return this._runBuiltInCallable$body$_EvaluateVisitor0($arguments, callable, nodeWithSpan);
    },
    _runBuiltInCallable$body$_EvaluateVisitor0($arguments, callable, nodeWithSpan) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, callback, result, error, stackTrace, error0, stackTrace0, error1, stackTrace1, message, namedSet, tuple, overload, declaredArguments, i, t1, argument, t2, t3, rest, argumentList, exception, t4, t5, t6, message0, evaluated, oldCallableNode, $async$exception;
      var $async$_async_evaluate0$_runBuiltInCallable$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_evaluateArguments$1($arguments), $async$_async_evaluate0$_runBuiltInCallable$3);
            case 3:
              // returning from await.
              evaluated = $async$result;
              oldCallableNode = $async$self._async_evaluate0$_callableNode;
              $async$self._async_evaluate0$_callableNode = nodeWithSpan;
              namedSet = new A.MapKeySet(evaluated.named, type$.MapKeySet_String);
              tuple = callable.callbackFor$2(evaluated.positional.length, namedSet);
              overload = tuple.item1;
              callback = tuple.item2;
              $async$self._async_evaluate0$_addExceptionSpan$2(nodeWithSpan, new A._EvaluateVisitor__runBuiltInCallable_closure5(overload, evaluated, namedSet));
              declaredArguments = overload.$arguments;
              i = evaluated.positional.length, t1 = declaredArguments.length;
            case 4:
              // for condition
              if (!(i < t1)) {
                // goto after for
                $async$goto = 6;
                break;
              }
              argument = declaredArguments[i];
              t2 = evaluated.positional;
              t3 = evaluated.named.remove$1(0, argument.name);
              $async$goto = t3 == null ? 7 : 8;
              break;
            case 7:
              // then
              t3 = argument.defaultValue;
              $async$goto = 9;
              return A._asyncAwait(t3.accept$1($async$self), $async$_async_evaluate0$_runBuiltInCallable$3);
            case 9:
              // returning from await.
              t3 = $async$self._async_evaluate0$_withoutSlash$2($async$result, t3);
            case 8:
              // join
              t2.push(t3);
            case 5:
              // for update
              ++i;
              // goto for condition
              $async$goto = 4;
              break;
            case 6:
              // after for
              if (overload.restArgument != null) {
                if (evaluated.positional.length > t1) {
                  rest = B.JSArray_methods.sublist$1(evaluated.positional, t1);
                  B.JSArray_methods.removeRange$2(evaluated.positional, t1, evaluated.positional.length);
                } else
                  rest = B.List_empty15;
                t1 = evaluated.named;
                argumentList = A.SassArgumentList$0(rest, t1, evaluated.separator === B.ListSeparator_undecided_null0 ? B.ListSeparator_kWM0 : evaluated.separator);
                evaluated.positional.push(argumentList);
              } else
                argumentList = null;
              result = null;
              $async$handler = 11;
              $async$goto = 14;
              return A._asyncAwait(callback.call$1(evaluated.positional), $async$_async_evaluate0$_runBuiltInCallable$3);
            case 14:
              // returning from await.
              result = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 13;
              break;
            case 11:
              // catch
              $async$handler = 10;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.SassRuntimeException_2._is(t1))
                throw $async$exception;
              else if (t1 instanceof A.MultiSpanSassScriptException0) {
                error = t1;
                stackTrace = A.getTraceFromException($async$exception);
                t1 = error.message;
                t2 = nodeWithSpan.get$span(nodeWithSpan);
                t3 = error.primaryLabel;
                t4 = error.secondarySpans;
                A.throwWithTrace0(new A.MultiSpanSassRuntimeException0($async$self._async_evaluate0$_stackTrace$1(nodeWithSpan.get$span(nodeWithSpan)), t3, A.ConstantMap_ConstantMap$from(t4, type$.FileSpan, type$.String), t1, t2), stackTrace);
              } else if (t1 instanceof A.MultiSpanSassException0) {
                error0 = t1;
                stackTrace0 = A.getTraceFromException($async$exception);
                t1 = error0._span_exception$_message;
                t2 = error0;
                t3 = J.getInterceptor$z(t2);
                t2 = A.SourceSpanException.prototype.get$span.call(t3, t2);
                t3 = error0.primaryLabel;
                t4 = error0.secondarySpans;
                t5 = error0;
                t6 = J.getInterceptor$z(t5);
                A.throwWithTrace0(new A.MultiSpanSassRuntimeException0($async$self._async_evaluate0$_stackTrace$1(A.SourceSpanException.prototype.get$span.call(t6, t5)), t3, A.ConstantMap_ConstantMap$from(t4, type$.FileSpan, type$.String), t1, t2), stackTrace0);
              } else {
                error1 = t1;
                stackTrace1 = A.getTraceFromException($async$exception);
                message = null;
                try {
                  message = A._asString(J.get$message$x(error1));
                } catch (exception) {
                  message0 = J.toString$0$(error1);
                  message = message0;
                }
                A.throwWithTrace0($async$self._async_evaluate0$_exception$2(message, nodeWithSpan.get$span(nodeWithSpan)), stackTrace1);
              }
              // goto after finally
              $async$goto = 13;
              break;
            case 10:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 13:
              // after finally
              $async$self._async_evaluate0$_callableNode = oldCallableNode;
              if (argumentList == null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              if (evaluated.named.__js_helper$_length === 0) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              if (argumentList._argument_list$_wereKeywordsAccessed) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = evaluated.named;
              t1 = t1.get$keys(t1);
              t1 = A.pluralize0("argument", t1.get$length(t1), null);
              t2 = evaluated.named;
              throw A.wrapException(A.MultiSpanSassRuntimeException$0("No " + t1 + " named " + A.S(A.toSentence0(t2.get$keys(t2).map$1$1(0, new A._EvaluateVisitor__runBuiltInCallable_closure6(), type$.Object), "or")) + ".", nodeWithSpan.get$span(nodeWithSpan), "invocation", A.LinkedHashMap_LinkedHashMap$_literal([overload.get$spanWithName(), "declaration"], type$.FileSpan, type$.String), $async$self._async_evaluate0$_stackTrace$1(nodeWithSpan.get$span(nodeWithSpan))));
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_runBuiltInCallable$3, $async$completer);
    },
    _async_evaluate0$_evaluateArguments$1($arguments) {
      return this._evaluateArguments$body$_EvaluateVisitor0($arguments);
    },
    _evaluateArguments$body$_EvaluateVisitor0($arguments) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$._ArgumentResults_2),
        $async$returnValue, $async$self = this, t1, t2, _i, expression, nodeForSpan, named, namedNodes, t3, t4, t5, restArgs, rest, restNodeForSpan, separator, keywordRestArgs, keywordRest, keywordRestNodeForSpan, positional, positionalNodes, $async$temp1, $async$temp2;
      var $async$_async_evaluate0$_evaluateArguments$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              positional = A._setArrayType([], type$.JSArray_Value_2);
              positionalNodes = A._setArrayType([], type$.JSArray_AstNode_2);
              t1 = $arguments.positional, t2 = t1.length, _i = 0;
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              expression = t1[_i];
              nodeForSpan = $async$self._async_evaluate0$_expressionNode$1(expression);
              $async$temp1 = positional;
              $async$goto = 6;
              return A._asyncAwait(expression.accept$1($async$self), $async$_async_evaluate0$_evaluateArguments$1);
            case 6:
              // returning from await.
              $async$temp1.push($async$self._async_evaluate0$_withoutSlash$2($async$result, nodeForSpan));
              positionalNodes.push(nodeForSpan);
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              t1 = type$.String;
              named = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value_2);
              t2 = type$.AstNode_2;
              namedNodes = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
              t3 = $arguments.named, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3);
            case 7:
              // for condition
              if (!t3.moveNext$0()) {
                // goto after for
                $async$goto = 8;
                break;
              }
              t4 = t3.get$current(t3);
              t5 = t4.value;
              nodeForSpan = $async$self._async_evaluate0$_expressionNode$1(t5);
              t4 = t4.key;
              $async$temp1 = named;
              $async$temp2 = t4;
              $async$goto = 9;
              return A._asyncAwait(t5.accept$1($async$self), $async$_async_evaluate0$_evaluateArguments$1);
            case 9:
              // returning from await.
              $async$temp1.$indexSet(0, $async$temp2, $async$self._async_evaluate0$_withoutSlash$2($async$result, nodeForSpan));
              namedNodes.$indexSet(0, t4, nodeForSpan);
              // goto for condition
              $async$goto = 7;
              break;
            case 8:
              // after for
              restArgs = $arguments.rest;
              if (restArgs == null) {
                $async$returnValue = new A._ArgumentResults2(positional, positionalNodes, named, namedNodes, B.ListSeparator_undecided_null0);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 10;
              return A._asyncAwait(restArgs.accept$1($async$self), $async$_async_evaluate0$_evaluateArguments$1);
            case 10:
              // returning from await.
              rest = $async$result;
              restNodeForSpan = $async$self._async_evaluate0$_expressionNode$1(restArgs);
              if (rest instanceof A.SassMap0) {
                $async$self._async_evaluate0$_addRestMap$4(named, rest, restArgs, new A._EvaluateVisitor__evaluateArguments_closure11());
                t3 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
                for (t4 = rest._map0$_contents, t4 = J.get$iterator$ax(t4.get$keys(t4)), t5 = type$.SassString_2; t4.moveNext$0();)
                  t3.$indexSet(0, t5._as(t4.get$current(t4))._string0$_text, restNodeForSpan);
                namedNodes.addAll$1(0, t3);
                separator = B.ListSeparator_undecided_null0;
              } else if (rest instanceof A.SassList0) {
                t3 = rest._list1$_contents;
                B.JSArray_methods.addAll$1(positional, new A.MappedListIterable(t3, new A._EvaluateVisitor__evaluateArguments_closure12($async$self, restNodeForSpan), A._arrayInstanceType(t3)._eval$1("MappedListIterable<1,Value0>")));
                B.JSArray_methods.addAll$1(positionalNodes, A.List_List$filled(t3.length, restNodeForSpan, false, t2));
                separator = rest._list1$_separator;
                if (rest instanceof A.SassArgumentList0) {
                  rest._argument_list$_wereKeywordsAccessed = true;
                  rest._argument_list$_keywords.forEach$1(0, new A._EvaluateVisitor__evaluateArguments_closure13($async$self, named, restNodeForSpan, namedNodes));
                }
              } else {
                positional.push($async$self._async_evaluate0$_withoutSlash$2(rest, restNodeForSpan));
                positionalNodes.push(restNodeForSpan);
                separator = B.ListSeparator_undecided_null0;
              }
              keywordRestArgs = $arguments.keywordRest;
              if (keywordRestArgs == null) {
                $async$returnValue = new A._ArgumentResults2(positional, positionalNodes, named, namedNodes, separator);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 11;
              return A._asyncAwait(keywordRestArgs.accept$1($async$self), $async$_async_evaluate0$_evaluateArguments$1);
            case 11:
              // returning from await.
              keywordRest = $async$result;
              keywordRestNodeForSpan = $async$self._async_evaluate0$_expressionNode$1(keywordRestArgs);
              if (keywordRest instanceof A.SassMap0) {
                $async$self._async_evaluate0$_addRestMap$4(named, keywordRest, keywordRestArgs, new A._EvaluateVisitor__evaluateArguments_closure14());
                t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
                for (t2 = keywordRest._map0$_contents, t2 = J.get$iterator$ax(t2.get$keys(t2)), t3 = type$.SassString_2; t2.moveNext$0();)
                  t1.$indexSet(0, t3._as(t2.get$current(t2))._string0$_text, keywordRestNodeForSpan);
                namedNodes.addAll$1(0, t1);
                $async$returnValue = new A._ArgumentResults2(positional, positionalNodes, named, namedNodes, separator);
                // goto return
                $async$goto = 1;
                break;
              } else
                throw A.wrapException($async$self._async_evaluate0$_exception$2(string$.Variabs + keywordRest.toString$0(0) + ").", keywordRestArgs.get$span(keywordRestArgs)));
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_evaluateArguments$1, $async$completer);
    },
    _async_evaluate0$_evaluateMacroArguments$1(invocation) {
      return this._evaluateMacroArguments$body$_EvaluateVisitor0(invocation);
    },
    _evaluateMacroArguments$body$_EvaluateVisitor0(invocation) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Tuple2_of_List_Expression_and_Map_String_Expression_2),
        $async$returnValue, $async$self = this, t2, positional, named, rest, restNodeForSpan, keywordRestArgs_, keywordRest, keywordRestNodeForSpan, t1, restArgs_;
      var $async$_async_evaluate0$_evaluateMacroArguments$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = invocation.$arguments;
              restArgs_ = t1.rest;
              if (restArgs_ == null) {
                $async$returnValue = new A.Tuple2(t1.positional, t1.named, type$.Tuple2_of_List_Expression_and_Map_String_Expression_2);
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = t1.positional;
              positional = A._setArrayType(t2.slice(0), A._arrayInstanceType(t2));
              named = A.LinkedHashMap_LinkedHashMap$of(t1.named, type$.String, type$.Expression_2);
              $async$goto = 3;
              return A._asyncAwait(restArgs_.accept$1($async$self), $async$_async_evaluate0$_evaluateMacroArguments$1);
            case 3:
              // returning from await.
              rest = $async$result;
              restNodeForSpan = $async$self._async_evaluate0$_expressionNode$1(restArgs_);
              if (rest instanceof A.SassMap0)
                $async$self._async_evaluate0$_addRestMap$4(named, rest, invocation, new A._EvaluateVisitor__evaluateMacroArguments_closure11(restArgs_));
              else if (rest instanceof A.SassList0) {
                t2 = rest._list1$_contents;
                B.JSArray_methods.addAll$1(positional, new A.MappedListIterable(t2, new A._EvaluateVisitor__evaluateMacroArguments_closure12($async$self, restNodeForSpan, restArgs_), A._arrayInstanceType(t2)._eval$1("MappedListIterable<1,Expression0>")));
                if (rest instanceof A.SassArgumentList0) {
                  rest._argument_list$_wereKeywordsAccessed = true;
                  rest._argument_list$_keywords.forEach$1(0, new A._EvaluateVisitor__evaluateMacroArguments_closure13($async$self, named, restNodeForSpan, restArgs_));
                }
              } else
                positional.push(new A.ValueExpression0($async$self._async_evaluate0$_withoutSlash$2(rest, restNodeForSpan), restArgs_.get$span(restArgs_)));
              keywordRestArgs_ = t1.keywordRest;
              if (keywordRestArgs_ == null) {
                $async$returnValue = new A.Tuple2(positional, named, type$.Tuple2_of_List_Expression_and_Map_String_Expression_2);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 4;
              return A._asyncAwait(keywordRestArgs_.accept$1($async$self), $async$_async_evaluate0$_evaluateMacroArguments$1);
            case 4:
              // returning from await.
              keywordRest = $async$result;
              keywordRestNodeForSpan = $async$self._async_evaluate0$_expressionNode$1(keywordRestArgs_);
              if (keywordRest instanceof A.SassMap0) {
                $async$self._async_evaluate0$_addRestMap$4(named, keywordRest, invocation, new A._EvaluateVisitor__evaluateMacroArguments_closure14($async$self, keywordRestNodeForSpan, keywordRestArgs_));
                $async$returnValue = new A.Tuple2(positional, named, type$.Tuple2_of_List_Expression_and_Map_String_Expression_2);
                // goto return
                $async$goto = 1;
                break;
              } else
                throw A.wrapException($async$self._async_evaluate0$_exception$2(string$.Variabs + keywordRest.toString$0(0) + ").", keywordRestArgs_.get$span(keywordRestArgs_)));
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_evaluateMacroArguments$1, $async$completer);
    },
    _async_evaluate0$_addRestMap$1$4(values, map, nodeWithSpan, convert) {
      map._map0$_contents.forEach$1(0, new A._EvaluateVisitor__addRestMap_closure2(this, values, convert, this._async_evaluate0$_expressionNode$1(nodeWithSpan), map, nodeWithSpan));
    },
    _async_evaluate0$_addRestMap$4(values, map, nodeWithSpan, convert) {
      return this._async_evaluate0$_addRestMap$1$4(values, map, nodeWithSpan, convert, type$.dynamic);
    },
    _async_evaluate0$_verifyArguments$4(positional, named, $arguments, nodeWithSpan) {
      return this._async_evaluate0$_addExceptionSpan$2(nodeWithSpan, new A._EvaluateVisitor__verifyArguments_closure2($arguments, positional, named));
    },
    visitSelectorExpression$1(node) {
      return this.visitSelectorExpression$body$_EvaluateVisitor0(node);
    },
    visitSelectorExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$self = this, t1;
      var $async$visitSelectorExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._async_evaluate0$_styleRuleIgnoringAtRoot;
              t1 = t1 == null ? null : t1.originalSelector.get$asSassList();
              $async$returnValue = t1 == null ? B.C__SassNull0 : t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitSelectorExpression$1, $async$completer);
    },
    visitStringExpression$1(node) {
      return this.visitStringExpression$body$_EvaluateVisitor0(node);
    },
    visitStringExpression$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SassString_2),
        $async$returnValue, $async$self = this, t1, oldInSupportsDeclaration, $async$temp1;
      var $async$visitStringExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldInSupportsDeclaration = $async$self._async_evaluate0$_inSupportsDeclaration;
              $async$self._async_evaluate0$_inSupportsDeclaration = false;
              $async$temp1 = J;
              $async$goto = 3;
              return A._asyncAwait(A.mapAsync0(node.text.contents, new A._EvaluateVisitor_visitStringExpression_closure2($async$self), type$.Object, type$.String), $async$visitStringExpression$1);
            case 3:
              // returning from await.
              t1 = $async$temp1.join$0$ax($async$result);
              $async$self._async_evaluate0$_inSupportsDeclaration = oldInSupportsDeclaration;
              $async$returnValue = new A.SassString0(t1, node.hasQuotes);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitStringExpression$1, $async$completer);
    },
    visitSupportsExpression$1(expression) {
      return this.visitSupportsExpression$body$_EvaluateVisitor0(expression);
    },
    visitSupportsExpression$body$_EvaluateVisitor0(expression) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SassString_2),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$visitSupportsExpression$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_visitSupportsCondition$1(expression.condition), $async$visitSupportsExpression$1);
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.SassString0($async$result, false);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitSupportsExpression$1, $async$completer);
    },
    visitCssAtRule$1(node) {
      return this.visitCssAtRule$body$_EvaluateVisitor0(node);
    },
    visitCssAtRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, wasInKeyframes, wasInUnknownAtRule, t1;
      var $async$visitCssAtRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw A.wrapException($async$self._async_evaluate0$_exception$2(string$.At_rul, node.span));
              if (node.isChildless) {
                $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent").addChild$1(A.ModifiableCssAtRule$0(node.name, node.span, true, node.value));
                // goto return
                $async$goto = 1;
                break;
              }
              wasInKeyframes = $async$self._async_evaluate0$_inKeyframes;
              wasInUnknownAtRule = $async$self._async_evaluate0$_inUnknownAtRule;
              t1 = node.name;
              if (A.unvendor0(t1.get$value(t1)) === "keyframes")
                $async$self._async_evaluate0$_inKeyframes = true;
              else
                $async$self._async_evaluate0$_inUnknownAtRule = true;
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(A.ModifiableCssAtRule$0(t1, node.span, false, node.value), new A._EvaluateVisitor_visitCssAtRule_closure5($async$self, node), false, new A._EvaluateVisitor_visitCssAtRule_closure6(), type$.ModifiableCssAtRule_2, type$.Null), $async$visitCssAtRule$1);
            case 3:
              // returning from await.
              $async$self._async_evaluate0$_inUnknownAtRule = wasInUnknownAtRule;
              $async$self._async_evaluate0$_inKeyframes = wasInKeyframes;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitCssAtRule$1, $async$completer);
    },
    visitCssComment$1(node) {
      return this.visitCssComment$body$_EvaluateVisitor0(node);
    },
    visitCssComment$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$visitCssComment$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent") === $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__root, "_root") && $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__endOfImports, "_endOfImports") === J.get$length$asx($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__root, "_root").children._collection$_source))
                $async$self._async_evaluate0$__endOfImports = $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__endOfImports, "_endOfImports") + 1;
              $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent").addChild$1(new A.ModifiableCssComment0(node.text, node.span));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitCssComment$1, $async$completer);
    },
    visitCssDeclaration$1(node) {
      return this.visitCssDeclaration$body$_EvaluateVisitor0(node);
    },
    visitCssDeclaration$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$visitCssDeclaration$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.name;
              $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent").addChild$1(A.ModifiableCssDeclaration$0(t1, node.value, node.span, J.startsWith$1$s(t1.get$value(t1), "--"), node.valueSpanForMap));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitCssDeclaration$1, $async$completer);
    },
    visitCssImport$1(node) {
      return this.visitCssImport$body$_EvaluateVisitor0(node);
    },
    visitCssImport$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, modifiableNode;
      var $async$visitCssImport$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              modifiableNode = new A.ModifiableCssImport0(node.url, node.modifiers, node.span);
              if ($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent") !== $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__root, "_root"))
                $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent").addChild$1(modifiableNode);
              else if ($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__endOfImports, "_endOfImports") === J.get$length$asx($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__root, "_root").children._collection$_source)) {
                $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__root, "_root").addChild$1(modifiableNode);
                $async$self._async_evaluate0$__endOfImports = $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__endOfImports, "_endOfImports") + 1;
              } else {
                t1 = $async$self._async_evaluate0$_outOfOrderImports;
                (t1 == null ? $async$self._async_evaluate0$_outOfOrderImports = A._setArrayType([], type$.JSArray_ModifiableCssImport_2) : t1).push(modifiableNode);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitCssImport$1, $async$completer);
    },
    visitCssKeyframeBlock$1(node) {
      return this.visitCssKeyframeBlock$body$_EvaluateVisitor0(node);
    },
    visitCssKeyframeBlock$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$visitCssKeyframeBlock$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(A.ModifiableCssKeyframeBlock$0(node.selector, node.span), new A._EvaluateVisitor_visitCssKeyframeBlock_closure5($async$self, node), false, new A._EvaluateVisitor_visitCssKeyframeBlock_closure6(), type$.ModifiableCssKeyframeBlock_2, type$.Null), $async$visitCssKeyframeBlock$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitCssKeyframeBlock$1, $async$completer);
    },
    visitCssMediaRule$1(node) {
      return this.visitCssMediaRule$body$_EvaluateVisitor0(node);
    },
    visitCssMediaRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, mergedQueries, t1;
      var $async$visitCssMediaRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw A.wrapException($async$self._async_evaluate0$_exception$2(string$.Media_, node.span));
              mergedQueries = A.NullableExtension_andThen0($async$self._async_evaluate0$_mediaQueries, new A._EvaluateVisitor_visitCssMediaRule_closure8($async$self, node));
              t1 = mergedQueries == null;
              if (!t1 && J.get$isEmpty$asx(mergedQueries)) {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = t1 ? node.queries : mergedQueries;
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(A.ModifiableCssMediaRule$0(t1, node.span), new A._EvaluateVisitor_visitCssMediaRule_closure9($async$self, mergedQueries, node), false, new A._EvaluateVisitor_visitCssMediaRule_closure10(mergedQueries), type$.ModifiableCssMediaRule_2, type$.Null), $async$visitCssMediaRule$1);
            case 3:
              // returning from await.
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitCssMediaRule$1, $async$completer);
    },
    visitCssStyleRule$1(node) {
      return this.visitCssStyleRule$body$_EvaluateVisitor0(node);
    },
    visitCssStyleRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, styleRule, t2, t3, t4, t5, originalSelector, rule, oldAtRootExcludingStyleRule;
      var $async$visitCssStyleRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw A.wrapException($async$self._async_evaluate0$_exception$2(string$.Style_, node.span));
              t1 = $async$self._async_evaluate0$_atRootExcludingStyleRule;
              styleRule = t1 ? null : $async$self._async_evaluate0$_styleRuleIgnoringAtRoot;
              t2 = node.selector;
              t3 = t2.value;
              t4 = styleRule == null;
              t5 = t4 ? null : styleRule.originalSelector;
              originalSelector = t3.resolveParentSelectors$2$implicitParent(t5, !t1);
              rule = A.ModifiableCssStyleRule$0($async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__extensionStore, "_extensionStore").addSelector$3(originalSelector, t2.span, $async$self._async_evaluate0$_mediaQueries), node.span, originalSelector);
              oldAtRootExcludingStyleRule = $async$self._async_evaluate0$_atRootExcludingStyleRule;
              $async$self._async_evaluate0$_atRootExcludingStyleRule = false;
              $async$goto = 2;
              return A._asyncAwait($async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(rule, new A._EvaluateVisitor_visitCssStyleRule_closure5($async$self, rule, node), false, new A._EvaluateVisitor_visitCssStyleRule_closure6(), type$.ModifiableCssStyleRule_2, type$.Null), $async$visitCssStyleRule$1);
            case 2:
              // returning from await.
              $async$self._async_evaluate0$_atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
              if (t4) {
                t1 = $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent").children;
                t1 = !t1.get$isEmpty(t1);
              } else
                t1 = false;
              if (t1) {
                t1 = $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent").children;
                t1.get$last(t1).isGroupEnd = true;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitCssStyleRule$1, $async$completer);
    },
    visitCssStylesheet$1(node) {
      return this.visitCssStylesheet$body$_EvaluateVisitor0(node);
    },
    visitCssStylesheet$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$visitCssStylesheet$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.get$iterator$ax(node.get$children(node));
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return A._asyncAwait(t1.get$current(t1).accept$1($async$self), $async$visitCssStylesheet$1);
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitCssStylesheet$1, $async$completer);
    },
    visitCssSupportsRule$1(node) {
      return this.visitCssSupportsRule$body$_EvaluateVisitor0(node);
    },
    visitCssSupportsRule$body$_EvaluateVisitor0(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$visitCssSupportsRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate0$_declarationName != null)
                throw A.wrapException($async$self._async_evaluate0$_exception$2(string$.Suppor, node.span));
              $async$goto = 2;
              return A._asyncAwait($async$self._async_evaluate0$_withParent$2$4$scopeWhen$through(A.ModifiableCssSupportsRule$0(node.condition, node.span), new A._EvaluateVisitor_visitCssSupportsRule_closure5($async$self, node), false, new A._EvaluateVisitor_visitCssSupportsRule_closure6(), type$.ModifiableCssSupportsRule_2, type$.Null), $async$visitCssSupportsRule$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitCssSupportsRule$1, $async$completer);
    },
    _async_evaluate0$_handleReturn$1$2(list, callback) {
      return this._handleReturn$body$_EvaluateVisitor0(list, callback);
    },
    _async_evaluate0$_handleReturn$2(list, callback) {
      return this._async_evaluate0$_handleReturn$1$2(list, callback, type$.dynamic);
    },
    _handleReturn$body$_EvaluateVisitor0(list, callback) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, t1, _i, result;
      var $async$_async_evaluate0$_handleReturn$1$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = list.length, _i = 0;
            case 3:
              // for condition
              if (!(_i < list.length)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return A._asyncAwait(callback.call$1(list[_i]), $async$_async_evaluate0$_handleReturn$1$2);
            case 6:
              // returning from await.
              result = $async$result;
              if (result != null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              list.length === t1 || (0, A.throwConcurrentModificationError)(list), ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_handleReturn$1$2, $async$completer);
    },
    _async_evaluate0$_withEnvironment$1$2(environment, callback, $T) {
      return this._withEnvironment$body$_EvaluateVisitor0(environment, callback, $T, $T);
    },
    _withEnvironment$body$_EvaluateVisitor0(environment, callback, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, result, oldEnvironment;
      var $async$_async_evaluate0$_withEnvironment$1$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldEnvironment = $async$self._async_evaluate0$_environment;
              $async$self._async_evaluate0$_environment = environment;
              $async$goto = 3;
              return A._asyncAwait(callback.call$0(), $async$_async_evaluate0$_withEnvironment$1$2);
            case 3:
              // returning from await.
              result = $async$result;
              $async$self._async_evaluate0$_environment = oldEnvironment;
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_withEnvironment$1$2, $async$completer);
    },
    _async_evaluate0$_interpolationToValue$3$trim$warnForColor(interpolation, trim, warnForColor) {
      return this._interpolationToValue$body$_EvaluateVisitor0(interpolation, trim, warnForColor);
    },
    _async_evaluate0$_interpolationToValue$1(interpolation) {
      return this._async_evaluate0$_interpolationToValue$3$trim$warnForColor(interpolation, false, false);
    },
    _async_evaluate0$_interpolationToValue$2$warnForColor(interpolation, warnForColor) {
      return this._async_evaluate0$_interpolationToValue$3$trim$warnForColor(interpolation, false, warnForColor);
    },
    _interpolationToValue$body$_EvaluateVisitor0(interpolation, trim, warnForColor) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CssValue_String_2),
        $async$returnValue, $async$self = this, result, t1;
      var $async$_async_evaluate0$_interpolationToValue$3$trim$warnForColor = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_performInterpolation$2$warnForColor(interpolation, warnForColor), $async$_async_evaluate0$_interpolationToValue$3$trim$warnForColor);
            case 3:
              // returning from await.
              result = $async$result;
              t1 = trim ? A.trimAscii0(result, true) : result;
              $async$returnValue = new A.CssValue0(t1, interpolation.span, type$.CssValue_String_2);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_interpolationToValue$3$trim$warnForColor, $async$completer);
    },
    _async_evaluate0$_performInterpolation$2$warnForColor(interpolation, warnForColor) {
      return this._performInterpolation$body$_EvaluateVisitor0(interpolation, warnForColor);
    },
    _async_evaluate0$_performInterpolation$1(interpolation) {
      return this._async_evaluate0$_performInterpolation$2$warnForColor(interpolation, false);
    },
    _performInterpolation$body$_EvaluateVisitor0(interpolation, warnForColor) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, result, oldInSupportsDeclaration, $async$temp1;
      var $async$_async_evaluate0$_performInterpolation$2$warnForColor = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldInSupportsDeclaration = $async$self._async_evaluate0$_inSupportsDeclaration;
              $async$self._async_evaluate0$_inSupportsDeclaration = false;
              $async$temp1 = J;
              $async$goto = 3;
              return A._asyncAwait(A.mapAsync0(interpolation.contents, new A._EvaluateVisitor__performInterpolation_closure2($async$self, warnForColor, interpolation), type$.Object, type$.String), $async$_async_evaluate0$_performInterpolation$2$warnForColor);
            case 3:
              // returning from await.
              result = $async$temp1.join$0$ax($async$result);
              $async$self._async_evaluate0$_inSupportsDeclaration = oldInSupportsDeclaration;
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_performInterpolation$2$warnForColor, $async$completer);
    },
    _async_evaluate0$_evaluateToCss$2$quote(expression, quote) {
      return this._evaluateToCss$body$_EvaluateVisitor0(expression, quote);
    },
    _async_evaluate0$_evaluateToCss$1(expression) {
      return this._async_evaluate0$_evaluateToCss$2$quote(expression, true);
    },
    _evaluateToCss$body$_EvaluateVisitor0(expression, quote) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this;
      var $async$_async_evaluate0$_evaluateToCss$2$quote = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(expression.accept$1($async$self), $async$_async_evaluate0$_evaluateToCss$2$quote);
            case 3:
              // returning from await.
              $async$returnValue = $async$self._async_evaluate0$_serialize$3$quote($async$result, expression, quote);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_evaluateToCss$2$quote, $async$completer);
    },
    _async_evaluate0$_serialize$3$quote(value, nodeWithSpan, quote) {
      return this._async_evaluate0$_addExceptionSpan$2(nodeWithSpan, new A._EvaluateVisitor__serialize_closure2(value, quote));
    },
    _async_evaluate0$_serialize$2(value, nodeWithSpan) {
      return this._async_evaluate0$_serialize$3$quote(value, nodeWithSpan, true);
    },
    _async_evaluate0$_expressionNode$1(expression) {
      var t1;
      if (expression instanceof A.VariableExpression0) {
        t1 = this._async_evaluate0$_addExceptionSpan$2(expression, new A._EvaluateVisitor__expressionNode_closure2(this, expression));
        return t1 == null ? expression : t1;
      } else
        return expression;
    },
    _async_evaluate0$_withParent$2$4$scopeWhen$through(node, callback, scopeWhen, through, $S, $T) {
      return this._withParent$body$_EvaluateVisitor0(node, callback, scopeWhen, through, $S, $T, $T);
    },
    _async_evaluate0$_withParent$2$2(node, callback, $S, $T) {
      return this._async_evaluate0$_withParent$2$4$scopeWhen$through(node, callback, true, null, $S, $T);
    },
    _async_evaluate0$_withParent$2$3$scopeWhen(node, callback, scopeWhen, $S, $T) {
      return this._async_evaluate0$_withParent$2$4$scopeWhen$through(node, callback, scopeWhen, null, $S, $T);
    },
    _withParent$body$_EvaluateVisitor0(node, callback, scopeWhen, through, $S, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1, result;
      var $async$_async_evaluate0$_withParent$2$4$scopeWhen$through = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._async_evaluate0$_addChild$2$through(node, through);
              t1 = $async$self._async_evaluate0$_assertInModule$2($async$self._async_evaluate0$__parent, "__parent");
              $async$self._async_evaluate0$__parent = node;
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate0$_environment.scope$1$2$when(callback, scopeWhen, $T), $async$_async_evaluate0$_withParent$2$4$scopeWhen$through);
            case 3:
              // returning from await.
              result = $async$result;
              $async$self._async_evaluate0$__parent = t1;
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_withParent$2$4$scopeWhen$through, $async$completer);
    },
    _async_evaluate0$_addChild$2$through(node, through) {
      var grandparent, t1,
        $parent = this._async_evaluate0$_assertInModule$2(this._async_evaluate0$__parent, "__parent");
      if (through != null) {
        for (; through.call$1($parent); $parent = grandparent) {
          grandparent = $parent._node1$_parent;
          if (grandparent == null)
            throw A.wrapException(A.ArgumentError$(string$.throug + node.toString$0(0) + ".", null));
        }
        if ($parent.get$hasFollowingSibling()) {
          t1 = $parent._node1$_parent;
          t1.toString;
          $parent = $parent.copyWithoutChildren$0();
          t1.addChild$1($parent);
        }
      }
      $parent.addChild$1(node);
    },
    _async_evaluate0$_addChild$1(node) {
      return this._async_evaluate0$_addChild$2$through(node, null);
    },
    _async_evaluate0$_withStyleRule$1$2(rule, callback, $T) {
      return this._withStyleRule$body$_EvaluateVisitor0(rule, callback, $T, $T);
    },
    _withStyleRule$body$_EvaluateVisitor0(rule, callback, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, result, oldRule;
      var $async$_async_evaluate0$_withStyleRule$1$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldRule = $async$self._async_evaluate0$_styleRuleIgnoringAtRoot;
              $async$self._async_evaluate0$_styleRuleIgnoringAtRoot = rule;
              $async$goto = 3;
              return A._asyncAwait(callback.call$0(), $async$_async_evaluate0$_withStyleRule$1$2);
            case 3:
              // returning from await.
              result = $async$result;
              $async$self._async_evaluate0$_styleRuleIgnoringAtRoot = oldRule;
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_withStyleRule$1$2, $async$completer);
    },
    _async_evaluate0$_withMediaQueries$1$2(queries, callback, $T) {
      return this._withMediaQueries$body$_EvaluateVisitor0(queries, callback, $T, $T);
    },
    _withMediaQueries$body$_EvaluateVisitor0(queries, callback, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, result, oldMediaQueries;
      var $async$_async_evaluate0$_withMediaQueries$1$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldMediaQueries = $async$self._async_evaluate0$_mediaQueries;
              $async$self._async_evaluate0$_mediaQueries = queries;
              $async$goto = 3;
              return A._asyncAwait(callback.call$0(), $async$_async_evaluate0$_withMediaQueries$1$2);
            case 3:
              // returning from await.
              result = $async$result;
              $async$self._async_evaluate0$_mediaQueries = oldMediaQueries;
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_withMediaQueries$1$2, $async$completer);
    },
    _async_evaluate0$_withStackFrame$1$3(member, nodeWithSpan, callback, $T) {
      return this._withStackFrame$body$_EvaluateVisitor0(member, nodeWithSpan, callback, $T, $T);
    },
    _withStackFrame$body$_EvaluateVisitor0(member, nodeWithSpan, callback, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, oldMember, result, t1;
      var $async$_async_evaluate0$_withStackFrame$1$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._async_evaluate0$_stack;
              t1.push(new A.Tuple2($async$self._async_evaluate0$_member, nodeWithSpan, type$.Tuple2_String_AstNode_2));
              oldMember = $async$self._async_evaluate0$_member;
              $async$self._async_evaluate0$_member = member;
              $async$goto = 3;
              return A._asyncAwait(callback.call$0(), $async$_async_evaluate0$_withStackFrame$1$3);
            case 3:
              // returning from await.
              result = $async$result;
              $async$self._async_evaluate0$_member = oldMember;
              t1.pop();
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_withStackFrame$1$3, $async$completer);
    },
    _async_evaluate0$_withoutSlash$2(value, nodeForSpan) {
      if (value instanceof A.SassNumber0 && value.asSlash != null)
        this._async_evaluate0$_warn$3$deprecation(string$.Using__i + A.S(new A._EvaluateVisitor__withoutSlash_recommendation2().call$1(value)) + string$.x0a_More, nodeForSpan.get$span(nodeForSpan), true);
      return value.withoutSlash$0();
    },
    _async_evaluate0$_stackFrame$2(member, span) {
      return A.frameForSpan0(span, member, A.NullableExtension_andThen0(span.file.url, new A._EvaluateVisitor__stackFrame_closure2(this)));
    },
    _async_evaluate0$_stackTrace$1(span) {
      var _this = this,
        t1 = _this._async_evaluate0$_stack;
      t1 = A.List_List$of(new A.MappedListIterable(t1, new A._EvaluateVisitor__stackTrace_closure2(_this), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,Frame>")), true, type$.Frame);
      if (span != null)
        t1.push(_this._async_evaluate0$_stackFrame$2(_this._async_evaluate0$_member, span));
      return A.Trace$(new A.ReversedListIterable(t1, A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>")), null);
    },
    _async_evaluate0$_stackTrace$0() {
      return this._async_evaluate0$_stackTrace$1(null);
    },
    _async_evaluate0$_warn$3$deprecation(message, span, deprecation) {
      var t1, _this = this;
      if (_this._async_evaluate0$_quietDeps)
        if (!_this._async_evaluate0$_inDependency) {
          t1 = _this._async_evaluate0$_currentCallable;
          t1 = t1 == null ? null : t1.inDependency;
          t1 = t1 === true;
        } else
          t1 = true;
      else
        t1 = false;
      if (t1)
        return;
      if (!_this._async_evaluate0$_warningsEmitted.add$1(0, new A.Tuple2(message, span, type$.Tuple2_String_SourceSpan)))
        return;
      _this._async_evaluate0$_logger.warn$4$deprecation$span$trace(0, message, deprecation, span, _this._async_evaluate0$_stackTrace$1(span));
    },
    _async_evaluate0$_warn$2(message, span) {
      return this._async_evaluate0$_warn$3$deprecation(message, span, false);
    },
    _async_evaluate0$_exception$2(message, span) {
      var t1 = span == null ? J.get$span$z(B.JSArray_methods.get$last(this._async_evaluate0$_stack).item2) : span;
      return new A.SassRuntimeException0(this._async_evaluate0$_stackTrace$1(span), message, t1);
    },
    _async_evaluate0$_exception$1(message) {
      return this._async_evaluate0$_exception$2(message, null);
    },
    _async_evaluate0$_multiSpanException$3(message, primaryLabel, secondaryLabels) {
      var t1 = J.get$span$z(B.JSArray_methods.get$last(this._async_evaluate0$_stack).item2);
      return new A.MultiSpanSassRuntimeException0(this._async_evaluate0$_stackTrace$0(), primaryLabel, A.ConstantMap_ConstantMap$from(secondaryLabels, type$.FileSpan, type$.String), message, t1);
    },
    _async_evaluate0$_adjustParseError$1$2(nodeWithSpan, callback) {
      var error, stackTrace, errorText, span, syntheticFile, syntheticSpan, t1, exception, t2, t3, t4, t5, t6, _null = null;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.SassFormatException0) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          t1 = error;
          t2 = J.getInterceptor$z(t1);
          errorText = A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(A.SourceSpanException.prototype.get$span.call(t2, t1).file._decodedChars, 0, _null), 0, _null);
          span = nodeWithSpan.get$span(nodeWithSpan);
          t1 = span;
          t2 = span;
          syntheticFile = B.JSString_methods.replaceRange$3(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(span.file._decodedChars, 0, _null), 0, _null), A.FileLocation$_(t1.file, t1._file$_start).offset, A.FileLocation$_(t2.file, t2._end).offset, errorText);
          t2 = A.SourceFile$fromString(syntheticFile, span.file.url);
          t1 = span;
          t1 = A.FileLocation$_(t1.file, t1._file$_start);
          t3 = error;
          t4 = J.getInterceptor$z(t3);
          t3 = A.SourceSpanException.prototype.get$span.call(t4, t3);
          t3 = A.FileLocation$_(t3.file, t3._file$_start);
          t4 = span;
          t4 = A.FileLocation$_(t4.file, t4._file$_start);
          t5 = error;
          t6 = J.getInterceptor$z(t5);
          t5 = A.SourceSpanException.prototype.get$span.call(t6, t5);
          syntheticSpan = t2.span$2(0, t1.offset + t3.offset, t4.offset + A.FileLocation$_(t5.file, t5._end).offset);
          A.throwWithTrace0(this._async_evaluate0$_exception$2(error._span_exception$_message, syntheticSpan), stackTrace);
        } else
          throw exception;
      }
    },
    _async_evaluate0$_adjustParseError$2(nodeWithSpan, callback) {
      return this._async_evaluate0$_adjustParseError$1$2(nodeWithSpan, callback, type$.dynamic);
    },
    _async_evaluate0$_addExceptionSpan$1$2(nodeWithSpan, callback) {
      var error, stackTrace, error0, stackTrace0, t1, exception, t2, t3, t4;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.MultiSpanSassScriptException0) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          t1 = error.message;
          t2 = nodeWithSpan.get$span(nodeWithSpan);
          t3 = error.primaryLabel;
          t4 = error.secondarySpans;
          A.throwWithTrace0(new A.MultiSpanSassRuntimeException0(this._async_evaluate0$_stackTrace$1(nodeWithSpan.get$span(nodeWithSpan)), t3, A.ConstantMap_ConstantMap$from(t4, type$.FileSpan, type$.String), t1, t2), stackTrace);
        } else if (t1 instanceof A.SassScriptException0) {
          error0 = t1;
          stackTrace0 = A.getTraceFromException(exception);
          A.throwWithTrace0(this._async_evaluate0$_exception$2(error0.message, nodeWithSpan.get$span(nodeWithSpan)), stackTrace0);
        } else
          throw exception;
      }
    },
    _async_evaluate0$_addExceptionSpan$2(nodeWithSpan, callback) {
      return this._async_evaluate0$_addExceptionSpan$1$2(nodeWithSpan, callback, type$.dynamic);
    },
    _async_evaluate0$_addExceptionSpanAsync$1$2(nodeWithSpan, callback, $T) {
      return this._addExceptionSpanAsync$body$_EvaluateVisitor0(nodeWithSpan, callback, $T, $T);
    },
    _addExceptionSpanAsync$body$_EvaluateVisitor0(nodeWithSpan, callback, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, error, stackTrace, error0, stackTrace0, t1, exception, t2, t3, t4, $async$exception;
      var $async$_async_evaluate0$_addExceptionSpanAsync$1$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(callback.call$0(), $async$_async_evaluate0$_addExceptionSpanAsync$1$2);
            case 7:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.MultiSpanSassScriptException0) {
                error = t1;
                stackTrace = A.getTraceFromException($async$exception);
                t1 = error.message;
                t2 = nodeWithSpan.get$span(nodeWithSpan);
                t3 = error.primaryLabel;
                t4 = error.secondarySpans;
                A.throwWithTrace0(new A.MultiSpanSassRuntimeException0($async$self._async_evaluate0$_stackTrace$1(nodeWithSpan.get$span(nodeWithSpan)), t3, A.ConstantMap_ConstantMap$from(t4, type$.FileSpan, type$.String), t1, t2), stackTrace);
              } else if (t1 instanceof A.SassScriptException0) {
                error0 = t1;
                stackTrace0 = A.getTraceFromException($async$exception);
                A.throwWithTrace0($async$self._async_evaluate0$_exception$2(error0.message, nodeWithSpan.get$span(nodeWithSpan)), stackTrace0);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_addExceptionSpanAsync$1$2, $async$completer);
    },
    _async_evaluate0$_addErrorSpan$1$2(nodeWithSpan, callback, $T) {
      return this._addErrorSpan$body$_EvaluateVisitor0(nodeWithSpan, callback, $T, $T);
    },
    _addErrorSpan$body$_EvaluateVisitor0(nodeWithSpan, callback, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, error, stackTrace, t1, exception, t2, $async$exception;
      var $async$_async_evaluate0$_addErrorSpan$1$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(callback.call$0(), $async$_async_evaluate0$_addErrorSpan$1$2);
            case 7:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.SassRuntimeException_2._is(t1)) {
                error = t1;
                stackTrace = A.getTraceFromException($async$exception);
                t1 = J.get$span$z(error);
                if (!B.JSString_methods.startsWith$1(A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1.file._decodedChars, t1._file$_start, t1._end), 0, null), "@error"))
                  throw $async$exception;
                t1 = error._span_exception$_message;
                t2 = nodeWithSpan.get$span(nodeWithSpan);
                A.throwWithTrace0(new A.SassRuntimeException0($async$self._async_evaluate0$_stackTrace$0(), t1, t2), stackTrace);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_async_evaluate0$_addErrorSpan$1$2, $async$completer);
    }
  };
  A._EvaluateVisitor_closure29.prototype = {
    call$1($arguments) {
      var module, t2,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1("name");
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1("module");
      t1 = this.$this._async_evaluate0$_environment;
      t2 = A.stringReplaceAllUnchecked(variable._string0$_text, "_", "-");
      return t1.globalVariableExists$2$namespace(t2, module == null ? null : module._string0$_text) ? B.SassBoolean_true0 : B.SassBoolean_false0;
    },
    $signature: 18
  };
  A._EvaluateVisitor_closure30.prototype = {
    call$1($arguments) {
      var variable = J.$index$asx($arguments, 0).assertString$1("name"),
        t1 = this.$this._async_evaluate0$_environment;
      return t1.getVariable$1(A.stringReplaceAllUnchecked(variable._string0$_text, "_", "-")) != null ? B.SassBoolean_true0 : B.SassBoolean_false0;
    },
    $signature: 18
  };
  A._EvaluateVisitor_closure31.prototype = {
    call$1($arguments) {
      var module, t2, t3, t4,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1("name");
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1("module");
      t1 = this.$this;
      t2 = t1._async_evaluate0$_environment;
      t3 = variable._string0$_text;
      t4 = A.stringReplaceAllUnchecked(t3, "_", "-");
      return t2.getFunction$2$namespace(t4, module == null ? null : module._string0$_text) != null || t1._async_evaluate0$_builtInFunctions.containsKey$1(t3) ? B.SassBoolean_true0 : B.SassBoolean_false0;
    },
    $signature: 18
  };
  A._EvaluateVisitor_closure32.prototype = {
    call$1($arguments) {
      var module, t2,
        t1 = J.getInterceptor$asx($arguments),
        variable = t1.$index($arguments, 0).assertString$1("name");
      t1 = t1.$index($arguments, 1).get$realNull();
      module = t1 == null ? null : t1.assertString$1("module");
      t1 = this.$this._async_evaluate0$_environment;
      t2 = A.stringReplaceAllUnchecked(variable._string0$_text, "_", "-");
      return t1.getMixin$2$namespace(t2, module == null ? null : module._string0$_text) != null ? B.SassBoolean_true0 : B.SassBoolean_false0;
    },
    $signature: 18
  };
  A._EvaluateVisitor_closure33.prototype = {
    call$1($arguments) {
      var t1 = this.$this._async_evaluate0$_environment;
      if (!t1._async_environment0$_inMixin)
        throw A.wrapException(A.SassScriptException$0(string$.conten));
      return t1._async_environment0$_content != null ? B.SassBoolean_true0 : B.SassBoolean_false0;
    },
    $signature: 18
  };
  A._EvaluateVisitor_closure34.prototype = {
    call$1($arguments) {
      var t2, t3, t4,
        t1 = J.$index$asx($arguments, 0).assertString$1("module")._string0$_text,
        module = this.$this._async_evaluate0$_environment._async_environment0$_modules.$index(0, t1);
      if (module == null)
        throw A.wrapException('There is no module with namespace "' + t1 + '".');
      t1 = type$.Value_2;
      t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t3 = module.get$variables(), t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
        t4 = t3.get$current(t3);
        t2.$indexSet(0, new A.SassString0(t4.key, true), t4.value);
      }
      return new A.SassMap0(A.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 40
  };
  A._EvaluateVisitor_closure35.prototype = {
    call$1($arguments) {
      var t2, t3, t4,
        t1 = J.$index$asx($arguments, 0).assertString$1("module")._string0$_text,
        module = this.$this._async_evaluate0$_environment._async_environment0$_modules.$index(0, t1);
      if (module == null)
        throw A.wrapException('There is no module with namespace "' + t1 + '".');
      t1 = type$.Value_2;
      t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t3 = module.get$functions(module), t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
        t4 = t3.get$current(t3);
        t2.$indexSet(0, new A.SassString0(t4.key, true), new A.SassFunction0(t4.value));
      }
      return new A.SassMap0(A.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 40
  };
  A._EvaluateVisitor_closure36.prototype = {
    call$1($arguments) {
      var module, callable, t2,
        t1 = J.getInterceptor$asx($arguments),
        $name = t1.$index($arguments, 0).assertString$1("name"),
        css = t1.$index($arguments, 1).get$isTruthy();
      t1 = t1.$index($arguments, 2).get$realNull();
      module = t1 == null ? null : t1.assertString$1("module");
      if (css && module != null)
        throw A.wrapException(string$.x24css_a);
      if (css)
        callable = new A.PlainCssCallable0($name._string0$_text);
      else {
        t1 = this.$this;
        t2 = t1._async_evaluate0$_callableNode;
        t2.toString;
        callable = t1._async_evaluate0$_addExceptionSpan$2(t2, new A._EvaluateVisitor__closure10(t1, $name, module));
      }
      if (callable != null)
        return new A.SassFunction0(callable);
      throw A.wrapException("Function not found: " + $name.toString$0(0));
    },
    $signature: 162
  };
  A._EvaluateVisitor__closure10.prototype = {
    call$0() {
      var t1 = A.stringReplaceAllUnchecked(this.name._string0$_text, "_", "-"),
        t2 = this.module;
      t2 = t2 == null ? null : t2._string0$_text;
      return this.$this._async_evaluate0$_getFunction$2$namespace(t1, t2);
    },
    $signature: 115
  };
  A._EvaluateVisitor_closure37.prototype = {
    call$1($arguments) {
      return this.$call$body$_EvaluateVisitor_closure2($arguments);
    },
    $call$body$_EvaluateVisitor_closure2($arguments) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value_2),
        $async$returnValue, $async$self = this, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, invocation, callableNode, t1, $function, args;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx($arguments);
              $function = t1.$index($arguments, 0);
              args = type$.SassArgumentList_2._as(t1.$index($arguments, 1));
              t1 = $async$self.$this;
              t2 = t1._async_evaluate0$_callableNode;
              t2.toString;
              t3 = A._setArrayType([], type$.JSArray_Expression_2);
              t4 = type$.String;
              t5 = type$.Expression_2;
              t6 = t2.get$span(t2);
              t7 = t2.get$span(t2);
              args._argument_list$_wereKeywordsAccessed = true;
              t8 = args._argument_list$_keywords;
              if (t8.get$isEmpty(t8))
                t2 = null;
              else {
                t9 = type$.Value_2;
                t10 = A.LinkedHashMap_LinkedHashMap$_empty(t9, t9);
                for (args._argument_list$_wereKeywordsAccessed = true, t8 = t8.get$entries(t8), t8 = t8.get$iterator(t8); t8.moveNext$0();) {
                  t11 = t8.get$current(t8);
                  t10.$indexSet(0, new A.SassString0(t11.key, false), t11.value);
                }
                t2 = new A.ValueExpression0(new A.SassMap0(A.ConstantMap_ConstantMap$from(t10, t9, t9)), t2.get$span(t2));
              }
              invocation = new A.ArgumentInvocation0(A.List_List$unmodifiable(t3, t5), A.ConstantMap_ConstantMap$from(A.LinkedHashMap_LinkedHashMap$_empty(t4, t5), t4, t5), new A.ValueExpression0(args, t7), t2, t6);
              $async$goto = $function instanceof A.SassString0 ? 3 : 4;
              break;
            case 3:
              // then
              t2 = $function.toString$0(0);
              A.EvaluationContext_current0().warn$2$deprecation(0, string$.Passin + t2 + "))", true);
              callableNode = t1._async_evaluate0$_callableNode;
              $async$goto = 5;
              return A._asyncAwait(t1.visitFunctionExpression$1(new A.FunctionExpression0(null, $function._string0$_text, invocation, callableNode.get$span(callableNode))), $async$call$1);
            case 5:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              t2 = $function.assertFunction$1("function");
              t3 = t1._async_evaluate0$_callableNode;
              t3.toString;
              $async$goto = 6;
              return A._asyncAwait(t1._async_evaluate0$_runFunctionCallable$3(invocation, t2.callable, t3), $async$call$1);
            case 6:
              // returning from await.
              t3 = $async$result;
              $async$returnValue = t3;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 99
  };
  A._EvaluateVisitor_closure38.prototype = {
    call$1($arguments) {
      return this.$call$body$_EvaluateVisitor_closure1($arguments);
    },
    $call$body$_EvaluateVisitor_closure1($arguments) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, withMap, t2, values, configuration, t1, url;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx($arguments);
              url = A.Uri_parse(t1.$index($arguments, 0).assertString$1("url")._string0$_text);
              t1 = t1.$index($arguments, 1).get$realNull();
              withMap = t1 == null ? null : t1.assertMap$1("with")._map0$_contents;
              t1 = $async$self.$this;
              t2 = t1._async_evaluate0$_callableNode;
              t2.toString;
              if (withMap != null) {
                values = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.ConfiguredValue_2);
                withMap.forEach$1(0, new A._EvaluateVisitor__closure8(values, t2.get$span(t2), t2));
                configuration = new A.ExplicitConfiguration0(t2, values);
              } else
                configuration = B.Configuration_Map_empty0;
              $async$goto = 2;
              return A._asyncAwait(t1._async_evaluate0$_loadModule$7$baseUrl$configuration$namesInErrors(url, "load-css()", t2, new A._EvaluateVisitor__closure9(t1), t2.get$span(t2).file.url, configuration, true), $async$call$1);
            case 2:
              // returning from await.
              t1._async_evaluate0$_assertConfigurationIsEmpty$2$nameInError(configuration, true);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 315
  };
  A._EvaluateVisitor__closure8.prototype = {
    call$2(variable, value) {
      var t1 = variable.assertString$1("with key"),
        $name = A.stringReplaceAllUnchecked(t1._string0$_text, "_", "-");
      t1 = this.values;
      if (t1.containsKey$1($name))
        throw A.wrapException("The variable $" + $name + " was configured twice.");
      t1.$indexSet(0, $name, new A.ConfiguredValue0(value, this.span, this.callableNode));
    },
    $signature: 55
  };
  A._EvaluateVisitor__closure9.prototype = {
    call$1(module) {
      var t1 = this.$this;
      return t1._async_evaluate0$_combineCss$2$clone(module, true).accept$1(t1);
    },
    $signature: 165
  };
  A._EvaluateVisitor_run_closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.EvaluateResult_2),
        $async$returnValue, $async$self = this, t2, t1, url, $async$temp1, $async$temp2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node;
              url = t1.span.file.url;
              if (url != null) {
                t2 = $async$self.$this;
                t2._async_evaluate0$_activeModules.$indexSet(0, url, null);
                if (!(t2._async_evaluate0$_nodeImporter != null && url.toString$0(0) === "stdin"))
                  t2._async_evaluate0$_loadedUrls.add$1(0, url);
              }
              t2 = $async$self.$this;
              $async$temp1 = A;
              $async$temp2 = t2;
              $async$goto = 3;
              return A._asyncAwait(t2._async_evaluate0$_execute$2($async$self.importer, t1), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.EvaluateResult0($async$temp2._async_evaluate0$_combineCss$1($async$result), t2._async_evaluate0$_loadedUrls);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 318
  };
  A._EvaluateVisitor__loadModule_closure5.prototype = {
    call$0() {
      return this.callback.call$1(this.builtInModule);
    },
    $signature: 0
  };
  A._EvaluateVisitor__loadModule_closure6.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, oldInDependency, module, error, stackTrace, error0, stackTrace0, error1, stackTrace1, error2, stackTrace2, message, exception, t3, t4, t5, t6, t7, t1, t2, result, stylesheet, canonicalUrl, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.nodeWithSpan;
              $async$goto = 2;
              return A._asyncAwait(t1._async_evaluate0$_loadStylesheet$3$baseUrl($async$self.url.toString$0(0), t2.get$span(t2), $async$self.baseUrl), $async$call$0);
            case 2:
              // returning from await.
              result = $async$result;
              stylesheet = result.stylesheet;
              canonicalUrl = stylesheet.span.file.url;
              if (canonicalUrl != null && t1._async_evaluate0$_activeModules.containsKey$1(canonicalUrl)) {
                message = $async$self.namesInErrors ? "Module loop: " + $.$get$context().prettyUri$1(canonicalUrl) + " is already being loaded." : string$.Modulel;
                t2 = A.NullableExtension_andThen0(t1._async_evaluate0$_activeModules.$index(0, canonicalUrl), new A._EvaluateVisitor__loadModule__closure2(t1, message));
                throw A.wrapException(t2 == null ? t1._async_evaluate0$_exception$1(message) : t2);
              }
              if (canonicalUrl != null)
                t1._async_evaluate0$_activeModules.$indexSet(0, canonicalUrl, t2);
              oldInDependency = t1._async_evaluate0$_inDependency;
              t1._async_evaluate0$_inDependency = result.isDependency;
              module = null;
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(t1._async_evaluate0$_execute$5$configuration$namesInErrors$nodeWithSpan(result.importer, stylesheet, $async$self.configuration, $async$self.namesInErrors, t2), $async$call$0);
            case 6:
              // returning from await.
              module = $async$result;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              t1._async_evaluate0$_activeModules.remove$1(0, canonicalUrl);
              t1._async_evaluate0$_inDependency = oldInDependency;
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait($async$self.callback.call$1(module), $async$call$0);
            case 11:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception = $async$currentError;
              t2 = A.unwrapException($async$exception);
              if (type$.SassRuntimeException_2._is(t2))
                throw $async$exception;
              else if (t2 instanceof A.MultiSpanSassException0) {
                error = t2;
                stackTrace = A.getTraceFromException($async$exception);
                t2 = error._span_exception$_message;
                t3 = error;
                t4 = J.getInterceptor$z(t3);
                t3 = A.SourceSpanException.prototype.get$span.call(t4, t3);
                t4 = error.primaryLabel;
                t5 = error.secondarySpans;
                t6 = error;
                t7 = J.getInterceptor$z(t6);
                A.throwWithTrace0(new A.MultiSpanSassRuntimeException0(t1._async_evaluate0$_stackTrace$1(A.SourceSpanException.prototype.get$span.call(t7, t6)), t4, A.ConstantMap_ConstantMap$from(t5, type$.FileSpan, type$.String), t2, t3), stackTrace);
              } else if (t2 instanceof A.SassException0) {
                error0 = t2;
                stackTrace0 = A.getTraceFromException($async$exception);
                t2 = error0;
                t3 = J.getInterceptor$z(t2);
                A.throwWithTrace0(t1._async_evaluate0$_exception$2(error0._span_exception$_message, A.SourceSpanException.prototype.get$span.call(t3, t2)), stackTrace0);
              } else if (t2 instanceof A.MultiSpanSassScriptException0) {
                error1 = t2;
                stackTrace1 = A.getTraceFromException($async$exception);
                A.throwWithTrace0(t1._async_evaluate0$_multiSpanException$3(error1.message, error1.primaryLabel, error1.secondarySpans), stackTrace1);
              } else if (t2 instanceof A.SassScriptException0) {
                error2 = t2;
                stackTrace2 = A.getTraceFromException($async$exception);
                A.throwWithTrace0(t1._async_evaluate0$_exception$1(error2.message), stackTrace2);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor__loadModule__closure2.prototype = {
    call$1(previousLoad) {
      return this.$this._async_evaluate0$_multiSpanException$3(this.message, "new load", A.LinkedHashMap_LinkedHashMap$_literal([previousLoad.get$span(previousLoad), "original load"], type$.FileSpan, type$.String));
    },
    $signature: 93
  };
  A._EvaluateVisitor__execute_closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t3, t4, t5, t6, t1, oldImporter, oldStylesheet, oldRoot, oldParent, oldEndOfImports, oldOutOfOrderImports, oldExtensionStore, t2, oldStyleRule, oldMediaQueries, oldDeclarationName, oldInUnknownAtRule, oldInKeyframes, oldConfiguration;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              oldImporter = t1._async_evaluate0$_importer;
              oldStylesheet = t1._async_evaluate0$__stylesheet;
              oldRoot = t1._async_evaluate0$__root;
              oldParent = t1._async_evaluate0$__parent;
              oldEndOfImports = t1._async_evaluate0$__endOfImports;
              oldOutOfOrderImports = t1._async_evaluate0$_outOfOrderImports;
              oldExtensionStore = t1._async_evaluate0$__extensionStore;
              t2 = t1._async_evaluate0$_atRootExcludingStyleRule;
              oldStyleRule = t2 ? null : t1._async_evaluate0$_styleRuleIgnoringAtRoot;
              oldMediaQueries = t1._async_evaluate0$_mediaQueries;
              oldDeclarationName = t1._async_evaluate0$_declarationName;
              oldInUnknownAtRule = t1._async_evaluate0$_inUnknownAtRule;
              oldInKeyframes = t1._async_evaluate0$_inKeyframes;
              oldConfiguration = t1._async_evaluate0$_configuration;
              t1._async_evaluate0$_importer = $async$self.importer;
              t3 = t1._async_evaluate0$__stylesheet = $async$self.stylesheet;
              t4 = t3.span;
              t5 = t1._async_evaluate0$__parent = t1._async_evaluate0$__root = A.ModifiableCssStylesheet$0(t4);
              t1._async_evaluate0$__endOfImports = 0;
              t1._async_evaluate0$_outOfOrderImports = null;
              t1._async_evaluate0$__extensionStore = $async$self.extensionStore;
              t1._async_evaluate0$_declarationName = t1._async_evaluate0$_mediaQueries = t1._async_evaluate0$_styleRuleIgnoringAtRoot = null;
              t1._async_evaluate0$_inKeyframes = t1._async_evaluate0$_atRootExcludingStyleRule = t1._async_evaluate0$_inUnknownAtRule = false;
              t6 = $async$self.configuration;
              if (t6 != null)
                t1._async_evaluate0$_configuration = t6;
              $async$goto = 2;
              return A._asyncAwait(t1.visitStylesheet$1(t3), $async$call$0);
            case 2:
              // returning from await.
              t3 = t1._async_evaluate0$_outOfOrderImports == null ? t5 : new A.CssStylesheet0(new A.UnmodifiableListView(t1._async_evaluate0$_addOutOfOrderImports$0(), type$.UnmodifiableListView_CssNode_2), t4);
              $async$self.css._value = t3;
              t1._async_evaluate0$_importer = oldImporter;
              t1._async_evaluate0$__stylesheet = oldStylesheet;
              t1._async_evaluate0$__root = oldRoot;
              t1._async_evaluate0$__parent = oldParent;
              t1._async_evaluate0$__endOfImports = oldEndOfImports;
              t1._async_evaluate0$_outOfOrderImports = oldOutOfOrderImports;
              t1._async_evaluate0$__extensionStore = oldExtensionStore;
              t1._async_evaluate0$_styleRuleIgnoringAtRoot = oldStyleRule;
              t1._async_evaluate0$_mediaQueries = oldMediaQueries;
              t1._async_evaluate0$_declarationName = oldDeclarationName;
              t1._async_evaluate0$_inUnknownAtRule = oldInUnknownAtRule;
              t1._async_evaluate0$_atRootExcludingStyleRule = t2;
              t1._async_evaluate0$_inKeyframes = oldInKeyframes;
              t1._async_evaluate0$_configuration = oldConfiguration;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor__combineCss_closure8.prototype = {
    call$1(module) {
      return module.get$transitivelyContainsCss();
    },
    $signature: 123
  };
  A._EvaluateVisitor__combineCss_closure9.prototype = {
    call$1(target) {
      return !this.selectors.contains$1(0, target);
    },
    $signature: 15
  };
  A._EvaluateVisitor__combineCss_closure10.prototype = {
    call$1(module) {
      return module.cloneCss$0();
    },
    $signature: 321
  };
  A._EvaluateVisitor__extendModules_closure5.prototype = {
    call$1(target) {
      return !this.originalSelectors.contains$1(0, target);
    },
    $signature: 15
  };
  A._EvaluateVisitor__extendModules_closure6.prototype = {
    call$0() {
      return A._setArrayType([], type$.JSArray_ExtensionStore_2);
    },
    $signature: 168
  };
  A._EvaluateVisitor__topologicalModules_visitModule2.prototype = {
    call$1(module) {
      var t1, t2, t3, _i, upstream;
      for (t1 = module.get$upstream(), t2 = t1.length, t3 = this.seen, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        upstream = t1[_i];
        if (upstream.get$transitivelyContainsCss() && t3.add$1(0, upstream))
          this.call$1(upstream);
      }
      this.sorted.addFirst$1(module);
    },
    $signature: 165
  };
  A._EvaluateVisitor_visitAtRootRule_closure8.prototype = {
    call$0() {
      var t1 = A.SpanScanner$(this.resolved, null);
      return new A.AtRootQueryParser0(t1, this.$this._async_evaluate0$_logger).parse$0();
    },
    $signature: 108
  };
  A._EvaluateVisitor_visitAtRootRule_closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node.children, t2 = t1.length, t3 = $async$self.$this, _i = 0;
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitAtRootRule_closure10.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node.children, t2 = t1.length, t3 = $async$self.$this, _i = 0;
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 34
  };
  A._EvaluateVisitor__scopeForAtRoot_closure17.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1._async_evaluate0$_assertInModule$2(t1._async_evaluate0$__parent, "__parent");
              t1._async_evaluate0$__parent = $async$self.newParent;
              $async$goto = 2;
              return A._asyncAwait(t1._async_evaluate0$_environment.scope$1$2$when(callback, $async$self.node.hasDeclarations, type$.void), $async$call$1);
            case 2:
              // returning from await.
              t1._async_evaluate0$__parent = t2;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 32
  };
  A._EvaluateVisitor__scopeForAtRoot_closure18.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, oldAtRootExcludingStyleRule;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              oldAtRootExcludingStyleRule = t1._async_evaluate0$_atRootExcludingStyleRule;
              t1._async_evaluate0$_atRootExcludingStyleRule = true;
              $async$goto = 2;
              return A._asyncAwait($async$self.innerScope.call$1(callback), $async$call$1);
            case 2:
              // returning from await.
              t1._async_evaluate0$_atRootExcludingStyleRule = oldAtRootExcludingStyleRule;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 32
  };
  A._EvaluateVisitor__scopeForAtRoot_closure19.prototype = {
    call$1(callback) {
      return this.$this._async_evaluate0$_withMediaQueries$1$2(null, new A._EvaluateVisitor__scopeForAtRoot__closure2(this.innerScope, callback), type$.Null);
    },
    $signature: 32
  };
  A._EvaluateVisitor__scopeForAtRoot__closure2.prototype = {
    call$0() {
      return this.innerScope.call$1(this.callback);
    },
    $signature: 2
  };
  A._EvaluateVisitor__scopeForAtRoot_closure20.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, wasInKeyframes;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              wasInKeyframes = t1._async_evaluate0$_inKeyframes;
              t1._async_evaluate0$_inKeyframes = false;
              $async$goto = 2;
              return A._asyncAwait($async$self.innerScope.call$1(callback), $async$call$1);
            case 2:
              // returning from await.
              t1._async_evaluate0$_inKeyframes = wasInKeyframes;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 32
  };
  A._EvaluateVisitor__scopeForAtRoot_closure21.prototype = {
    call$1($parent) {
      return type$.CssAtRule_2._is($parent);
    },
    $signature: 170
  };
  A._EvaluateVisitor__scopeForAtRoot_closure22.prototype = {
    call$1(callback) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, wasInUnknownAtRule;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              wasInUnknownAtRule = t1._async_evaluate0$_inUnknownAtRule;
              t1._async_evaluate0$_inUnknownAtRule = false;
              $async$goto = 2;
              return A._asyncAwait($async$self.innerScope.call$1(callback), $async$call$1);
            case 2:
              // returning from await.
              t1._async_evaluate0$_inUnknownAtRule = wasInUnknownAtRule;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 32
  };
  A._EvaluateVisitor_visitContentRule_closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t1, t2, t3, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.content.declaration.children, t2 = t1.length, t3 = $async$self.$this, _i = 0;
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return A._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 6:
              // returning from await.
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitDeclaration_closure5.prototype = {
    call$1(value) {
      return this.$call$body$_EvaluateVisitor_visitDeclaration_closure0(value);
    },
    $call$body$_EvaluateVisitor_visitDeclaration_closure0(value) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CssValue_Value_2),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(value.accept$1($async$self.$this), $async$call$1);
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.CssValue0($async$result, value.get$span(value), type$.CssValue_Value_2);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 325
  };
  A._EvaluateVisitor_visitDeclaration_closure6.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.children, t2 = t1.length, t3 = $async$self.$this, _i = 0;
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitEachRule_closure8.prototype = {
    call$1(value) {
      var t1 = this.$this,
        t2 = this.nodeWithSpan;
      return t1._async_evaluate0$_environment.setLocalVariable$3(B.JSArray_methods.get$first(this.node.variables), t1._async_evaluate0$_withoutSlash$2(value, t2), t2);
    },
    $signature: 53
  };
  A._EvaluateVisitor_visitEachRule_closure9.prototype = {
    call$1(value) {
      return this.$this._async_evaluate0$_setMultipleVariables$3(this.node.variables, value, this.nodeWithSpan);
    },
    $signature: 53
  };
  A._EvaluateVisitor_visitEachRule_closure10.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      return t1._async_evaluate0$_handleReturn$2(_this.list.get$asList(), new A._EvaluateVisitor_visitEachRule__closure2(t1, _this.setVariables, _this.node));
    },
    $signature: 64
  };
  A._EvaluateVisitor_visitEachRule__closure2.prototype = {
    call$1(element) {
      var t1;
      this.setVariables.call$1(element);
      t1 = this.$this;
      return t1._async_evaluate0$_handleReturn$2(this.node.children, new A._EvaluateVisitor_visitEachRule___closure2(t1));
    },
    $signature: 328
  };
  A._EvaluateVisitor_visitEachRule___closure2.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 97
  };
  A._EvaluateVisitor_visitExtendRule_closure2.prototype = {
    call$0() {
      var t1 = this.targetText;
      return A.SelectorList_SelectorList$parse0(A.trimAscii0(t1.get$value(t1), true), false, true, this.$this._async_evaluate0$_logger);
    },
    $signature: 45
  };
  A._EvaluateVisitor_visitAtRule_closure8.prototype = {
    call$1(value) {
      return this.$this._async_evaluate0$_interpolationToValue$3$trim$warnForColor(value, true, true);
    },
    $signature: 331
  };
  A._EvaluateVisitor_visitAtRule_closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t2, t3, _i, t1, styleRule;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate0$_atRootExcludingStyleRule ? null : t1._async_evaluate0$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null || t1._async_evaluate0$_inKeyframes ? 2 : 4;
              break;
            case 2:
              // then
              t2 = $async$self.children, t3 = t2.length, _i = 0;
            case 5:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              $async$goto = 8;
              return A._asyncAwait(t2[_i].accept$1(t1), $async$call$0);
            case 8:
              // returning from await.
            case 6:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 5;
              break;
            case 7:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 9;
              return A._asyncAwait(t1._async_evaluate0$_withParent$2$3$scopeWhen(A.ModifiableCssStyleRule$0(styleRule.selector, styleRule.span, styleRule.originalSelector), new A._EvaluateVisitor_visitAtRule__closure2(t1, $async$self.children), false, type$.ModifiableCssStyleRule_2, type$.Null), $async$call$0);
            case 9:
              // returning from await.
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitAtRule__closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.children, t2 = t1.length, t3 = $async$self.$this, _i = 0;
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitAtRule_closure10.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 7
  };
  A._EvaluateVisitor_visitForRule_closure14.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SassNumber_2),
        $async$returnValue, $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.node.from.accept$1($async$self.$this), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.assertNumber$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 176
  };
  A._EvaluateVisitor_visitForRule_closure15.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SassNumber_2),
        $async$returnValue, $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.node.to.accept$1($async$self.$this), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.assertNumber$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 176
  };
  A._EvaluateVisitor_visitForRule_closure16.prototype = {
    call$0() {
      return this.fromNumber.assertInt$0();
    },
    $signature: 12
  };
  A._EvaluateVisitor_visitForRule_closure17.prototype = {
    call$0() {
      var t1 = this.fromNumber;
      return this.toNumber.coerce$2(t1.get$numeratorUnits(t1), t1.get$denominatorUnits(t1)).assertInt$0();
    },
    $signature: 12
  };
  A._EvaluateVisitor_visitForRule_closure18.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, i, t3, t4, t5, t6, t7, t8, result, t1, t2, nodeWithSpan;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.node;
              nodeWithSpan = t1._async_evaluate0$_expressionNode$1(t2.from);
              i = $async$self.from, t3 = $async$self._box_0, t4 = $async$self.direction, t5 = t2.variable, t6 = $async$self.fromNumber, t2 = t2.children;
            case 3:
              // for condition
              if (!(i !== t3.to)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t7 = t1._async_evaluate0$_environment;
              t8 = t6.get$numeratorUnits(t6);
              t7.setLocalVariable$3(t5, A.SassNumber_SassNumber$withUnits0(i, t6.get$denominatorUnits(t6), t8), nodeWithSpan);
              $async$goto = 6;
              return A._asyncAwait(t1._async_evaluate0$_handleReturn$2(t2, new A._EvaluateVisitor_visitForRule__closure2(t1)), $async$call$0);
            case 6:
              // returning from await.
              result = $async$result;
              if (result != null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              i += t4;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 64
  };
  A._EvaluateVisitor_visitForRule__closure2.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 97
  };
  A._EvaluateVisitor_visitForwardRule_closure5.prototype = {
    call$1(module) {
      this.$this._async_evaluate0$_environment.forwardModule$2(module, this.node);
    },
    $signature: 112
  };
  A._EvaluateVisitor_visitForwardRule_closure6.prototype = {
    call$1(module) {
      this.$this._async_evaluate0$_environment.forwardModule$2(module, this.node);
    },
    $signature: 112
  };
  A._EvaluateVisitor_visitIfRule_closure2.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1._async_evaluate0$_handleReturn$2(this._box_0.clause.children, new A._EvaluateVisitor_visitIfRule__closure2(t1));
    },
    $signature: 64
  };
  A._EvaluateVisitor_visitIfRule__closure2.prototype = {
    call$1(child) {
      return child.accept$1(this.$this);
    },
    $signature: 97
  };
  A._EvaluateVisitor__visitDynamicImport_closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t3, t4, oldImporter, oldInDependency, loadsUserDefinedModules, children, t5, t6, t7, t8, t9, t10, environment, module, visitor, t1, t2, result, stylesheet, url;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.$import;
              $async$goto = 3;
              return A._asyncAwait(t1._async_evaluate0$_loadStylesheet$3$forImport(t2.urlString, t2.span, true), $async$call$0);
            case 3:
              // returning from await.
              result = $async$result;
              stylesheet = result.stylesheet;
              url = stylesheet.span.file.url;
              if (url != null) {
                t3 = t1._async_evaluate0$_activeModules;
                if (t3.containsKey$1(url)) {
                  t2 = A.NullableExtension_andThen0(t3.$index(0, url), new A._EvaluateVisitor__visitDynamicImport__closure11(t1));
                  throw A.wrapException(t2 == null ? t1._async_evaluate0$_exception$1("This file is already being loaded.") : t2);
                }
                t3.$indexSet(0, url, t2);
              }
              t2 = stylesheet._stylesheet1$_uses;
              t3 = type$.UnmodifiableListView_UseRule_2;
              t4 = new A.UnmodifiableListView(t2, t3);
              if (t4.get$length(t4) === 0) {
                t4 = new A.UnmodifiableListView(stylesheet._stylesheet1$_forwards, type$.UnmodifiableListView_ForwardRule_2);
                t4 = t4.get$length(t4) === 0;
              } else
                t4 = false;
              $async$goto = t4 ? 4 : 5;
              break;
            case 4:
              // then
              oldImporter = t1._async_evaluate0$_importer;
              t2 = t1._async_evaluate0$_assertInModule$2(t1._async_evaluate0$__stylesheet, "_stylesheet");
              oldInDependency = t1._async_evaluate0$_inDependency;
              t1._async_evaluate0$_importer = result.importer;
              t1._async_evaluate0$__stylesheet = stylesheet;
              t1._async_evaluate0$_inDependency = result.isDependency;
              $async$goto = 6;
              return A._asyncAwait(t1.visitStylesheet$1(stylesheet), $async$call$0);
            case 6:
              // returning from await.
              t1._async_evaluate0$_importer = oldImporter;
              t1._async_evaluate0$__stylesheet = t2;
              t1._async_evaluate0$_inDependency = oldInDependency;
              t1._async_evaluate0$_activeModules.remove$1(0, url);
              // goto return
              $async$goto = 1;
              break;
            case 5:
              // join
              t2 = new A.UnmodifiableListView(t2, t3);
              if (!t2.any$1(t2, new A._EvaluateVisitor__visitDynamicImport__closure12())) {
                t2 = new A.UnmodifiableListView(stylesheet._stylesheet1$_forwards, type$.UnmodifiableListView_ForwardRule_2);
                loadsUserDefinedModules = t2.any$1(t2, new A._EvaluateVisitor__visitDynamicImport__closure13());
              } else
                loadsUserDefinedModules = true;
              children = A._Cell$();
              t2 = t1._async_evaluate0$_environment;
              t3 = type$.String;
              t4 = type$.Module_AsyncCallable_2;
              t5 = type$.AstNode_2;
              t6 = A._setArrayType([], type$.JSArray_Module_AsyncCallable_2);
              t7 = t2._async_environment0$_variables;
              t7 = A._setArrayType(t7.slice(0), A._arrayInstanceType(t7));
              t8 = t2._async_environment0$_variableNodes;
              t8 = A._setArrayType(t8.slice(0), A._arrayInstanceType(t8));
              t9 = t2._async_environment0$_functions;
              t9 = A._setArrayType(t9.slice(0), A._arrayInstanceType(t9));
              t10 = t2._async_environment0$_mixins;
              t10 = A._setArrayType(t10.slice(0), A._arrayInstanceType(t10));
              environment = A.AsyncEnvironment$_0(A.LinkedHashMap_LinkedHashMap$_empty(t3, t4), A.LinkedHashMap_LinkedHashMap$_empty(t3, t5), A.LinkedHashMap_LinkedHashMap$_empty(t4, t5), t2._async_environment0$_importedModules, null, null, t6, t7, t8, t9, t10, t2._async_environment0$_content);
              $async$goto = 7;
              return A._asyncAwait(t1._async_evaluate0$_withEnvironment$1$2(environment, new A._EvaluateVisitor__visitDynamicImport__closure14(t1, result, stylesheet, loadsUserDefinedModules, environment, children), type$.Null), $async$call$0);
            case 7:
              // returning from await.
              module = environment.toDummyModule$0();
              t1._async_evaluate0$_environment.importForwards$1(module);
              $async$goto = loadsUserDefinedModules ? 8 : 9;
              break;
            case 8:
              // then
              $async$goto = module.transitivelyContainsCss ? 10 : 11;
              break;
            case 10:
              // then
              $async$goto = 12;
              return A._asyncAwait(t1._async_evaluate0$_combineCss$2$clone(module, module.transitivelyContainsExtensions).accept$1(t1), $async$call$0);
            case 12:
              // returning from await.
            case 11:
              // join
              visitor = new A._ImportedCssVisitor2(t1);
              for (t2 = J.get$iterator$ax(children._readLocal$0()); t2.moveNext$0();)
                t2.get$current(t2).accept$1(visitor);
            case 9:
              // join
              t1._async_evaluate0$_activeModules.remove$1(0, url);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 34
  };
  A._EvaluateVisitor__visitDynamicImport__closure11.prototype = {
    call$1(previousLoad) {
      return this.$this._async_evaluate0$_multiSpanException$3("This file is already being loaded.", "new load", A.LinkedHashMap_LinkedHashMap$_literal([previousLoad.get$span(previousLoad), "original load"], type$.FileSpan, type$.String));
    },
    $signature: 93
  };
  A._EvaluateVisitor__visitDynamicImport__closure12.prototype = {
    call$1(rule) {
      return rule.url.get$scheme() !== "sass";
    },
    $signature: 178
  };
  A._EvaluateVisitor__visitDynamicImport__closure13.prototype = {
    call$1(rule) {
      return rule.url.get$scheme() !== "sass";
    },
    $signature: 179
  };
  A._EvaluateVisitor__visitDynamicImport__closure14.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t7, t8, t9, t1, oldImporter, t2, t3, t4, t5, oldOutOfOrderImports, oldConfiguration, oldInDependency, t6;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              oldImporter = t1._async_evaluate0$_importer;
              t2 = t1._async_evaluate0$_assertInModule$2(t1._async_evaluate0$__stylesheet, "_stylesheet");
              t3 = t1._async_evaluate0$_assertInModule$2(t1._async_evaluate0$__root, "_root");
              t4 = t1._async_evaluate0$_assertInModule$2(t1._async_evaluate0$__parent, "__parent");
              t5 = t1._async_evaluate0$_assertInModule$2(t1._async_evaluate0$__endOfImports, "_endOfImports");
              oldOutOfOrderImports = t1._async_evaluate0$_outOfOrderImports;
              oldConfiguration = t1._async_evaluate0$_configuration;
              oldInDependency = t1._async_evaluate0$_inDependency;
              t6 = $async$self.result;
              t1._async_evaluate0$_importer = t6.importer;
              t7 = t1._async_evaluate0$__stylesheet = $async$self.stylesheet;
              t8 = $async$self.loadsUserDefinedModules;
              if (t8) {
                t9 = A.ModifiableCssStylesheet$0(t7.span);
                t1._async_evaluate0$__root = t9;
                t1._async_evaluate0$__parent = t1._async_evaluate0$_assertInModule$2(t9, "_root");
                t1._async_evaluate0$__endOfImports = 0;
                t1._async_evaluate0$_outOfOrderImports = null;
              }
              t1._async_evaluate0$_inDependency = t6.isDependency;
              t6 = new A.UnmodifiableListView(t7._stylesheet1$_forwards, type$.UnmodifiableListView_ForwardRule_2);
              if (!t6.get$isEmpty(t6))
                t1._async_evaluate0$_configuration = $async$self.environment.toImplicitConfiguration$0();
              $async$goto = 2;
              return A._asyncAwait(t1.visitStylesheet$1(t7), $async$call$0);
            case 2:
              // returning from await.
              t6 = t8 ? t1._async_evaluate0$_addOutOfOrderImports$0() : A._setArrayType([], type$.JSArray_ModifiableCssNode_2);
              $async$self.children._value = t6;
              t1._async_evaluate0$_importer = oldImporter;
              t1._async_evaluate0$__stylesheet = t2;
              if (t8) {
                t1._async_evaluate0$__root = t3;
                t1._async_evaluate0$__parent = t4;
                t1._async_evaluate0$__endOfImports = t5;
                t1._async_evaluate0$_outOfOrderImports = oldOutOfOrderImports;
              }
              t1._async_evaluate0$_configuration = oldConfiguration;
              t1._async_evaluate0$_inDependency = oldInDependency;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitIncludeRule_closure11.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate0$_environment.getMixin$2$namespace(t1.name, t1.namespace);
    },
    $signature: 115
  };
  A._EvaluateVisitor_visitIncludeRule_closure12.prototype = {
    call$0() {
      return this.node.get$spanWithoutContent();
    },
    $signature: 30
  };
  A._EvaluateVisitor_visitIncludeRule_closure14.prototype = {
    call$1($content) {
      var t1 = this.$this;
      return new A.UserDefinedCallable0($content, t1._async_evaluate0$_environment.closure$0(), t1._async_evaluate0$_inDependency, type$.UserDefinedCallable_AsyncEnvironment_2);
    },
    $signature: 337
  };
  A._EvaluateVisitor_visitIncludeRule_closure13.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 2;
              return A._asyncAwait(t1._async_evaluate0$_environment.withContent$2($async$self.contentCallable, new A._EvaluateVisitor_visitIncludeRule__closure2(t1, $async$self.mixin, $async$self.nodeWithSpan)), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitIncludeRule__closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 2;
              return A._asyncAwait(t1._async_evaluate0$_environment.asMixin$1(new A._EvaluateVisitor_visitIncludeRule___closure2(t1, $async$self.mixin, $async$self.nodeWithSpan)), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 34
  };
  A._EvaluateVisitor_visitIncludeRule___closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, t4, t5, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.mixin.declaration.children, t2 = t1.length, t3 = $async$self.$this, t4 = $async$self.nodeWithSpan, t5 = type$.nullable_Value_2, _i = 0;
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait(t3._async_evaluate0$_addErrorSpan$1$2(t4, new A._EvaluateVisitor_visitIncludeRule____closure2(t3, t1[_i]), t5), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 34
  };
  A._EvaluateVisitor_visitIncludeRule____closure2.prototype = {
    call$0() {
      return this.statement.accept$1(this.$this);
    },
    $signature: 64
  };
  A._EvaluateVisitor_visitMediaRule_closure8.prototype = {
    call$1(mediaQueries) {
      return this.$this._async_evaluate0$_mergeMediaQueries$2(mediaQueries, this.queries);
    },
    $signature: 80
  };
  A._EvaluateVisitor_visitMediaRule_closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.mergedQueries;
              if (t2 == null)
                t2 = $async$self.queries;
              $async$goto = 2;
              return A._asyncAwait(t1._async_evaluate0$_withMediaQueries$1$2(t2, new A._EvaluateVisitor_visitMediaRule__closure2(t1, $async$self.node), type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitMediaRule__closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t2, t3, _i, t1, styleRule;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate0$_atRootExcludingStyleRule ? null : t1._async_evaluate0$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null ? 2 : 4;
              break;
            case 2:
              // then
              t2 = $async$self.node.children, t3 = t2.length, _i = 0;
            case 5:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              $async$goto = 8;
              return A._asyncAwait(t2[_i].accept$1(t1), $async$call$0);
            case 8:
              // returning from await.
            case 6:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 5;
              break;
            case 7:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 9;
              return A._asyncAwait(t1._async_evaluate0$_withParent$2$3$scopeWhen(A.ModifiableCssStyleRule$0(styleRule.selector, styleRule.span, styleRule.originalSelector), new A._EvaluateVisitor_visitMediaRule___closure2(t1, $async$self.node), false, type$.ModifiableCssStyleRule_2, type$.Null), $async$call$0);
            case 9:
              // returning from await.
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitMediaRule___closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node.children, t2 = t1.length, t3 = $async$self.$this, _i = 0;
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitMediaRule_closure10.prototype = {
    call$1(node) {
      var t1;
      if (!type$.CssStyleRule_2._is(node))
        t1 = this.mergedQueries != null && type$.CssMediaRule_2._is(node);
      else
        t1 = true;
      return t1;
    },
    $signature: 7
  };
  A._EvaluateVisitor__visitMediaQueries_closure2.prototype = {
    call$0() {
      var t1 = A.SpanScanner$(this.resolved, null);
      return new A.MediaQueryParser0(t1, this.$this._async_evaluate0$_logger).parse$0();
    },
    $signature: 113
  };
  A._EvaluateVisitor_visitStyleRule_closure20.prototype = {
    call$0() {
      var t1 = this.selectorText;
      return A.KeyframeSelectorParser$0(t1.get$value(t1), this.$this._async_evaluate0$_logger).parse$0();
    },
    $signature: 46
  };
  A._EvaluateVisitor_visitStyleRule_closure21.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node.children, t2 = t1.length, t3 = $async$self.$this, _i = 0;
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitStyleRule_closure22.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 7
  };
  A._EvaluateVisitor_visitStyleRule_closure23.prototype = {
    call$0() {
      var _s11_ = "_stylesheet",
        t1 = this.selectorText,
        t2 = this.$this;
      return A.SelectorList_SelectorList$parse0(t1.get$value(t1), !t2._async_evaluate0$_assertInModule$2(t2._async_evaluate0$__stylesheet, _s11_).plainCss, !t2._async_evaluate0$_assertInModule$2(t2._async_evaluate0$__stylesheet, _s11_).plainCss, t2._async_evaluate0$_logger);
    },
    $signature: 45
  };
  A._EvaluateVisitor_visitStyleRule_closure24.prototype = {
    call$0() {
      var t1 = this._box_0.parsedSelector,
        t2 = this.$this,
        t3 = t2._async_evaluate0$_styleRuleIgnoringAtRoot;
      t3 = t3 == null ? null : t3.originalSelector;
      return t1.resolveParentSelectors$2$implicitParent(t3, !t2._async_evaluate0$_atRootExcludingStyleRule);
    },
    $signature: 45
  };
  A._EvaluateVisitor_visitStyleRule_closure25.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 2;
              return A._asyncAwait(t1._async_evaluate0$_withStyleRule$1$2($async$self.rule, new A._EvaluateVisitor_visitStyleRule__closure2(t1, $async$self.node), type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitStyleRule__closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node.children, t2 = t1.length, t3 = $async$self.$this, _i = 0;
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitStyleRule_closure26.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 7
  };
  A._EvaluateVisitor_visitSupportsRule_closure5.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t2, t3, _i, t1, styleRule;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              styleRule = t1._async_evaluate0$_atRootExcludingStyleRule ? null : t1._async_evaluate0$_styleRuleIgnoringAtRoot;
              $async$goto = styleRule == null ? 2 : 4;
              break;
            case 2:
              // then
              t2 = $async$self.node.children, t3 = t2.length, _i = 0;
            case 5:
              // for condition
              if (!(_i < t3)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              $async$goto = 8;
              return A._asyncAwait(t2[_i].accept$1(t1), $async$call$0);
            case 8:
              // returning from await.
            case 6:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 5;
              break;
            case 7:
              // after for
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$goto = 9;
              return A._asyncAwait(t1._async_evaluate0$_withParent$2$2(A.ModifiableCssStyleRule$0(styleRule.selector, styleRule.span, styleRule.originalSelector), new A._EvaluateVisitor_visitSupportsRule__closure2(t1, $async$self.node), type$.ModifiableCssStyleRule_2, type$.Null), $async$call$0);
            case 9:
              // returning from await.
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitSupportsRule__closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node.children, t2 = t1.length, t3 = $async$self.$this, _i = 0;
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait(t1[_i].accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._EvaluateVisitor_visitSupportsRule_closure6.prototype = {
    call$1(node) {
      return type$.CssStyleRule_2._is(node);
    },
    $signature: 7
  };
  A._EvaluateVisitor_visitVariableDeclaration_closure8.prototype = {
    call$0() {
      var t1 = this.override;
      this.$this._async_evaluate0$_environment.setVariable$4$global(this.node.name, t1.value, t1.assignmentNode, true);
    },
    $signature: 1
  };
  A._EvaluateVisitor_visitVariableDeclaration_closure9.prototype = {
    call$0() {
      var t1 = this.node;
      return this.$this._async_evaluate0$_environment.getVariable$2$namespace(t1.name, t1.namespace);
    },
    $signature: 39
  };
  A._EvaluateVisitor_visitVariableDeclaration_closure10.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1._async_evaluate0$_environment.setVariable$5$global$namespace(t2.name, this.value, t1._async_evaluate0$_expressionNode$1(t2.expression), t2.isGlobal, t2.namespace);
    },
    $signature: 1
  };
  A._EvaluateVisitor_visitUseRule_closure2.prototype = {
    call$1(module) {
      var t1 = this.node;
      this.$this._async_evaluate0$_environment.addModule$3$namespace(module, t1, t1.namespace);
    },
    $signature: 112
  };
  A._EvaluateVisitor_visitWarnRule_closure2.prototype = {
    call$0() {
      return this.node.expression.accept$1(this.$this);
    },
    $signature: 65
  };
  A._EvaluateVisitor_visitWhileRule_closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value_2),
        $async$returnValue, $async$self = this, t1, t2, t3, result;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.node, t2 = t1.condition, t3 = $async$self.$this, t1 = t1.children;
            case 3:
              // for condition
              $async$goto = 5;
              return A._asyncAwait(t2.accept$1(t3), $async$call$0);
            case 5:
              // returning from await.
              if (!$async$result.get$isTruthy()) {
                // goto after for
                $async$goto = 4;
                break;
              }
              $async$goto = 6;
              return A._asyncAwait(t3._async_evaluate0$_handleReturn$2(t1, new A._EvaluateVisitor_visitWhileRule__closure2(t3)), $async$call$0);
            case 6:
              // returning from await.
              result = $async$result;
              if (result != null) {
                $async$returnValue = result;
                // goto return
                $async$goto = 1;
                break;
              }
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
  