g[key] = o.literalArr(refs);\n          }\n        });\n      }\n\n      // translation requires post processing in 2 cases:\n      // - if we have placeholders with multiple values (ex. `START_DIV`: [�#1�, �#2�, ...])\n      // - if we have multiple ICUs that refer to the same placeholder name\n      const needsPostprocessing =\n          Array.from(placeholders.values()).some((value: string[]) => value.length > 1) ||\n          Object.keys(icuMapping).length;\n\n      let transformFn;\n      if (needsPostprocessing) {\n        transformFn = (raw: o.ReadVarExpr) => {\n          const args: o.Expression[] = [raw];\n          if (Object.keys(icuMapping).length) {\n            args.push(mapLiteral(icuMapping, true));\n          }\n          return invokeInstruction(null, R3.i18nPostprocess, args);\n        };\n      }\n      this.i18nTranslate(meta as i18n.Message, params, context.ref, transformFn);\n    }\n  }\n\n  private i18nStart(span: ParseSourceSpan|null = null, meta: i18n.I18nMeta, selfClosing?: boolean):\n      void {\n    const index = this.allocateDataSlot();\n    this.i18n = this.i18nContext ?\n        this.i18nContext.forkChildContext(index, this.templateIndex!, meta) :\n        new I18nContext(index, this.i18nGenerateMainBlockVar(), 0, this.templateIndex, meta);\n\n    // generate i18nStart instruction\n    const {id, ref} = this.i18n;\n    const params: o.Expression[] = [o.literal(index), this.addToConsts(ref)];\n    if (id > 0) {\n      // do not push 3rd argument (sub-block id)\n      // into i18nStart call for top level i18n context\n      params.push(o.literal(id));\n    }\n    this.creationInstruction(span, selfClosing ? R3.i18n : R3.i18nStart, params);\n  }\n\n  private i18nEnd(span: ParseSourceSpan|null = null, selfClosing?: boolean): void {\n    if (!this.i18n) {\n      throw new Error('i18nEnd is executed with no i18n context present');\n    }\n\n    if (this.i18nContext) {\n      this.i18nContext.reconcileChildContext(this.i18n);\n      this.i18nUpdateRef(this.i18nContext);\n    } else {\n      this.i18nUpdateRef(this.i18n);\n    }\n\n    // setup accumulated bindings\n    const {index, bindings} = this.i18n;\n    if (bindings.size) {\n      for (const binding of bindings) {\n        // for i18n block, advance to the most recent element index (by taking the current number of\n        // elements and subtracting one) before