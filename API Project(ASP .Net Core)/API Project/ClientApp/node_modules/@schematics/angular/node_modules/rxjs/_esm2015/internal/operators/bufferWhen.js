 };
        exports.encodedMap = (map) => {
            const decoded = exports.decodedMap(map);
            return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
        };
        exports.allMappings = (map) => {
            const out = [];
            const { _mappings: mappings, _sources: sources, _names: names } = map;
            for (let i = 0; i < mappings.length; i++) {
                const line = mappings[i];
                for (let j = 0; j < line.length; j++) {
                    const seg = line[j];
                    const generated = { line: i + 1, column: seg[0] };
                    let source = undefined;
                    let original = undefined;
                    let name = undefined;
                    if (seg.length !== 1) {
                        source = sources.array[seg[1]];
                        original = { line: seg[2] + 1, column: seg[3] };
                        if (seg.length === 5)
                            name = names.array[seg[4]];
                    }
                    out.push({ generated, source, original, name });
                }
            }
            return out;
        };
    })();
    function getLine(mappings, index) {
        for (let i = mappings.length; i <= index; i++) {
            mappings[i] = [];
        }
        return mappings[index];
    }
    function getColumnIndex(line, column, seg) {
        let index = line.length;
        for (let i = index - 1; i >= 0; i--, index--) {
            const current = line[i];
            const col = current[0];
            if (col > column)
                continue;
            if (col < column)
                break;
            const cmp = compare(current, seg);
            if (cmp === 0)
                return index;
            if (cmp < 0)
                break;
        }
        return index;
    }
    function compare(a, b) {
        let cmp = compareNum(a.length, b.length);
        if (cmp !== 0)
            return cmp;
        // We've already checked genColumn
        if (a.length === 1)
            return 0;
        cmp = compareNum(a[1], b[1]);
        if (cmp !== 0)
            return cmp;
        cmp = compareNum(a[2],