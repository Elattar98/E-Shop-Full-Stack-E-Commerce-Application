d","rxjs","__extends","d","b","__","constructor","TypeError","String","extendStatics","prototype","Object","create","__rest","s","e","t","p","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","rejected","result","done","then","apply","__generator","body","verb","n","v","op","f","_","y","label","ops","pop","trys","push","sent","g","Symbol","iterator","__values","o","m","__read","r","ar","error","__spreadArray","to","from","pack","arguments","l","Array","slice","concat","__await","__asyncGenerator","a","q","resume","fulfill","settle","shift","asyncIterator","__asyncValues","isFunction","createErrorClass","createImpl","ctorFunc","_super","instance","Error","stack","arrRemove","arr","item","index","splice","isSubscription","Subscription","remove","add","unsubscribe","reportUnhandledError","err","timeoutProvider","setTimeout","onUnhandledError","config","noop","createNotification","kind","errorContext","cb","useDeprecatedSynchronousErrorHandling","isRoot","context","errorThrown","_a","handleUnhandledError","handleStoppedNotification","notification","subscriber","onStoppedNotification","identity","x","pipe","fns","_i","pipeFromArray","piped","input","reduce","prev","fn","getPromiseCtor","promiseCtor","isSubscriber","complete","operate","init","source","lift","liftedSource","createOperatorSubscriber","destination","onNext","onComplete","onError","onFinalize","OperatorSubscriber","refCount","connection","_refCount","refCounter","undefined","sharedConnection","_connection","conn","subscribe","closed","connect","animationFramesFactory","timestampProvider","schedule","animationFrameProvider","Observable","subscription","provider","performanceTimestampProvider","start","now","run","timestamp","elapsed","findAndClearHandle","handle","activeHandles","emptyScheduled","scheduler","isScheduler","popResultSelector","args","popScheduler","isAsyncIterable","obj","createInvalidObservableTypeError","isIterable","readableStreamLikeToAsyncGenerator","readableStream","readableStreamLikeToAsyncGenerator_1","reader","_b","getReader","read","releaseLock","innerFrom","observable","fromInteropObservable","isArrayLike","fromArrayLike","fromPromise","fromAsyncIterable","fromIterable","obs","array","promise","iterable","e_1","iterable_1","iterable_1_1","e_1_1","return","asyncIterable","process","catch","asyncIterable_1","asyncIterable_1_1","e_2","e_2_1","executeSchedule","parentSubscription","work","delay","repeat","scheduleSubscription","observeOn","subscribeOn","scheduleArray","scheduleIterable","iterator$$1","scheduleAsyncIterable","scheduled","of","throwError","errorOrErrorFactory","errorFactory","observeNotification","observer","_c","isValidDate","Date","isNaN","timeout","schedulerArg","first","each","with","_with","timeoutErrorFactory","asyncScheduler","_d","meta","originalSourceSubscription","timerSubscription","lastValue","seen","startTimer","info","TimeoutError","map","project","mapOneOrManyArgs","isArray","bindCallbackInternals","isNodeStyle","callbackFunc","resultSelector","_this","subject","AsyncSubject","uninitialized","subs","isAsync_1","isComplete_1","results","argsArgArrayOrObject","first_1","isArray$1","keys","getPrototypeOf","objectProto","getKeys","key","createObject","values","combineLatest","observables","combineLatestInit","valueTransform","maybeSchedule","active","remainingFirstValues","_loop_1","hasFirstValue","execute","mergeInternals","concurrent","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","isComplete","outerNext","doInnerSub","innerComplete","innerValue","bufferedValue","mergeMap","Infinity","ii","mergeAll","concatAll","defer","observableFactory","fromEvent","target","eventName","options","isEventTarget","eventTargetMethods","methodName","handler","isNodeStyleEventEmitter","nodeEventEmitterMethods","toCommonHandlerRegistry","isJQueryStyleEventEmitter","jqueryMethods","subTarget","addListener","removeListener","on","off","addEventListener","removeEventListener","fromEventPattern","addHandler","removeHandler","retValue","timer","dueTime","intervalOrScheduler","async","intervalDuration","due","interval","period","argsOrArgArray","isArray$2","onErrorResumeNext","sources","nextSources","remaining","subscribeNext","nextSource","innerSub","not","pred","filter","predicate","raceInit","subscriptions","zip","buffers","completed","sourceIndex","every","some","EMPTY","audit","durationSelector","hasValue","durationSubscriber","endDuration","cleanupDuration","auditTime","duration","closingNotifier","currentBuffer","bufferCount","bufferSize","startBufferEvery","count","toEmit","buffers_1","buffers_1_1","toEmit_1","toEmit_1_1","e_3","buffers_2","buffers_2_1","e_3_1","bufferTime","bufferTimeSpan","otherArgs","bufferCreationInterval","maxBufferSize","bufferRecords","restartOnEmit","emit","record","startBuffer","record_1","bufferTimeSubscriber","recordsCopy","recordsCopy_1","recordsCopy_1_1","bufferToggle","openings","closingSelector","openValue","closingSubscription","emitBuffer","bufferWhen","closingSubscriber","openBuffer","catchError","selector","syncUnsub","handledResult","scanInternals","accumulator","seed","hasSeed","emitOnNext","emitBeforeComplete","hasState","state","toArray","arrReducer","joinAllInternals","joinFn","combineLatestAll","combineLatest$1","combineLatestWith","otherSources","concatMap","concatMapTo","innerObservable","concat$1","concatWith","fromSubscribable","subscribable","DEFAULT_CONFIG$1","connector","total","debounce","debounceTime","emitWhenIdle","targetTime","lastTime","activeTask","defaultIfEmpty","defaultValue","take","ignoreElements","mapTo","delayWhen","delayDurationSelector","subscriptionDelay","dematerialize","distinct","keySelector","flushes","distinctKeys","Set","has","clear","distinctUntilChanged","comparator","defaultCompare","previousKey","currentKey","distinctUntilKeyChanged","compare","throwIfEmpty","defaultErrorFactory","EmptyError","elementAt","ArgumentOutOfRangeError","hasDefaultValue","endWith","exhaustMap","outerValue","exhaustAll","finalize","callback","find","createFind","findIndex","groupBy","elementOrOptions","createGroupedObservable","groupSubject","groupSubscriber","activeGroups","teardownAttempted","groupBySourceSubscriber","element","groups","Map","notify","forEach","handleError","consumer","key_1","group_1","get","set","Subject","grouped","durationSubscriber_1","delete","isEmpty","takeLast","buffer_1","buffer_1_1","last$1","materialize","Notification","createNext","createComplete","createError","max","comparer","mergeMapTo","mergeScan","merge$1","mergeWith","min","multicast","subjectOrSubjectFactory","subjectFactory","ConnectableObservable","pairwise","hasPrev","pluck","properties","currentProp","publish","publishBehavior","initialValue","BehaviorSubject","publishLast","publishReplay","windowTime","selectorOrScheduler","ReplaySubject","raceWith","countOrConfig","soFar","sourceSub","resubscribe","notifier","notifierSubscriber_1","subscribeToSource","repeatWhen","syncResub","completions$","isNotifierComplete","isMainComplete","getCompletionSubject","subscribeForRepeatWhen","retry","configOrCount","resetOnSuccess","subscribeForRetry","resub_1","retryWhen","errors$","subscribeForRetryWhen","sample","sampleTime","scan","sequenceEqual","compareTo","aState","bState","createSubscriber","selfState","otherState","sequenceEqualSubscriber","isEqual","share","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","resetConnection","hasCompleted","hasErrored","cancelReset","reset","resetAndUnsubscribe","dest","handleReset","SafeSubscriber","onSubscriber","shareReplay","configOrBufferSize","single","singleValue","seenValue","SequenceError","NotFoundError","skip","skipLast","skipCount","ring","valueIndex","oldValue","skipUntil","taking","skipSubscriber","skipWhile","startWith","switchMap","innerSubscriber","innerIndex","outerIndex","switchAll","switchMapTo","switchScan","takeUntil","takeWhile","inclusive","tap","observerOrNext","tapObserver","isUnsub","throttle","defaultThrottleConfig","leading","trailing","sendValue","throttled","endThrottling","send","cleanupThrottling","throttleTime","duration$","timeInterval","last","TimeInterval","timeoutWith","withObservable","dateTimestampProvider","window","windowBoundaries","windowSubject","asObservable","errorHandler","windowCount","windowSize","startWindowEvery","startEvery","windows","windows_1","windows_1_1","c","window_2","windowTimeSpan","windowCreationInterval","maxWindowSize","windowRecords","restartOnClose","closeWindow","startWindow","window_1","terminate","windowToggle","windowsCopy","windowsCopy_1","windowsCopy_1_1","windowWhen","openWindow","withLatestFrom","inputs","len","otherValues","ready","zipAll","zip$1","zipWith","otherInputs","applyMixins","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","getXHRResponse","xhr","responseType","response","JSON","parse","responseText","responseXML","ajaxGet","url","headers","ajax","method","ajaxPost","ajaxDelete","ajaxPut","ajaxPatch","ajaxGetJSON","mapResponse","fromAjax","__assign","crossDomain","withCredentials","queryParams","configuredBody","configuredHeaders","searchParams_1","includes","parts","split","URLSearchParams","toLowerCase","xsrfCookieName","xsrfHeaderName","xsrfCookie","document","cookie","match","RegExp","extractContentTypeAndMaybeSerializeBody","_request","createXHR","XMLHttpRequest","progressSubscriber_1","progressSubscriber","includeDownloadProgress","includeUploadProgress","addErrorEvent","type","AjaxTimeoutError","AjaxError","addProgressEvent_1","direction","event","AjaxResponse","LOADSTART","PROGRESS","LOAD","upload","UPLOAD","DOWNLOAD","emitError_1","status","user","open","password","setRequestHeader","readyState","abort","FormData","toStringCheck","ReadableStream","ArrayBuffer","isView","stringify","name","_toString","setPrototypeOf","__proto__","assign","UnsubscriptionError","UnsubscriptionErrorImpl","errors","message","toString","join","initialTeardown","_finalizers","_parentage","Subscription.prototype.unsubscribe","_parentage_1","_parentage_1_1","initialFinalizer","_finalizers_1","_finalizers_1_1","finalizer","Subscription.prototype.add","teardown","_hasParent","_addParent","Subscription.prototype._hasParent","parent","Subscription.prototype._addParent","_removeParent","Subscription.prototype._removeParent","Subscription.prototype.remove","empty","EMPTY_SUBSCRIPTION","useDeprecatedNextContext","delegate","clearTimeout","COMPLETE_NOTIFICATION","Subscriber","isStopped","EMPTY_OBSERVER","Subscriber.create","Subscriber.prototype.next","_next","Subscriber.prototype.error","_error","Subscriber.prototype.complete","_complete","Subscriber.prototype.unsubscribe","Subscriber.prototype._next","Subscriber.prototype._error","Subscriber.prototype._complete","_bind","Function","bind","ConsumerObserver","partialObserver","ConsumerObserver.prototype.next","ConsumerObserver.prototype.error","ConsumerObserver.prototype.complete","context_1","context_1.unsubscribe","defaultErrorHandler","_subscribe","Observable.prototype.lift","operator","observable$$1","Observable.prototype.subscribe","_trySubscribe","Observable.prototype._trySubscribe","sink","Observable.prototype.forEach","Observable.prototype._subscribe","Observable.prototype.pipe","operations","toPromise","Observable.prototype.toPromise","Observable.create","shouldUnsubscribe","OperatorSubscriber.prototype.unsubscribe","closed_1","_subject","ConnectableObservable.prototype._subscribe","getSubject","ConnectableObservable.prototype.getSubject","_teardown","ConnectableObservable.prototype._teardown","ConnectableObservable.prototype.connect","subject_1","ConnectableObservable.prototype.refCount","performance","request","requestAnimationFrame","cancel","cancelAnimationFrame","DEFAULT_ANIMATION_FRAMES","ObjectUnsubscribedError","ObjectUnsubscribedErrorImpl","currentObservers","observers","hasError","thrownError","Subject.prototype.lift","AnonymousSubject","_throwIfClosed","Subject.prototype._throwIfClosed","Subject.prototype.next","Subject.prototype.error","Subject.prototype.complete","Subject.prototype.unsubscribe","defineProperty","enumerable","configurable","Subject.prototype._trySubscribe","Subject.prototype._subscribe","_checkFinalizedStatuses","_innerSubscribe","Subject.prototype._innerSubscribe","Subject.prototype._checkFinalizedStatuses","Subject.prototype.asObservable","Subject.create","AnonymousSubject.prototype.next","AnonymousSubject.prototype.error","AnonymousSubject.prototype.complete","AnonymousSubject.prototype._subscribe","_value","getValue","BehaviorSubject.prototype._subscribe","BehaviorSubject.prototype.getValue","BehaviorSubject.prototype.next","_bufferSize","_windowTime","_timestampProvider","_buffer","_infiniteTimeWindow","Math","ReplaySubject.prototype.next","_trimBuffer","ReplaySubject.prototype._subscribe","copy","ReplaySubject.prototype._trimBuffer","adjustedBufferSize","_hasValue","_isComplete","AsyncSubject.prototype._checkFinalizedStatuses","AsyncSubject.prototype.next","AsyncSubject.prototype.complete","intervalProvider","setInterval","clearInterval","AsyncAction","pending","AsyncAction.prototype.schedule","id","recycleAsyncId","requestAsyncId","AsyncAction.prototype.requestAsyncId","_id","flush","AsyncAction.prototype.recycleAsyncId","_scheduler","AsyncAction.prototype.execute","_execute","AsyncAction.prototype._execute","_delay","errored","errorValue","AsyncAction.prototype.unsubscribe","actions","Action","Action.prototype.schedule","nextHandle","resolved","setImmediate","clearImmediate","immediateProvider","AsapAction","AsapAction.prototype.requestAsyncId","_scheduled","AsapAction.prototype.recycleAsyncId","action","Scheduler","schedulerActionCtor","Scheduler.prototype.schedule","AsyncScheduler","SchedulerAction","_active","AsyncScheduler.prototype.flush","asapScheduler","AsapScheduler","AsapScheduler.prototype.flush","flushId","QueueAction","QueueAction.prototype.schedule","QueueAction.prototype.execute","QueueAction.prototype.requestAsyncId","queueScheduler","QueueScheduler","AnimationFrameAction","AnimationFrameAction.prototype.requestAsyncId","AnimationFrameAction.prototype.recycleAsyncId","animationFrameScheduler","AnimationFrameScheduler","AnimationFrameScheduler.prototype.flush","VirtualTimeScheduler","maxFrames","VirtualAction","frame","VirtualTimeScheduler.prototype.flush","frameTimeFactor","VirtualAction.prototype.schedule","Number","isFinite","VirtualAction.prototype.requestAsyncId","sort","sortActions","VirtualAction.prototype.recycleAsyncId","VirtualAction.prototype._execute","VirtualAction.sortActions","NotificationKind","observe","Notification.prototype.observe","do","Notification.prototype.do","nextHandler","completeHandler","accept","Notification.prototype.accept","nextOrObserver","toObservable","Notification.prototype.toObservable","Notification.createNext","Notification.createError","Notification.createComplete","completeNotification","EmptyErrorImpl","ArgumentOutOfRangeErrorImpl","NotFoundErrorImpl","SequenceErrorImpl","TimeoutErrorImpl","DEFAULT_CONFIG","resetOnDisconnect","NEVER","_operators","freeze","combineAll","exhaust","merge","flatMap","partition","partition$1","race","race$1","SubscriptionLog","subscribedFrame","unsubscribedFrame","SubscriptionLoggable","logSubscribedFrame","SubscriptionLoggable.prototype.logSubscribedFrame","logUnsubscribedFrame","SubscriptionLoggable.prototype.logUnsubscribedFrame","subscriptionLogs","oldSubscriptionLog","ColdObservable","messages","scheduleMessages","ColdObservable.prototype.scheduleMessages","messagesLength","HotObservable","HotObservable.prototype._subscribe","setup","HotObservable.prototype.setup","TestScheduler","assertDeepEqual","defaultMaxFrame","hotObservables","coldObservables","flushTests","runMode","createTime","TestScheduler.prototype.createTime","marbles","trim","createColdObservable","TestScheduler.prototype.createColdObservable","parseMarbles","cold","createHotObservable","TestScheduler.prototype.createHotObservable","materializeInnerObservable","TestScheduler.prototype.materializeInnerObservable","outerFrame","expectObservable","TestScheduler.prototype.expectObservable","subscriptionMarbles","actual","flushTest","subscriptionParsed","parseMarblesAsSubscriptions","subscriptionFrame","unsubscriptionFrame","toBe","expected","toEqual","other","expectSubscriptions","TestScheduler.prototype.expectSubscriptions","actualSubscriptionLogs","marblesOrMarblesArray","marblesArray","TestScheduler.prototype.flush","test","TestScheduler.parseMarblesAsSubscriptions","characters","groupStart","nextFrame","advanceFrameBy","parseFloat","durationInMs","unit","this_1","out_i_1","TestScheduler.parseMarbles","materializeInnerObservables","testMessages","subIndex","replace","_loop_2","this_2","out_i_2","createAnimator","TestScheduler.prototype.createAnimator","lastHandle","animate","messages_1","messages_1_1","callbacks","callbacks_1","callbacks_1_1","createDelegates","TestScheduler.prototype.createDelegates","scheduleLookup","scheduledRecordsDue","scheduledRecords","dueImmediates","dueIntervals","firstDueInterval","dueTimeouts","immediate","TestScheduler.prototype.run","prevFrameTimeFactor","prevMaxFrames","animator","delegates","helpers","hot","time","ret","_testing","originalEvent","responseHeaders","allHeaders","getAllResponseHeaders","line","loaded","AjaxErrorImpl","AjaxTimeoutErrorImpl","urlOrConfig","post","put","patch","getJSON","_ajax","DEFAULT_WEBSOCKET_CONFIG","deserializer","data","serializer","WebSocketSubject","urlConfigOrSource","_socket","_config","_output","WebSocketCtor","WebSocket","WebSocketSubject.prototype.lift","sock","_resetState","WebSocketSubject.prototype._resetState","multiplex","WebSocketSubject.prototype.multiplex","subMsg","unsubMsg","messageFilter","self","_connectSocket","WebSocketSubject.prototype._connectSocket","protocol","binaryType","socket","close","onopen","socket.onopen","evt","openObserver","queue","closingObserver","code","reason","WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT","onerror","socket.onerror","onclose","socket.onclose","closeObserver","wasClean","onmessage","socket.onmessage","WebSocketSubject.prototype._subscribe","WebSocketSubject.prototype.unsubscribe","_webSocket","webSocket","fetch$1","_fetch","fromFetch","initWithSelector","controller","AbortController","signal","abortable","outerSignal","aborted","outerSignalHandler_1","perSubscriberInit","fetch","operators","testing","animationFrames","asap","animationFrame","isObservable","lastValueFrom","hasConfig","firstValueFrom","bindCallback","bindNodeCallback","connectable","result.connect","forkJoin","remainingCompletions","remainingEmissions","generate","initialStateOrOptions","condition","iterate","resultSelectorOrScheduler","gen","initialState","iif","trueResult","falseResult","never","onErrorResumeNext$1","pairs","entries","range","end","using","resourceFactory","resource"]}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      /**
 * @license Angular v14.1.0
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */


import { ChangeDetectorRef } from '@angular/core';
import { DoCheck } from '@angular/core';
import { ElementRef } from '@angular/core';
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { Injector } from '@angular/core';
import { IterableDiffers } from '@angular/core';
import { KeyValueDiffers } from '@angular/core';
import { NgIterable } from '@angular/core';
import { NgModuleFactory } from '@angular/core';
import { Observable } from 'rxjs';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { PipeTransform } from '@angular/core';
import { Renderer2 } from '@angular/core';
import { SimpleChanges } from '@angular/core';
import { Subscribable } from 'rxjs';
import { SubscriptionLike } from 'rxjs';
import { TemplateRef } from '@angular/core';
import { TrackByFunction } from '@angular/core';
import { Type } from '@angular/core';
import { Version } from '@angular/core';
import { ViewContainerRef } from '@angular/core';

/**
 * A predefined [DI token](guide/glossary#di-token) for the base href
 * to be used with the `PathLocationStrategy`.
 * The base href is the URL prefix that should be preserved when generating
 * and recognizing URLs.
 *
 * @usageNotes
 *
 * The following example shows how to use this token to configure the root app injector
 * with a base href value, so that the DI framework can supply the dependency anywhere in the app.
 *
 * ```typescript
 * import {Component, NgModule} from '@angular/core';
 * import {APP_BASE_HREF} from '@angular/common';
 *
 * @NgModule({
 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
 * })
 * class AppModule {}
 * ```
 *
 * @publicApi
 */
export declare const APP_BASE_HREF: InjectionToken<string>;

/**
 * @ngModule CommonModule
 * @description
 *
 * Unwraps a value from an asynchronous primitive.
 *
 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
 * potential memory leaks. When the reference of the expression changes, the `async` pipe
 * automatically unsubscribes from the old `Observable` or `Promise` and subscribes to the new one.
 *
 * @usageNotes
 *
 * ### Examples
 *
 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
 * promise.
 *
 * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
 *
 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
 * to the view. The Observable continuously updates the view with the current time.
 *
 * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
 *
 * @publicApi
 */
export declare class AsyncPipe implements OnDestroy, PipeTransform {
    private _ref;
    private _latestValue;
    private _subscription;
    private _obj;
    private _strategy;
    constructor(ref: ChangeDetectorRef);
    ngOnDestroy(): void;
    transform<T>(obj: Observable<T> | Subscribable<T> | Promise<T>): T | null;
    transform<T>(obj: null | undefined): null;
    transform<T>(obj: Observable<T> | Subscribable<T> | Promise<T> | null | undefined): T | null;
    private _subscribe;
    private _selectStrategy;
    private _dispose;
    private _updateLatestValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<AsyncPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<AsyncPipe, "async", true>;
}

/**
 * Exports all the basic Angular directives and pipes,
 * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.
 * Re-exported by `BrowserModule`, which is included automatically in the root
 * `AppModule` when you create a new app with the CLI `new` command.
 *
 * @publicApi
 */
export declare class CommonModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<CommonModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<CommonModule, never, [typeof i1.NgClass, typeof i2.NgComponentOutlet, typeof i3.NgForOf, typeof i4.NgIf, typeof i5.NgTemplateOutlet, typeof i6.NgStyle, typeof i7.NgSwitch, typeof i7.NgSwitchCase, typeof i7.NgSwitchDefault, typeof i8.NgPlural, typeof i8.NgPluralCase, typeof i9.AsyncPipe, typeof i10.UpperCasePipe, typeof i10.LowerCasePipe, typeof i11.JsonPipe, typeof i12.SlicePipe, typeof i13.DecimalPipe, typeof i13.PercentPipe, typeof i10.TitleCasePipe, typeof i13.CurrencyPipe, typeof i14.DatePipe, typeof i15.I18nPluralPipe, typeof i16.I18nSelectPipe, typeof i17.KeyValuePipe], [typeof i1.NgClass, typeof i2.NgComponentOutlet, typeof i3.NgForOf, typeof i4.NgIf, typeof i5.NgTemplateOutlet, typeof i6.NgStyle, typeof i7.NgSwitch, typeof i7.NgSwitchCase, typeof i7.NgSwitchDefault, typeof i8.NgPlural, typeof i8.NgPluralCase, typeof i9.AsyncPipe, typeof i10.UpperCasePipe, typeof i10.LowerCasePipe, typeof i11.JsonPipe, typeof i12.SlicePipe, typeof i13.DecimalPipe, typeof i13.PercentPipe, typeof i10.TitleCasePipe, typeof i13.CurrencyPipe, typeof i14.DatePipe, typeof i15.I18nPluralPipe, typeof i16.I18nSelectPipe, typeof i17.KeyValuePipe]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<CommonModule>;
}

/**
 * @ngModule CommonModule
 * @description
 *
 * Transforms a number to a currency string, formatted according to locale rules
 * that determine group sizing and separator, decimal-point character,
 * and other locale-specific configurations.
 *
 * {@a currency-code-deprecation}
 * <div class="alert is-helpful">
 *
 * **Deprecation notice:**
 *
 * The default currency code is currently always `USD` but this is deprecated from v9.
 *
 * **In v11 the default currency co