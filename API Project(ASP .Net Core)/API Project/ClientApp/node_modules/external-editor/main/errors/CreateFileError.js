import { Observable } from '../Observable';
export interface NodeStyleEventEmitter {
    addListener(eventName: string | symbol, handler: NodeEventHandler): this;
    removeListener(eventName: string | symbol, handler: NodeEventHandler): this;
}
export declare type NodeEventHandler = (...args: any[]) => void;
export interface NodeCompatibleEventEmitter {
    addListener(eventName: string, handler: NodeEventHandler): void | {};
    removeListener(eventName: string, handler: NodeEventHandler): void | {};
}
export interface JQueryStyleEventEmitter<TContext, T> {
    on(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;
    off(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;
}
export interface EventListenerObject<E> {
    handleEvent(evt: E): void;
}
export interface HasEventTargetAddRemove<E> {
    addEventListener(type: string, listener: ((evt: E) => void) | EventListenerObject<E> | null, options?: boolean | AddEventListenerOptions): void;
    removeEventListener(type: string, listener: ((evt: E) => void) | EventListenerObject<E> | null, options?: EventListenerOptions | boolean): void;
}
export interface EventListenerOptions {
    capture?: boolean;
    passive?: boolean;
    once?: boolean;
}
export interface AddEventListenerOptions extends EventListenerOptions {
    once?: boolean;
    passive?: boolean;
}
ex