DLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEtBQUssRUFBQyxHQUFHLENBQUMsRUFBQyxDQUFDLFdBQVcsRUFBQyxTQUFTLEVBQUMsc0JBQXNCLEVBQUMsS0FBSyxDQUFDLEVBQUMsS0FBSyxFQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsS0FBSyxFQUFDLEdBQUcsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEtBQUssRUFBQyxHQUFHLENBQUMsRUFBQyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vLyBUSElTIENPREUgSVMgR0VORVJBVEVEIC0gRE8gTk9UIE1PRElGWS5cbmNvbnN0IHUgPSB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIHBsdXJhbCh2YWw6IG51bWJlcik6IG51bWJlciB7XG5jb25zdCBuID0gdmFsO1xuXG5pZiAobiA9PT0gMSlcbiAgICByZXR1cm4gMTtcbnJldHVybiA1O1xufVxuXG5leHBvcnQgZGVmYXVsdCBbXCJrbFwiLFtbXCJBTVwiLFwiUE1cIl0sdSx1XSx1LFtbXCJTXCIsXCJNXCIsXCJUXCIsXCJXXCIsXCJUXCIsXCJGXCIsXCJTXCJdLFtcInNhcFwiLFwiYXRhXCIsXCJtYXJcIixcInBpblwiLFwic2lzXCIsXCJ0YWxcIixcImFyZlwiXSxbXCJzYXBhYXRcIixcImF0YWFzaW5uZ29ybmVxXCIsXCJtYXJsdW5uZ29ybmVxXCIsXCJwaW5nYXN1bm5nb3JuZXFcIixcInNpc2FtYW5uZ29ybmVxXCIsXCJ0YWxsaW1hbm5nb3JuZXFcIixcImFyZmluaW5uZ29ybmVxXCJdLFtcInNhcFwiLFwiYXRhXCIsXCJtYXJcIixcInBpblwiLFwic2lzXCIsXCJ0YWxcIixcImFyZlwiXV0sdSxbW1wiMVwiLFwiMlwiLFwiM1wiLFwiNFwiLFwiNVwiLFwiNlwiLFwiN1wiLFwiOFwiLFwiOVwiLFwiMTBcIixcIjExXCIsXCIxMlwiXSxbXCJqYW5cIixcImZlYnJcIixcIm1hclwiLFwiYXByXCIsXCJtYWpcIixcImp1blwiLFwianVsXCIsXCJhdWdcIixcInNlcHRcIixcIm9rdFwiLFwibm92XCIsXCJkZWNcIl0sW1wiamFudWFhcmlwXCIsXCJmZWJydWFhcmlwXCIsXCJtYXJzaXBcIixcImFwcmlpbGlwXCIsXCJtYWFqaXBcIixcImp1dW5pcFwiLFwianV1bGlwXCIsXCJhZ2d1c3RpcFwiLFwic2VwdGVtYmFyaXBcIixcIm9rdG9iYXJpcFwiLFwibm92ZW1iYXJpcFwiLFwiZGVjZW1iYXJpcFwiXV0sW1tcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVc