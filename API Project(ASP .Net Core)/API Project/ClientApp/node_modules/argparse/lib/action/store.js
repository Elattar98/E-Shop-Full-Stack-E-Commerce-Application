import { MonoTypeOperatorFunction, ObservableInput } from '../types';
export interface RepeatConfig {
    /**
     * The number of times to repeat the source. Defaults to `Infinity`.
     */
    count?: number;
    /**
     * If a `number`, will delay the repeat of the source by that number of milliseconds.
     * If a function, it will provide the number of times the source has been subscribed to,
     * and the return value should be a valid observable input that will notify when the source
     * should be repeated. If the notifier observable is empty, the result will complete.
     */
    delay?: number | ((count: number) => ObservableInput<any>);
}
/**
 * Returns an Observable that will resubscribe to the source stream when the source stream completes.
 *
 * <span class="informal">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>
 *
 * ![](repeat.png)
 *
 * Repeat will output values from a source until the source completes, then it will resubscribe to the
 * source a specified number of times, with a specified delay. Repeat can be particularly useful in
 * combination with closing operators like {@link take}, {@link takeUntil}, {@link first}, or {@link takeWhile},
 * as it can be used to restart a source again from scratch.
 *
 * Repeat is very similar to {@link retry}, where