
      import {createRequire as __cjsCompatRequire} from 'module';
      const require = __cjsCompatRequire(import.meta.url);
      const __ESM_IMPORT_META_URL__ = import.meta.url;
    
import {
  ConsoleLogger,
  LogLevel
} from "../../chunk-E7NQQTT7.js";
import {
  FatalLinkerError,
  FileLinker,
  LinkerEnvironment,
  assert,
  isFatalLinkerError
} from "../../chunk-ATB3HJXN.js";
import "../../chunk-CYVTLM4Z.js";
import "../../chunk-24DFPZCS.js";
import {
  NodeJSFileSystem
} from "../../chunk-TOKOIIBI.js";
import "../../chunk-XYNRD7NE.js";

// bazel-out/k8-fastbuild/bin/packages/compiler-cli/linker/babel/src/babel_core.mjs
import * as _babelNamespace from "@babel/core";
import _babelDefault from "@babel/core";
var _a;
var babel = (_a = _babelDefault) != null ? _a : _babelNamespace;
var _typesNamespace = _babelNamespace.types;
if (_babelDefault !== void 0) {
  _typesNamespace = _babelDefault.types;
}
var types2 = _typesNamespace;
var NodePath = babel.NodePath;
var transformSync = babel.transformSync;
var parse = babel.parse;

// bazel-out/k8-fastbuild/bin/packages/compiler-cli/linker/babel/src/ast/babel_ast_factory.mjs
var BabelAstFactory = class {
  constructor(sourceUrl) {
    this.sourceUrl = sourceUrl;
    this.createArrayLiteral = types2.arrayExpression;
    this.createBlock = types2.blockStatement;
    this.createConditional = types2.conditionalExpression;
    this.createExpressionStatement = types2.expressionStatement;
    this.createIdentifier = types2.identifier;
 