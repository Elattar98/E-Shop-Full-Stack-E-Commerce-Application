scription": "Enable and define the file watching poll time period in milliseconds."
        }
      },
      "additionalProperties": false
    },
    "AngularDevkitBuildAngularBuildersExtractI18nSchema": {
      "title": "Extract i18n Target",
      "description": "Extract i18n target options for Build Facade.",
      "type": "object",
      "properties": {
        "browserTarget": {
          "type": "string",
          "description": "A browser builder target to extract i18n messages in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.",
          "pattern": "^[^:\\s]+:[^:\\s]+(:[^\\s]+)?$"
        },
        "format": {
          "type": "string",
          "description": "Output format for the generated file.",
          "default": "xlf",
          "enum": [
            "xmb",
            "xlf",
            "xlif",
            "xliff",
            "xlf2",
            "xliff2",
            "json",
            "arb",
            "legacy-migrate"
          ]
        },
        "progress": {
          "type": "boolean",
          "description": "Log progress to the console.",
          "default": true
        },
        "outputPath": {
          "type": "string",
          "description": "Path where output will be placed."
        },
        "outFile": {
          "type": "string",
          "description": "Name of the file to output."
        }
      },
      "additionalProperties": false
    },
    "AngularDevkitBuildAngularBuildersKarmaSchema": {
      "title": "Karma Target",
      "description": "Karma target options for Build Facade.",
      "type": "object",
      "properties": {
        "main": {
          "type": "string",
          "description": "The name of the main entry-point file."
        },
        "tsConfig": {
          "type": "string",
          "description": "The name of the TypeScript configuration file."
        },
        "karmaConfig": {
          "type": "string",
          "description": "The name of the Karma configuration file."
        },
        "polyfills": {
          "type": "string",
          "description": "The name of the polyfills file."
        },
        "assets": {
          "type": "array",
          "description": "List of static application assets.",
          "default": [],
          "items": {
            "$ref": "#/definitions/AngularDevkitBuildAngularBuildersKarmaSchema/definitions/assetPattern"
          }
        },
        "scripts": {
          "description": "Global scripts to be included in the build.",
          "type": "array",
          "default": [],
          "items": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "string",
                    "description": "The file to include.",
                    "pattern": "\\.[cm]?jsx?$"
                  },
                  "bundleName": {
                    "type": "string",
                    "pattern": "^[\\w\\-.]*$",
                    "description": "The bundle name for this extra entry point."
                  },
                  "inject": {
                    "type": "boolean",
                    "description": "If the bundle will be referenced in the HTML file.",
                    "default": true
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "string",
                "description": "The file to include.",
                "pattern": "\\.[cm]?jsx?$"
              }
            ]
          }
        },
        "styles": {
          "description": "Global styles to be included in the build.",
          "type": "array",
          "default": [],
          "items": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "string",
                    "description": "The file to include.",
                    "pattern": "\\.(?:css|scss|sass|less|styl)$"
                  },
                  "bundleName": {
                    "type": "string",
                    "pattern": "^[\\w\\-.]*$",
                    "description": "The bundle name for this extra entry point."
                  },
                  "inject": {
                    "type": "boolean",
                    "description": "If the bundle will be referenced in the HTML file.",
                    "default": true
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "string",
                "description": "The file to include.",
                "pattern": "\\.(?:css|scss|sass|less|styl)$"
              }
            ]
          }
        },
        "inlineStyleLanguage": {
          "description": "The stylesheet language to use for the application's inline component styles.",
          "type": "string",
          "default": "css",
          "enum": [
            "css",
            "less",
            "sass",
            "scss"
          ]
        },
        "stylePreprocessorOptions": {
          "description": "Options to pass to style preprocessors",
          "type": "object",
          "properties": {
            "includePaths": {
              "description": "Paths to include. Paths will be resolved to workspace root.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            }
          },
          "additionalProperties": false
        },
        "include": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Globs of files to include, relative to workspace or project root. \nThere are 2 special cases:\n - when a path to directory is provided, all spec files ending \".spec.@(ts|tsx)\" will be included\n - when a path to a file is provided, and a matching spec file exists it will be included instead."
        },
        "sourceMap": {
          "description": "Output source maps for scripts and styles. For more information, see https://angular.io/guide/workspace-config#source-map-configuration.",
          "default": true,
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "scripts": {
                  "type": "boolean",
                  "description": "Output source maps for all scripts.",
                  "default": true
                },
                "styles": {
                  "type": "boolean",
                  "description": "Output source maps for all styles.",
                  "default": true
                },
                "vendor": {
                  "type": "boolean",
                  "description": "Resolve vendor packages source maps.",
                  "default": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "boolean"
            }
          ]
        },
        "progress": {
          "type": "boolean",
          "description": "Log progress to the console while building.",
          "default": true
        },
        "watch": {
          "type": "boolean",
          "description": "Run build when files change."
        },
        "poll": {
          "type": "number",
          "description": "Enable and define the file watching poll time period in milliseconds."
        },
        "preserveSymlinks": {
          "type": "boolean",
          "description": "Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set."
        },
        "brows