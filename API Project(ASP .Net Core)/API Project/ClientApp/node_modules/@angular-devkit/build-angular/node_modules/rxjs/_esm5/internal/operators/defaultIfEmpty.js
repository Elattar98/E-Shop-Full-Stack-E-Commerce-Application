evaluate0$_addExceptionSpan$2(node, new A._EvaluateVisitor_visitBinaryOperationExpression_closure1(this, node));
    },
    visitValueExpression$1(node) {
      return node.value;
    },
    visitVariableExpression$1(node) {
      var result = this._evaluate0$_addExceptionSpan$2(node, new A._EvaluateVisitor_visitVariableExpression_closure1(this, node));
      if (result != null)
        return result;
      throw A.wrapException(this._evaluate0$_exception$2("Undefined variable.", node.span));
    },
    visitUnaryOperationExpression$1(node) {
      return this._evaluate0$_addExceptionSpan$2(node, new A._EvaluateVisitor_visitUnaryOperationExpression_closure1(node, node.operand.accept$1(this)));
    },
    visitBooleanExpression$1(node) {
      return node.value ? B.SassBoolean_true0 : B.SassBoolean_false0;
    },
    visitIfExpression$1(node) {
      var condition, t2, ifTrue, ifFalse, result, _this = this,
        pair = _this._evaluate0$_evaluateMacroArguments$1(node),
        positional = pair.item1,
        named = pair.item2,
        t1 = J.getInterceptor$asx(positional);
      _this._evaluate0$_verifyArguments$4(t1.get$length(positional), named, $.$get$IfExpression_declaration0(), node);
      if (t1.get$length(positional) > 0)
        condition = t1.$index(positional, 0);
      else {
        t2 = named.$index(0, "condition");
        t2.toString;
        condition = t2;
      }
      if (t1.get$length(positional) > 1)
        ifTrue = t1.$index(positional, 1);
      else {
        t2 = n