// Type definitions for ESTree AST extensions for Facebook Flow
// Project: https://github.com/estree/estree
// Definitions by: RReverser <https://github.com/RReverser>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped



declare namespace ESTree {
  interface FlowTypeAnnotation extends Node {}

  interface FlowBaseTypeAnnotation extends FlowTypeAnnotation {}

  interface FlowLiteralTypeAnnotation extends FlowTypeAnnotation, Literal {}

  interface FlowDeclaration extends Declaration {}

  interface AnyTypeAnnotation extends FlowBaseTypeAnnotation {}

  interface ArrayTypeAnnotation extends FlowTypeAnnotation {
    elementType: FlowTypeAnnotation;
  }

  interface BooleanLiteralTypeAnnotation extends FlowLiteralTypeAnnotation {}

  interface BooleanTypeAnnotation extends FlowBaseTypeAnnotation {}

  interface ClassImplements extends Node {
    id: Identifier;
    typeParameters?: TypeParameterInstantiation | null;
  }

  interface ClassProperty {
    key: Expression;
    value?: Expression | null;
    typeAnnotation?: TypeAnnotation | null;
    computed: boolean;
    static: boolean;
  }

  interface DeclareClass extends FlowDeclaration {
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    body: ObjectTypeAnnotation;
    extends: Array<InterfaceExtends>;
  }

  interface DeclareFunction extends FlowDeclaration {
    id: Identifier;
  }

  interface DeclareModule extends FlowDeclaration {
    id: Literal | Identifier;
    body: BlockStatement;
  }

  interface DeclareVariable extends FlowDeclaration {
    id: Identifier;
  }

  interface FunctionTypeAnnotation extends FlowTypeAnnotation {
    params: Array<FunctionTypeParam>;
    returnType: FlowTypeAnnotation;
    rest?: FunctionTypeParam | null;
    typeParameters?: TypeParameterDeclaration | null;
  }

  interface FunctionTypeParam {
    name: Identifier;
    typeAnnotation: FlowTypeAnnotation;
    optional: boolean;
  }

  interface GenericTypeAnnotation extends FlowTypeAnnotation {
    id: Identifier | QualifiedTypeIdentifier;
    typeParameters?: TypeParameterInstantiation | null;
  }

  interface InterfaceExtends extends Node {
    id: Identifier | QualifiedTypeIdentifier;
    typeParameters?: TypeParameterInstantiation | null;
  }

  interface InterfaceDeclaration extends FlowDeclaration {
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    extends: Array<InterfaceExtends>;
    body: ObjectTypeAnnotation;
  }

  interface IntersectionTypeAnnotation extends FlowTypeAnnotation {
    types: Array<FlowTypeAnnotation>;
  }

  interface MixedTypeAnnotation extends FlowBaseTypeAnnotation {}

  interface NullableTypeAnnotation extends FlowTypeAnnotation {
    typeAnnotation: TypeAnnotation;
  }

  interface NumberLiteralTypeAnnotation extends FlowLiteralTypeAnnotation {}

  interface NumberTypeAnnotation extends FlowBaseTypeAnnotation {}

  interface StringLiteralTypeAnnotation extends FlowLiteralTypeAnnotation {}

  interface StringTypeAnnotatio