          }
        } else {
          t1 = baseUrl;
          result = _this._evaluate0$_importLikeNode$3(url, t1 == null ? _this._evaluate0$_assertInModule$2(_this._evaluate0$__stylesheet, _s11_).span.file.url : t1, forImport);
          if (result != null) {
            t1 = _this._evaluate0$_loadedUrls;
            A.NullableExtension_andThen0(result.stylesheet.span.file.url, t1.get$add(t1));
            return result;
          }
        }
        if (B.JSString_methods.startsWith$1(url, "package:") && true)
          throw A.wrapException(string$.x22packa);
        else
          throw A.wrapException("Can't find stylesheet to import.");
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.SassException0) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          t1 = error;
          t2 = J.getInterceptor$z(t1);
          A.throwWithTrace0(_this._evaluate0$_exception$2(error._span_exception$_message, A.SourceSpanException.prototype.get$span.call(t2, t1)), stackTrace);
        } else {
          error0 = t1;
          stackTrace0 = A.getTraceFromException(exception);
          message = null;
          try {
            message = A._asString(J.get$message$x(error0));
          } catch (exception) {
            message0 = J.toString$0$(error0);
            message = message0;
          }
          A.throwWithTrace0(_this._evaluate0$_exception$1(message), stackTrace0);
        }
      } finally {
        _this._