/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/// <amd-module name="@angular/compiler-cli/linker/src/ast/ast_host" />
/**
 * An abstraction for getting information from an AST while being agnostic to the underlying AST
 * implementation.
 */
export interface AstHost<TExpression> {
    /**
     * Get the name of the symbol represented by the given expression node, or `null` if it is not a
     * symbol.
     */
    getSymbolName(node: TExpression): string | null;
    /**
     * Return `true` if the given expression is a string literal, or false otherwise.
     */
    isStringLiteral(node: TExpression): boolean;
    /**
     * Parse the string value from the given expression, or throw if it is not a string literal.
     */
    parseStringLiteral(str: TExpression): string;
    /**
     * Return `true` if the given expression is a numeric literal, or false otherwise.
     */
    isNumericLiteral(node: TE