
      import {createRequire as __cjsCompatRequire} from 'module';
      const require = __cjsCompatRequire(import.meta.url);
      const __ESM_IMPORT_META_URL__ = import.meta.url;
    
import {
  DEFAULT_ERROR_CODE,
  EmitFlags,
  GENERATED_FILES,
  SOURCE,
  createCompilerHost,
  createMessageDiagnostic,
  exitCodeFromResult,
  formatDiagnostics,
  performCompilation,
  readConfiguration
} from "./chunk-BCXYCOVM.js";

// bazel-out/k8-fastbuild/bin/packages/compiler-cli/src/main.mjs
import ts2 from "typescript";
import yargs from "yargs";

// bazel-out/k8-fastbuild/bin/packages/compiler-cli/src/perform_watch.mjs
import * as chokidar from "chokidar";
import * as path from "path";
import ts from "typescript";
function totalCompilationTimeDiagnostic(timeInMillis) {
  let duration;
  if (timeInMillis > 1e3) {
    duration = `${(timeInMillis / 1e3).toPrecision(2)}s`;
  } else {
    duration = `${timeInMillis}ms`;
  }
  return {
    category: ts.DiagnosticCategory.Message,
    messageText: `Total time: ${duration}`,
    code: DEFAULT_ERROR_CODE,
    source: SOURCE,
    file: void 0,
    start: void 0,
    length: void 0
  };
}
var FileChangeEvent;
(function(FileChangeEvent2) {
  FileChangeEvent2[FileChangeEvent2["Change"] = 0] = "Change";
  FileChangeEvent2[FileChangeEvent2["CreateDelete"] = 1] = "CreateDelete";
  FileChangeEvent2[FileChangeEvent2["CreateDeleteDir"] = 2] = "CreateDeleteDir";
})(FileChangeEvent || (FileChangeEvent = {}));
function createPerformWatchHost(configFileName, reportDiagnostics, existingOptions, createEmitCallback2) {
  return {
    reportDiagnostics,
    createCompilerHost: (options) => createCompilerHost({ options }),
    readConfiguration: () => readConfiguration(configFileName, existingOptions),
    createEmitCallback: (options) => createEmitCallback2 ? createEmitCallback2(options) : void 0,
    onFileChange: (options, listener, ready) => {
      if (!options.basePath) {
        reportDiagnostics([{
          category: ts.DiagnosticCategory.Error,
          messageText: "Invalid configuration option. baseDir not specified",
          source: SOURCE,
          code: DEFAULT_ERROR_CODE,
          file: void 0,
          start: void 0,
          length: void 0
        }]);
        return { close: () => {
        } };
      }
      const watcher = chokidar.watch(options.basePath, {
        ignored: /((^[\/\\])\..)|(\.js$)|(\.map$)|(\.metadata\.json|node_modules)/,
        ignoreInitial: true,
        persistent: true
      });
      watcher.on("all", (event, path2) => {
        switch (event) {
          case "change":
            listener(FileChangeEvent.Change, path2);
            break;
          case "unlink":
          case "add":
            listener(FileChangeEvent.CreateDelete, path2);
            break;
          case "unlinkDir":
          case "addDir":
            listener(FileChangeEvent.CreateDeleteDir, path2);
            break;
        }
      });
      watcher.on("ready", ready);
      return { close: () => watcher.close(), ready };
  