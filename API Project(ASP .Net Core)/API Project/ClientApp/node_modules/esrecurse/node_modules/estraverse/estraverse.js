esult, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              unparsedQuery = node.query;
              $async$goto = unparsedQuery != null ? 3 : 5;
              break;
            case 3:
              // then
              $async$temp1 = unparsedQuery;
              $async$temp2 = A;
              $async$goto = 6;
              return A._asyncAwait($async$self._async_evaluate$_performInterpolation$2$warnForColor(unparsedQuery, true), $async$visitAtRootRule$1);
            case 6:
              // returning from await.
              $async$result = $async$self._async_evaluate$_adjustParseError$2($async$temp1, new $async$temp2._EvaluateVisitor_visitAtRootRule_closure2($async$self, $async$result));
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$result = B.AtRootQuery_UsS;
            case 4:
              // join
              query = $async$result;
              $parent = $async$self._async_evaluate$_assertInModule$2($async$self._async_evaluate$__parent, "__parent");
              included = A._setArrayType([], type$.JSArray_ModifiableCssParentNode);
              for (t1 = type$.CssStylesheet; !t1._is($parent); $parent = grandparent) {
                if (!query.excludes$1($parent))
                  included.push($parent);
                grandparent = $parent._parent;
                if (grandparent == null)
                  throw A.wrapException(A.StateError$(string$.CssNod));
              }
              root = $async$self._async_evaluate$_trimIncluded$1(included);
              $async$goto = root === $async$self._async_evaluate$_assertInModule$2($async$self._async_evaluate$__parent, "__parent") ? 7 : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return A._asyncAwait($async$self._async_evaluate$_environment.scope$1$2$when(new A._EvaluateVisitor_visitAtRootRule_closure3($async$self, node), node.hasDeclarations, type$.Null), $async$visitAtRootRule$1);
            case 9:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // join
              if (included.length !== 0) {
                innerCopy = B.JSArray_methods.get$first(included).copyWithoutChildren$0();
                for (t1 = A.SubListIterable$(included, 1, null, type$.ModifiableCssParentNode), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1, outerCopy = innerCopy; t1.moveNext$0(); outerCopy = copy) {
                  t3 = t1.__internal$_current;
                  copy = (t3 == null ? t2._as(t3) : t3).copyWithoutChildren$0();
                  copy.addChild$1(outerCopy);
                }
                root.addChild$1(outerCopy);
              } else
                innerCopy = root;
              $async$goto = 10;
              return A._asyncAwait($async$self._async_evaluate$_scopeForAtRoot$4(node, innerCopy, query, included).call$1(new A._EvaluateVisitor_visitAtRootRule_closure4($async$self, node)), $async$visitAtRootRule$1);
            case 10:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitAtRootRule$1, $async$completer);
    },
    _async_evaluate$_trimIncluded$1(nodes) {
      var $parent, t1, innermostContiguous, i, t2, grandparent, root, _this = this, _null = null, _s5_ = "_root",
        _s22_ = " to be an ancestor of ";
      if (nodes.length === 0)
        return _this._async_evaluate$_assertInModule$2(_this._async_evaluate$__root, _s5_);
      $parent = _this._async_evaluate$_assertInModule$2(_this._async_evaluate$__parent, "__parent");
      for (t1 = nodes.length, innermostContiguous = _null, i = 0; i < t1; ++i, $parent = grandparent) {
        for (; t2 = nodes[i], $parent !== t2; innermostContiguous = _null, $parent = grandparent) {
          grandparent = $parent._parent;
          if (grandparent == null)
            throw A.wrapException(A.ArgumentError$("Expected " + t2.toString$0(0) + _s22_ + _this.toString$0(0) + ".", _null));
        }
        if (innermostContiguous == null)
          innermostContiguous = i;
        grandparent = $parent._parent;
        if (grandparent == null)
          throw A.wrapException(A.ArgumentError$("Expected " + t2.toString$0(0) + _s22_ + _this.toString$0(0) + ".", _null));
      }
      if ($parent !== _this._async_evaluate$_assertInModule$2(_this._async_evaluate$__root, _s5_))
        return _this._async_evaluate$_assertInModule$2(_this._async_evaluate$__root, _s5_);
      innermostContiguous.toString;
      root = nodes[innermostContiguous];
      B.JSArray_methods.removeRange$2(nodes, innermostContiguous, nodes.length);
      return root;
    },
    _async_evaluate$_scopeForAtRoot$4(node, newParent, query, included) {
      var _this = this,
        scope = new A._EvaluateVisitor__scopeForAtRoot_closure5(_this, newParent, node),
        t1 = query._all || query._at_root_query$_rule;
      if (t1 !== query.include)
        scope = new A._EvaluateVisitor__scopeForAtRoot_closure6(_this, scope);
      if (_this._async_evaluate$_mediaQueries != null && query.excludesName$1("media"))
        scope = new A._EvaluateVisitor__scopeForAtRoot_closure7(_this, scope);
      if (_this._async_evaluate$_inKeyframes && query.excludesName$1("keyframes"))
        scope = new A._EvaluateVisitor__scopeForAtRoot_closure8(_this, scope);
      return _this._async_evaluate$_inUnknownAtRule && !B.JSArray_methods.any$1(included, new A._EvaluateVisitor__scopeForAtRoot_closure9()) ? new A._EvaluateVisitor__scopeForAtRoot_closure10(_this, scope) : scope;
    },
    visitContentBlock$1(node) {
      return A.throwExpression(A.UnsupportedError$(string$.Evalua));
    },
    visitContentRule$1(node) {
      return this.visitContentRule$body$_EvaluateVisitor(node);
    },
    visitContentRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue, $async$self = this, $content;
      var $async$visitContentRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $content = $async$self._async_evaluate$_environment._async_environment$_content;
              if ($content == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate$_runUserDefinedCallable$1$4(node.$arguments, $content, node, new A._EvaluateVisitor_visitContentRule_closure0($async$self, $content), type$.Null), $async$visitContentRule$1);
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitContentRule$1, $async$completer);
    },
    visitDebugRule$1(node) {
      return this.visitDebugRule$body$_EvaluateVisitor(node);
    },
    visitDebugRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue, $async$self = this, value, t1;
      var $async$visitDebugRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(node.expression.accept$1($async$self), $async$visitDebugRule$1);
            case 3:
              // returning from await.
              value = $async$result;
              t1 = value instanceof A.SassString ? value._string$_text : A.serializeValue(value, true, true);
              $async$self._async_evaluate$_logger.debug$2(0, t1, node.span);
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitDebugRule$1, $async$completer);
    },
    visitDeclaration$1(node) {
      return this.visitDeclaration$body$_EvaluateVisitor(node);
    },
    visitDeclaration$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue, $async$self = this, t1, $name, t2, cssValue, t3, t4, children, oldDeclarationName;
      var $async$visitDeclaration$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (($async$self._async_evaluate$_atRootExcludingStyleRule ? null : $async$self._async_evaluate$_styleRuleIgnoringAtRoot) == null && !$async$self._async_evaluate$_inUnknownAtRule && !$async$self._async_evaluate$_inKeyframes)
                throw A.wrapException($async$self._async_evaluate$_exception$2(string$.Declarm, node.span));
              t1 = node.name;
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate$_interpolationToValue$2$warnForColor(t1, true), $async$visitDeclaration$1);
            case 3:
              // returning from await.
              $name = $async$result;
              t2 = $async$self._async_evaluate$_declarationName;
              if (t2 != null)
                $name = new A.CssValue(t2 + "-" + A.S($name.get$value($name)), $name.get$span($name), type$.CssValue_String);
              t2 = node.value;
              $async$goto = 4;
              return A._asyncAwait(A.NullableExtension_andThen(t2, new A._EvaluateVisitor_visitDeclaration_closure1($async$self)), $async$visitDeclaration$1);
            case 4:
              // returning from await.
              cssValue = $async$result;
              t3 = cssValue != null;
              if (t3)
                t4 = !cssValue.get$value(cssValue).get$isBlank() || cssValue.get$value(cssValue).get$asList().length === 0;
              else
                t4 = false;
              if (t4) {
                t3 = $async$self._async_evaluate$_assertInModule$2($async$self._async_evaluate$__parent, "__parent");
                t1 = B.JSString_methods.startsWith$1(t1.get$initialPlain(), "--");
                if ($async$self._async_evaluate$_sourceMap) {
                  t2 = A.NullableExtension_andThen(t2, $async$self.get$_async_evaluate$_expressionNode());
                  t2 = t2 == null ? null : J.get$span$z(t2);
                } else
                  t2 = null;
                t3.addChild$1(A.ModifiableCssDeclaration$($name, cssValue, node.span, t1, t2));
              } else if (J.startsWith$1$s($name.get$value($name), "--") && t3)
                throw A.wrapException($async$self._async_evaluate$_exception$2("Custom property values may not be empty.", cssValue.get$span(cssValue)));
              children = node.children;
              $async$goto = children != null ? 5 : 6;
              break;
            case 5:
              // then
              oldDeclarationName = $async$self._async_evaluate$_declarationName;
              $async$self._async_evaluate$_declarationName = $name.get$value($name);
              $async$goto = 7;
              return A._asyncAwait($async$self._async_evaluate$_environment.scope$1$2$when(new A._EvaluateVisitor_visitDeclaration_closure2($async$self, children), node.hasDeclarations, type$.Null), $async$visitDeclaration$1);
            case 7:
              // returning from await.
              $async$self._async_evaluate$_declarationName = oldDeclarationName;
            case 6:
              // join
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitDeclaration$1, $async$completer);
    },
    visitEachRule$1(node) {
      return this.visitEachRule$body$_EvaluateVisitor(node);
    },
    visitEachRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue, $async$self = this, t1, list, nodeWithSpan, setVariables;
      var $async$visitEachRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = node.list;
              $async$goto = 3;
              return A._asyncAwait(t1.accept$1($async$self), $async$visitEachRule$1);
            case 3:
              // returning from await.
              list = $async$result;
              nodeWithSpan = $async$self._async_evaluate$_expressionNode$1(t1);
              setVariables = node.variables.length === 1 ? new A._EvaluateVisitor_visitEachRule_closure2($async$self, node, nodeWithSpan) : new A._EvaluateVisitor_visitEachRule_closure3($async$self, node, nodeWithSpan);
              $async$returnValue = $async$self._async_evaluate$_environment.scope$1$2$semiGlobal(new A._EvaluateVisitor_visitEachRule_closure4($async$self, list, setVariables, node), true, type$.nullable_Value);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitEachRule$1, $async$completer);
    },
    _async_evaluate$_setMultipleVariables$3(variables, value, nodeWithSpan) {
      var i,
        list = value.get$asList(),
        t1 = variables.length,
        minLength = Math.min(t1, list.length);
      for (i = 0; i < minLength; ++i)
        this._async_evaluate$_environment.setLocalVariable$3(variables[i], this._async_evaluate$_withoutSlash$2(list[i], nodeWithSpan), nodeWithSpan);
      for (i = minLength; i < t1; ++i)
        this._async_evaluate$_environment.setLocalVariable$3(variables[i], B.C__SassNull, nodeWithSpan);
    },
    visitErrorRule$1(node) {
      return this.visitErrorRule$body$_EvaluateVisitor(node);
    },
    visitErrorRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Value),
        $async$self = this, $async$temp1, $async$temp2;
      var $async$visitErrorRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$temp2 = J;
              $async$goto = 2;
              return A._asyncAwait(node.expression.accept$1($async$self), $async$visitErrorRule$1);
            case 2:
              // returning from await.
              throw $async$temp1.wrapException($async$self._async_evaluate$_exception$2($async$temp2.toString$0$($async$result), node.span));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitErrorRule$1, $async$completer);
    },
    visitExtendRule$1(node) {
      return this.visitExtendRule$body$_EvaluateVisitor(node);
    },
    visitExtendRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue, $async$self = this, targetText, t1, t2, t3, _i, t4, styleRule;
      var $async$visitExtendRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              styleRule = $async$self._async_evaluate$_atRootExcludingStyleRule ? null : $async$self._async_evaluate$_styleRuleIgnoringAtRoot;
              if (styleRule == null || $async$self._async_evaluate$_declarationName != null)
                throw A.wrapException($async$self._async_evaluate$_exception$2(string$.x40exten, node.span));
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate$_interpolationToValue$2$warnForColor(node.selector, true), $async$visitExtendRule$1);
            case 3:
              // returning from await.
              targetText = $async$result;
              for (t1 = $async$self._async_evaluate$_adjustParseError$2(targetText, new A._EvaluateVisitor_visitExtendRule_closure0($async$self, targetText)).components, t2 = t1.length, t3 = type$.CompoundSelector, _i = 0; _i < t2; ++_i) {
                t4 = t1[_i].components;
                if (t4.length !== 1 || !(B.JSArray_methods.get$first(t4) instanceof A.CompoundSelector))
                  throw A.wrapException(A.SassFormatException$("complex selectors may not be extended.", targetText.get$span(targetText)));
                t4 = t3._as(B.JSArray_methods.get$first(t4)).components;
                if (t4.length !== 1)
                  throw A.wrapException(A.SassFormatException$(string$.compou + B.JSArray_methods.join$1(t4, ", ") + string$.x60_inst, targetText.get$span(targetText)));
                $async$self._async_evaluate$_assertInModule$2($async$self._async_evaluate$__extensionStore, "_extensionStore").addExtension$4(styleRule.selector, B.JSArray_methods.get$first(t4), node, $async$self._async_evaluate$_mediaQueries);
              }
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitExtendRule$1, $async$completer);
    },
    visitAtRule$1(node) {
      return this.visitAtRule$body$_EvaluateVisitor(node);
    },
    visitAtRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue, $async$self = this, $name, value, children, wasInKeyframes, wasInUnknownAtRule;
      var $async$visitAtRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._async_evaluate$_declarationName != null)
                throw A.wrapException($async$self._async_evaluate$_exception$2(string$.At_rul, node.span));
              $async$goto = 3;
              return A._asyncAwait($async$self._async_evaluate$_interpolationToValue$1(node.name), $async$visitAtRule$1);
            case 3:
              // returning from await.
              $name = $async$result;
              $async$goto = 4;
              return A._asyncAwait(A.NullableExtension_andThen(node.value, new A._EvaluateVisitor_visitAtRule_closure2($async$self)), $async$visitAtRule$1);
            case 4:
              // returning from await.
              value = $async$result;
              children = node.children;
              if (children == null) {
                $async$self._async_evaluate$_assertInModule$2($async$self._async_evaluate$__parent, "__parent").addChild$1(A.ModifiableCssAtRule$($name, node.span, true, value));
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              wasInKeyframes = $async$self._async_evaluate$_inKeyframes;
              wasInUnknownAtRule = $async$self._async_evaluate$_inUnknownAtRule;
              if (A.unvendor($name.get$value($name)) === "keyframes")
                $async$self._async_evaluate$_inKeyframes = true;
              else
                $async$self._async_evaluate$_inUnknownAtRule = true;
              $async$goto = 5;
              return A._asyncAwait($async$self._async_evaluate$_withParent$2$4$scopeWhen$through(A.ModifiableCssAtRule$($name, node.span, false, value), new A._EvaluateVisitor_visitAtRule_closure3($async$self, children), node.hasDeclarations, new A._EvaluateVisitor_visitAtRule_closure4(), type$.ModifiableCssAtRule, type$.Null), $async$visitAtRule$1);
            case 5:
              // returning from await.
              $async$self._async_evaluate$_inUnknownAtRule = wasInUnknownAtRule;
              $async$self._async_evaluate$_inKeyframes = wasInKeyframes;
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitAtRule$1, $async$completer);
    },
    visitForRule$1(node) {
      return this.visitForRule$body$_EvaluateVisitor(node);
    },
    visitForRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue, $async$self = this, t1, t2, t3, fromNumber, t4, toNumber, from, to, direction;
      var $async$visitForRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = node.from;
              t3 = type$.SassNumber;
              $async$goto = 3;
              return A._asyncAwait($async$self._addExceptionSpanAsync$1$2(t2, new A._EvaluateVisitor_visitForRule_closure4($async$self, node), t3), $async$visitForRule$1);
            case 3:
              // returning from await.
              fromNumber = $async$result;
              t4 = node.to;
              $async$goto = 4;
              return A._asyncAwait($async$self._addExceptionSpanAsync$1$2(t4, new A._EvaluateVisitor_visitForRule_closure5($async$self, node), t3), $async$visitForRule$1);
            case 4:
              // returning from await.
              toNumber = $async$result;
              from = $async$self._async_evaluate$_addExceptionSpan$2(t2, new A._EvaluateVisitor_visitForRule_closure6(fromNumber));
              to = t1.to = $async$self._async_evaluate$_addExceptionSpan$2(t4, new A._EvaluateVisitor_visitForRule_closure7(toNumber, fromNumber));
              direction = from > to ? -1 : 1;
              if (from === (!node.isExclusive ? t1.to = to + direction : to)) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = $async$self._async_evaluate$_environment.scope$1$2$semiGlobal(new A._EvaluateVisitor_visitForRule_closure8(t1, $async$self, node, from, direction, fromNumber), true, type$.nullable_Value);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$visitForRule$1, $async$completer);
    },
    visitForwardRule$1(node) {
      return this.visitForwardRule$body$_EvaluateVisitor(node);
    },
    visitForwardRule$body$_EvaluateVisitor(node) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Value),
        $async$returnValue, $async$self = this, newConfiguration, t4, _i, variable, $name, oldConfiguration, adjustedConfiguration, t1, t2, t3;
      var $async$visitForwardRule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              oldConfiguration = $async$self._async_evaluate$_configuration;
              adjustedConfiguration = oldConfiguration.throughForward$1(node);
              t1 = node.configuration;
              t2 = t1.length;
              t3 = node.url;
              $async$goto = t2 !== 0 ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return A._asyncAwait($async$self._async_evaluate$_addForwardConfiguration$2(adjustedConfiguration, node), $async$visitForwardRule$1);
            case 6:
              // returning from await.
              newConfiguration = $async$result;
              $async$goto = 7;
              return A._asyncAwait($async$self._async_evaluate$_loadModule$5$configuration(t3, "@forward", node, new A._EvaluateVisitor_visitForwardRule_closure1($async$self, node), newConfiguration), $async$visitForwardRule$1);
            case 7:
              // returning from await.
              t3 = type$.String;
              t4 = A.LinkedHashSet_LinkedHashSet$_empty(t3);
              for (_i = 0; _i < t2; ++_i) {
                variable = t1[_i];
                if (!variable.isGuarded)
                  t4.add$1(0, variable.name);
              }
              $async$self._async_evaluate$_removeUsedConfiguration$3$