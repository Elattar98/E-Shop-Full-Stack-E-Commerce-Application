* This interface serves primarily as documentation, as conformance to this interface is not\n * enforced during linking.\n */\nexport interface R3DeclareFactoryMetadata extends R3PartialDeclaration {\n  /**\n   * A collection of dependencies that this factory relies upon.\n   *\n   * If this is `null`, then the type's constructor is nonexistent and will be inherited from an\n   * ancestor of the type.\n   *\n   * If this is `'invalid'`, then one or more of the parameters wasn't resolvable and any attempt to\n   * use these deps will result in a runtime error.\n   */\n  deps: R3DeclareDependencyMetadata[]|'invalid'|null;\n\n  /**\n   * Type of the target being created by the factory.\n   */\n  target: FactoryTarget;\n}\n\nexport enum FactoryTarget {\n  Directive = 0,\n  Component = 1,\n  Injectable = 2,\n  Pipe = 3,\n  NgModule = 4,\n}\n\n/**\n * Describes the shape of the object that the `ɵɵngDeclareInjectable()` function accepts.\n *\n * This interface serves primarily as documentation, as conformance to this interface is not\n * enforced during linking.\n */\nexport interface R3DeclareInjectableMetadata extends R3PartialDeclaration {\n  /**\n   * If provided, specifies that the declared injectable belongs to a particular injector:\n   * - `InjectorType` such as `NgModule`,\n   * - `'root'` the root injector\n   * - `'any'` all injectors.\n   * If not provided, then it does not belong to any injector. Must be explicitly listed in the\n   * providers of an injector.\n   */\n  providedIn?: o.Expression;\n\n  /**\n   * If provided, an expression that evaluates to a class to use when creating an instance of this\n   * injectable.\n   */\n  useClass?: o.Expression;\n\n  /**\n   * If provided, an expression that evaluates to a function to use when creating an instance of\n   * this injectable.\n   */\n  useFactory?: o.Expression;\n\n  /**\n   * If provided, an expression that evaluates to a token of another injectable that this injectable\n   * aliases.\n   */\n  useExisting?: o.Expression;\n\n  /**\n   * If provided, an expression that evaluates to the value of the instance of this injectable.\n   */\n  useValue?: o.Expression;\n\n  /**\n   * An array of dependencies to support instantiating this injectable via `useClass` or\n   * `useFactory`.\n   */\n  deps?: R3DeclareDependencyMetadata[];\n}\n\n/**\n * Metadata indicating how a dependency should be injected into a factory.\n */\nexport int