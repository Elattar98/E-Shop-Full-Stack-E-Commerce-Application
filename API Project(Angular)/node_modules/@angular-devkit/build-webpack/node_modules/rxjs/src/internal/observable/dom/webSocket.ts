 export function isTSLiteralType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSLiteralType)
  declare export function assertTSLiteralType(node: ?Object, opts?: ?Object): void
  declare export function isTSExpressionWithTypeArguments(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSExpressionWithTypeArguments)
  declare export function assertTSExpressionWithTypeArguments(node: ?Object, opts?: ?Object): void
  declare export function isTSInterfaceDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSInterfaceDeclaration)
  declare export function assertTSInterfaceDeclaration(node: ?Object, opts?: ?Object): void
  declare export function isTSInterfaceBody(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSInterfaceBody)
  declare export function assertTSInterfaceBody(node: ?Object, opts?: ?Object): void
  declare export function isTSTypeAliasDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeAliasDeclaration)
  declare export function assertTSTypeAliasDeclaration(node: ?Object, opts?: ?Object): void
  declare export function isTSInstantiationExpression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSInstantiationExpression)
  declare export function assertTSInstantiationExpression(node: ?Object, opts?: ?Object): void
  declare export function isTSAsExpression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSAsExpression)
  declare export function assertTSAsExpression(node: ?Object, opts?: ?Object): void
  declare export function isTSTypeAssertion(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeAssertion)
  declare export function assertTSTypeAssertion(node: ?Object, opts?: ?Object): void
  declare export function isTSEnumDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSEnumDeclaration)
  declare export function assertTSEnumDeclaration(node: ?Object, opts?: ?Object): void
  declare export function isTSEnumMember(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSEnumMember)
  declare export function assertTSEnumMember(node: ?Object, opts?: ?Object): void
  declare export function isTSModuleDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSModuleDeclaration)
  declare export function assertTSModuleDeclaration(node: ?Object, opts?: ?Object): void
  declare export function isTSModuleBlock(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSModuleBlock)
  declare export function assertTSModuleBlock(node: ?Object, opts?: ?Object): void
  declare export function isTSImportType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSImportType)
  declare export function assertTSImportType(node: ?Object, opts?: ?Object): void
  declare export function isTSImportEqualsDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSImportEqualsDeclaration)
  declare export function assertTSImportEqualsDeclaration(node: ?Object, opts?: ?Object): void
  declare export function isTSExternalModuleReference(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSExternalModuleReference)
  declare export function assertTSExternalModuleReference(node: ?Object, opts?: ?Object): void
  declare export function isTSNonNullExpression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSNonNullExpression)
  declare export function assertTSNonNullExpression(node: ?Object, opts?: ?Object): void
  declare export function isTSExportAssignment(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSExportAssignment)
  declare export function assertTSExportAssignment(node: ?Object, opts?: ?Object): void
  declare export function isTSNamespaceExportDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSNamespaceExportDeclaration)
  declare export function assertTSNamespaceExportDeclaration(node: ?Object, opts?: ?Object): void
  declare export function isTSTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeAnnotation)
  declare export function assertTSTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare export function isTSTypeParameterInstantiation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeParameterInstantiation)
  declare export function assertTSTypeParameterInstantiation(node: ?Object, opts?: ?Object): void
  declare export function isTSTypeParameterDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeParameterDeclaration)
  declare export function assertTSTypeParameterDeclaration(node: ?Object, opts?: ?Object): void
  declare export function isTSTypeParameter(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeParameter)
  declare export function assertTSTypeParameter(node: ?Object, opts?: ?Object): void
  declare export function isStandardized(node: ?Object, opts?: ?Object): boolean
  declare export function assertStandardized(node: ?Object, opts?: ?Object): void
  declare export function isExpression(node: ?Object, opts?: ?Object): boolean
  declare export function assertExpression(node: ?Object, opts?: ?Object): void
  declare export function isBinary(node: ?Object, opts?: ?Object): boolean
  declare export function assertBinary(node: ?Object, opts?: ?Object): void
  declare export function isScopable(node: ?Object, opts?: ?Object): boolean
  declare export function assertScopable(node: ?Object, opts?: ?Object): void
  declare export function isBlockParent(node: ?Object, opts?: ?Object): boolean
  declare export function assertBlockParent(node: ?Object, opts?: ?Object): void
  declare export function isBlock(node: ?Object, opts?: ?Object): boolean
  declare export function assertBlock(node: ?Object, opts?: ?Object): void
  declare export function isStatement(node: ?Object, opts?: ?Object): boolean
  declare export function assertStatement(node: ?Object, opts?: ?Object): void
  declare export function isTerminatorless(node: ?Object, opts?: ?Object): boolean
  declare export function assertTerminatorless(node: ?Object, opts?: ?Object): void
  declare export function isCompletionStatement(node: ?Object, opts?: ?Object): boolean
  declare export function assertCompletionStatement(node: ?Object, opts?: ?Object): void
  declare export function isConditional(node: ?Object, opts?: ?Object): boolean
  declare export function assertConditional(node: ?Object, opts?: ?Object): void
  declare export function isLoop(node: ?Object, opts?: ?Object): boolean
  declare export function assertLoop(node: ?Object, opts?: ?Object): void
  declare export function isWhile(node: ?Object, opts?: ?Object): boolean
  declare export function assertWhile(node: ?Object, opts?: ?Object): void
  declare export function isExpressionWrapper(node: ?Object, opts?: ?Object): boolean
  declare export function assertExpressionWrapper(node: ?Object, opts?: ?Object): void
  declare export function isFor(node: ?Object, opts?: ?Object): boolean
  declare export function assertFor(node: ?Object, opts?: ?Object): void
  declare export function isForXStatement(node: ?Object, opts?: ?Object): boolean
  declare export function assertForXStatement(node: ?Object, opts?: ?Object): void
  declare export function isFunction(node: ?Object, opts?: ?Object): boolean
  declare export function assertFunction(node: ?Object, opts?: ?Object): void
  declare export function isFunctionParent(node: ?Object, opts?: ?Object): boolean
  declare export function assertFunctionParent(node: ?Object, opts?: ?Object): void
  declare export function isPureish(node: ?Object, opts?: ?Object): boolean
  declare export function assertPureish(node: ?Object, opts?: ?Object): void
  declare export function isDeclaration(node: ?Object, opts?: ?Object): boolean
  declare export function assertDeclaration(node: ?Object, opts?: ?Object): void
  declare export function isPatternLike(node: ?Object, opts?: ?Object): boolean
  declare export function assertPatternLike(node: ?Object, opts?: ?Object): void
  declare export function isLVal(node: ?Object, opts?: ?Object): boolean
  declare export function assertLVal(node: ?Object, opts?: ?Object): void
  declare export function isTSEntityName(node: ?Object, opts?: ?Object): boolean
  declare export function assertTSEntityName(node: ?Object, opts?: ?Object): void
  declare export function isLiteral(node: ?Object, opts?: ?Object): boolean
  declare export function assertLiteral(node: ?Object, opts?: ?Object): void
  declare export function isImmutable(node: ?Object, opts?: ?Object): boolean
  declare export function assertImmutable(node: ?Object, opts?: ?Object): void
  declare export function isUserWhitespacable(node: ?Object, opts?: ?Object): boolean
  declare export function assertUserWhitespacable(node: ?Object, opts?: ?Object): void
  declare export function isMethod(node: ?Object, opts?: ?Object): boolean
  declare export function assertMethod(node: ?Object, opts?: ?Object): void
  declare export function isObjectMember(node: ?Object, opts?: ?Object): boolean
  declare export function assertObjectMember(node: ?Object, opts?: ?Object): void
  declare export function isProperty(node: ?Object, opts?: ?Object): boolean
  declare export function assertProperty(node: ?Object, opts?: ?Object): void
  declare export function isUnaryLike(node: ?Object, opts?: ?Object): boolean
  declare export function assertUnaryLike(node: ?Object, opts?: ?Object): void
  declare export function isPattern(node: ?Object, opts?: ?Object): boolean
  declare export function assertPattern(node: ?Object, opts?: ?Object): void
  declare export function isClass(node: ?Object, opts?: ?Object): boolean
  declare export function assertClass(node: ?Object, opts?: ?Object): void
  declare export function isModuleDeclaration(node: ?Object, opts?: ?Object): boolean
  declare export function assertModuleDeclaration