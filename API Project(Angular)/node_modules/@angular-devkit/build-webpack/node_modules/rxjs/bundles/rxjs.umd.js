m.Text.RegularExpressions.xml",
        "ref/netcoreapp1.1/System.Text.RegularExpressions.dll",
        "ref/netstandard1.0/System.Text.RegularExpressions.dll",
        "ref/netstandard1.0/System.Text.RegularExpressions.xml",
        "ref/netstandard1.0/de/System.Text.RegularExpressions.xml",
        "ref/netstandard1.0/es/System.Text.RegularExpressions.xml",
        "ref/netstandard1.0/fr/System.Text.RegularExpressions.xml",
        "ref/netstandard1.0/it/System.Text.RegularExpressions.xml",
        "ref/netstandard1.0/ja/System.Text.RegularExpressions.xml",
        "ref/netstandard1.0/ko/System.Text.RegularExpressions.xml",
        "ref/netstandard1.0/ru/System.Text.RegularExpressions.xml",
        "ref/netstandard1.0/zh-hans/System.Text.RegularExpressions.xml",
        "ref/netstandard1.0/zh-hant/System.Text.RegularExpressions.xml",
        "ref/netstandard1.3/System.Text.RegularExpressions.dll",
        "ref/netstandard1.3/System.Text.RegularExpressions.xml",
        "ref/netstandard1.3/de/System.Text.RegularExpressions.xml",
        "ref/netstandard1.3/es/System.Text.RegularExpressions.xml",
        "ref/netstandard1.3/fr/System.Text.RegularExpressions.xml",
        "ref/netstandard1.3/it/System.Text.RegularExpressions.xml",
        "ref/netstandard1.3/ja/System.Text.RegularExpressions.xml",
        "ref/netstandard1.3/ko/System.Text.RegularExpressions.xml",
        "ref/netstandard1.3/ru/System.Text.RegularExpressions.xml",
        "ref/netstandard1.3/zh-hans/System.Text.RegularExpressions.xml",
        "ref/netstandard1.3/zh-hant/System.Text.RegularExpressions.xml",
        "ref/netstandard1.6/System.Text.RegularExpressions.dll",
        "ref/netstandard1.6/System.Text.RegularExpressions.xml",
        "ref/netstandard1.6/de/System.Text.RegularExpressions.xml",
        "ref/netstandard1.6/es/System.Text.RegularExpressions.xml",
        "ref/netstandard1.6/fr/System.Text.RegularExpressions.xml",
        "ref/netstandard1.6/it/System.Text.RegularExpressions.xml",
        "ref/netstandard1.6/ja/System.Text.RegularExpressions.xml",
        "ref/netstandard1.6/ko/System.Text.RegularExpressions.xml",
        "ref/netstandard1.6/ru/System.Text.RegularExpressions.xml",
        "ref/netstandard1.6/zh-hans/System.Text.RegularExpressions.xml",
        "ref/netstandard1.6/zh-hant/System.Text.RegularExpressions.xml",
        "ref/portable-net45+win8+wp8+wpa81/_._",
        "ref/win8/_._",
        "ref/wp80/_._",
        "ref/wpa81/_._",
        "ref/xamarinios10/_._",
        "ref/xamarinmac20/_._",
        "ref/xamarintvos10/_._",
        "ref/xamarinwatchos10/_._",
        "system.text.regularexpressions.4.3.0.nupkg.sha512",
        "system.text.regularexpressions.nuspec"
      ]
    },
    "System.Threading/4.3.0": {
      "sha512": "VkUS0kOBcUf3Wwm0TSbrevDDZ6BlM+b/HRiapRFWjM5O0NS0LviG0glKmFK+hhPDd1XFeSdU1GmlLhb2CoVpIw==",
      "type": "package",
      "path": "system.threading/4.3.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "ThirdPartyNotices.txt",
        "dotnet_library_license.txt",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net45/_._",
        "lib/netcore50/System.Threading.dll",
        "lib/netstandard1.3/System.Threading.dll",
        "lib/portable-net45+win8+wp8+wpa81/_._",
        "lib/win8/_._",
        "lib/wp80/_._",
        "lib/wpa81/_._",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "ref/MonoAndroid10/_._",
        "ref/MonoTouch10/_._",
        "ref/net45/_._",
        "ref/netcore50/System.Threading.dll",
        "ref/netcore50/System.Threading.xml",
        "ref/netcore50/de/System.Threading.xml",
        "ref/netcore50/es/System.Threading.xml",
        "ref/netcore50/fr/System.Threading.xml",
        "ref/netcore50/it/System.Threading.xml",
        "ref/netcore50/ja/System.Threading.xml",
        "ref/netcore50/ko/System.Threading.xml",
        "ref/netcore50/ru/System.Threading.xml",
        "ref/netcore50/zh-hans/System.Threading.xml",
        "ref/netcore50/zh-hant/System.Threading.xml",
        "ref/netstandard1.0/System.Threading.dll",
        "ref/netstandard1.0/System.Threading.xml",
        "ref/netstandard1.0/de/System.Threading.xml",
        "ref/netstandard1.0/es/System.Threading.xml",
        "ref/netstandard1.0/fr/System.Threading.xml",
        "ref/netstandard1.0/it/System.Threading.xml",
        "ref/netstandard1.0/ja/System.Threading.xml",
        "ref/netstandard1.0/ko/System.Threading.xml",
        "ref/netstandard1.0/ru/System.Threading.xml",
        "ref/netstandard1.0/zh-hans/System.Threading.xml",
        "ref/netstandard1.0/zh-hant/System.Threading.xml",
        "ref/netstandard1.3/System.Threading.dll",
        "ref/netstandard1.3/System.Threading.xml",
        "ref/netstandard1.3/de/System.Threading.xml",
        "ref/netstandard1.3/es/System.Threading.xml",
        "ref/netstandard1.3/fr/System.Threading.xml",
        "ref/netstandard1.3/it/System.Threading.xml",
        "ref/netstandard1.3/ja/System.Threading.xml",
        "ref/netstandard1.3/ko/System.Threading.xml",
        "ref/netstandard1.3/ru/System.Threading.xml",
        "ref/netstandard1.3/zh-hans/System.Threading.xml",
        "ref/netstandard1.3/zh-hant/System.Threading.xml",
        "ref/portable-net45+win8+wp8+wpa81/_._",
        "ref/win8/_._",
        "ref/wp80/_._",
        "ref/wpa81/_._",
        "ref/xamarinios10/_._",
        "ref/xamarinmac20/_._",
        "ref/xamarintvos10/_._",
        "ref/xamarinwatchos10/_._",
        "runtimes/aot/lib/netcore50/System.Threading.dll",
        "system.threading.4.3.0.nupkg.sha512",
        "system.threading.nuspec"
      ]
    },
    "System.Threading.Tasks/4.3.0": {
      "sha512": "LbSxKEdOUhVe8BezB/9uOGGppt+nZf6e1VFyw6v3DN6lqitm0OSn2uXMOdtP0M3W4iMcqcivm2J6UgqiwwnXiA==",
      "type": "package",
      "path": "system.threading.tasks/4.3.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "ThirdPartyNotices.txt",
        "dotnet_library_license.txt",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net45/_._",
        "lib/portable-net45+win8+wp8+wpa81/_._",
        "lib/win8/_._",
        "lib/wp80/_._",
        "lib/wpa81/_._",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "ref/MonoAndroid10/_._",
        "ref/MonoTouch10/_._",
        "ref/net45/_._",
        "ref/netcore50/System.Threading.Tasks.dll",
        "ref/netcore50/System.Threading.Tasks.xml",
        "ref/netcore50/de/System.Threading.Tasks.xml",
        "ref/netcore50/es/System.Threading.Tasks.xml",
        "ref/netcore50/fr/System.Threading.Tasks.xml",
        "ref/netcore50/it/System.Threading.Tasks.xml",
        "ref/netcore50/ja/System.Threading.Tasks.xml",
        "ref/netcore50/ko/System.Threading.Tasks.xml",
        "ref/netcore50/ru/System.Threading.Tasks.xml",
        "ref/netcore50/zh-hans/System.Threading.Tasks.xml",
        "ref/netcore50/zh-hant/System.Threading.Tasks.xml",
        "ref/netstandard1.0/System.Threading.Tasks.dll",
        "ref/netstandard1.0/System.Threading.Tasks.xml",
        "ref/netstandard1.0/de/System.Threading.Tasks.xml",
        "ref/netstandard1.0/es/System.Threading.Tasks.xml",
        "ref/netstandard1.0/fr/System.Threading.Tasks.xml",
        "ref/netstandard1.0/it/System.Threading.Tasks.xml",
        "ref/netstandard1.0/ja/System.Threading.Tasks.xml",
        "ref/netstandard1.0/ko/System.Threading.Tasks.xml",
        "ref/netstandard1.0/ru/System.Threading.Tasks.xml",
        "ref/netstandard1.0/zh-hans/System.Threading.Tasks.xml",
        "ref/netstandard1.0/zh-hant/System.Threading.Tasks.xml",
        "ref/netstandard1.3/System.Threading.Tasks.dll",
        "ref/netstandard1.3/System.Threading.Tasks.xml",
        "ref/netstandard1.3/de/System.Threading.Tasks.xml",
        "ref/netstandard1.3/es/System.Threading.Tasks.xml",
        "ref/netstandard1.3/fr/System.Threading.Tasks.xml",
        "ref/netstandard1.3/it/System.Threading.Tasks.xml",
        "ref/netstandard1.3/ja/System.Threading.Tasks.xml",
        "ref/netstandard1.3/ko/System.Threading.Tasks.xml",
        "ref/netstandard1.3/ru/System.Threading.Tasks.xml",
        "ref/netstandard1.3/zh-hans/System.Threading.Tasks.xml",
        "ref/netstandard1.3/zh-hant/System.Threading.Tasks.xml",
        "ref/portable-net45+win8+wp8+wpa81/_._",
        "ref/win8/_._",
        "ref/wp80/_._",
        "ref/wpa81/_._",
        "ref/xamarinios10/_._",
        "ref/xamarinmac20/_._",
        "ref/xamarintvos10/_._",
        "ref/xamarinwatchos10/_._",
        "system.threading.tasks.4.3.0.nupkg.sha512",
        "system.threading.tasks.nuspec"
      ]
    },
    "System.Threading.Tasks.Extensions/4.3.0": {
      "sha512": "npvJkVKl5rKXrtl1Kkm6OhOUaYGEiF9wFbppFRWSMoApKzt2PiPHT2Bb8a5sAWxprvdOAtvaARS9QYMznEUtug==",
      "type": "package",
      "path": "system.threading.tasks.extensions/4.3.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "ThirdPartyNotices.txt",
        "dotnet_library_license.txt",
        "lib/netstandard1.0/System.Threading.Tasks.Extensions.dll",
        "lib/netstandard1.0/System.Threading.Tasks.Extensions.xml",
        "lib/portable-net45+win8+wp8+wpa81/System.Threading.Tasks.Extensions.dll",
        "lib/portable-net45+win8+wp8+wpa81/System.Threading.Tasks.Extensions.xml",
        "system.threading.tasks.extensions.4.3.0.nupkg.sha512",
        "system.threading.tasks.extensions.nuspec"
      ]
    },
    "System.Threading.Timer/4.3.0": {
      "sha512": "Z6YfyYTCg7lOZjJzBjONJTFKGN9/NIYKSxhU5GRd+DTwHSZyvWp1xuI5aR+dLg+ayyC5Xv57KiY4oJ0tMO89fQ==",
      "type": "package",
      "path": "system.threading.timer/4.3.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "ThirdPartyNotices.txt",
        "dotnet_library_license.txt",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net451/_._",
        "lib/portable-net451+win81+wpa81/_._",
        "lib/win81/_._",
        "lib/wpa81/_._",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "ref/MonoAndroid10/_._",
        "ref/MonoTouch10/_._",
        "ref/net451/_._",
        "ref/netcore50/System.Threading.Timer.dll",
        "ref/netcore50/System.Threading.Timer.xml",
        "ref/netcore50/de/System.Threading.Timer.xml",
        "ref/netcore50/es/System.Threading.Timer.xml",
        "ref/netcore50/fr/System.Threading.Timer.xml",
        "ref/netcore50/it/System.Threading.Timer.xml",
        "ref/netcore50/ja/System.Threading.Timer.xml",
        "ref/netcore50/ko/System.Threading.Timer.xml",
        "ref/netcore50/ru/System.Threading.Timer.xml",
        "ref/netcore50/zh-hans/System.Threading.Timer.xml",
        "ref/netcore50/zh-hant/System.Threading.Timer.xml",
        "ref/netstandard1.2/System.Threading.Timer.dll",
        "ref/netstandard1.2/System.Threading.Timer.xml",
        "ref/netstandard1.2/de/System.Threading.Timer.xml",
        "ref/netstandard1.2/es/System.Threading.Timer.xml",
        "ref/netstandard1.2/fr/System.Threading.Timer.xml",
        "ref/netstandard1.2/it/System.Threading.Timer.xml",
        "ref/netstandard1.2/ja/System.Threading.Timer.xml",
        "ref/netstandard1.2/ko/System.Threading.Timer.xml",
        "ref/netstandard1.2/ru/System.Threading.Timer.xml",
        "ref/netstandard1.2/zh-hans/System.Threading.Timer.xml",
        "ref/netstandard1.2/zh-hant/System.Threading.Timer.xml",
        "ref/portable-net451+win81+wpa81/_._",
        "ref/win81/_._",
        "ref/wpa81/_._",
        "ref/xamarinios10/_._",
        "ref/xamarinmac20/_._",
        "ref/xamarintvos10/_._",
        "ref/xamarinwatchos10/_._",
        "system.threading.timer.4.3.0.nupkg.sha512",
        "system.threading.timer.nuspec"
      ]
    },
    "System.Windows.Extensions/4.7.0": {
      "sha512": "CeWTdRNfRaSh0pm2gDTJFwVaXfTq6Xwv/sA887iwPTneW7oMtMlpvDIO+U60+3GWTB7Aom6oQwv5VZVUhQRdPQ==",
      "type": "package",
      "path": "system.windows.extensions/4.7.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.TXT",
        "THIRD-PARTY-NOTICES.TXT",
        "lib/netcoreapp3.0/System.Windows.Extensions.dll",
        "lib/netcoreapp3.0/System.Windows.Extensions.xml",
        "ref/netcoreapp3.0/System.Windows.Extensions.dll",
        "ref/netcoreapp3.0/System.Windows.Extensions.xml",
        "runtimes/win/lib/netcoreapp3.0/System.Windows.Extensions.dll",
        "runtimes/win/lib/netcoreapp3.0/System.Windows.Extensions.xml",
        "system.windows.extensions.4.7.0.nupkg.sha512",
        "system.windows.extensions.nuspec",
        "useSharedDesignerContext.txt",
        "version.txt"
      ]
    },
    "System.Xml.ReaderWriter/4.3.0": {
      "sha512": "GrprA+Z0RUXaR4N7/eW71j1rgMnEnEVlgii49GZyAjTH7uliMnrOU3HNFBr6fEDBCJCIdlVNq9hHbaDR621XBA==",
      "type": "package",
      "path": "system.xml.readerwriter/4.3.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "ThirdPartyNotices.txt",
        "dotnet_library_license.txt",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net45/_._",
        "lib/net46/System.Xml.ReaderWriter.dll",
        "lib/netcore50/System.Xml.ReaderWriter.dll",
        "lib/netstandard1.3/System.Xml.ReaderWriter.dll",
        "lib/portable-net45+win8+wp8+wpa81/_._",
        "lib/win8/_._",
        "lib/wp80/_._",
        "lib/wpa81/_._",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "ref/MonoAndroid10/_._",
        "ref/MonoTouch10/_._",
        "ref/net45/_._",
        "ref/net46/System.Xml.ReaderWriter.dll",
        "ref/netcore50/System.Xml.ReaderWriter.dll",
        "ref/netcore50/System.Xml.ReaderWriter.xml",
        "ref/netcore50/de/System.Xml.ReaderWriter.xml",
        "ref/netcore50/es/System.Xml.ReaderWriter.xml",
        "ref/netcore50/fr/System.Xml.ReaderWriter.xml",
        "ref/netcore50/it/System.Xml.ReaderWriter.xml",
        "ref/netcore50/ja/System.Xml.ReaderWriter.xml",
        "ref/netcore50/ko/System.Xml.ReaderWriter.xml",
        "ref/netcore50/ru/System.Xml.ReaderWriter.xml",
        "ref/netcore50/zh-hans/System.Xml.ReaderWriter.xml",
        "ref/netcore50/zh-hant/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.0/System.Xml.ReaderWriter.dll",
        "ref/netstandard1.0/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.0/de/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.0/es/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.0/fr/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.0/it/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.0/ja/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.0/ko/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.0/ru/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.0/zh-hans/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.0/zh-hant/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.3/System.Xml.ReaderWriter.dll",
        "ref/netstandard1.3/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.3/de/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.3/es/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.3/fr/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.3/it/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.3/ja/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.3/ko/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.3/ru/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.3/zh-hans/System.Xml.ReaderWriter.xml",
        "ref/netstandard1.3/zh-hant/System.Xml.ReaderWriter.xml",
        "ref/portable-net45+win8+wp8+wpa81/_._",
        "ref/win8/_._",
        "ref/wp80/_._",
        "ref/wpa81/_._",
        "ref/xamarinios10/_._",
        "ref/xamarinmac20/_._",
        "ref/xamarintvos10/_._",
        "ref/xamarinwatchos10/_._",
        "system.xml.readerwriter.4.3.0.nupkg.sha512",
        "system.xml.readerwriter.nuspec"
      ]
    },
    "System.Xml.XDocument/4.3.0": {
      "sha512": "5zJ0XDxAIg8iy+t4aMnQAu0MqVbqyvfoUVl1yDV61xdo3Vth45oA2FoY4pPkxYAH5f8ixpmTqXeEIya95x0aCQ==",
      "type": "package",
      "path": "system.xml.xdocument/4.3.0",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "ThirdPartyNotices.txt",
        "dotnet_library_license.txt",
        "lib/MonoAndroid10/_._",
        "lib/MonoTouch10/_._",
        "lib/net45/_._",
        "lib/netcore50/System.Xml.XDocument.dll",
        "lib/netstandard1.3/System.Xml.XDocument.dll",
        "lib/portable-net45+win8+wp8+wpa81/_._",
        "lib/win8/_._",
        "lib/wp80/_._",
        "lib/wpa81/_._",
        "lib/xamarinios10/_._",
        "lib/xamarinmac20/_._",
        "lib/xamarintvos10/_._",
        "lib/xamarinwatchos10/_._",
        "ref/MonoAndroid10/_._",
        "ref/MonoTouch10/_._",
        "ref/net45/_._",
        "ref/netcore50/System.Xml.XDocument.dll",
        "ref/netcore50/System.Xml.XDocument.xml",
        "ref/netcore50/de/System.Xml.XDocument.xml",
        "ref/netcore50/es/System.Xml.XDocument.xml",
        "ref/netcore50/fr/System.Xml.XDocument.xml",
        "ref/netcore50/it/System.Xml.XDocument.xml",
        "ref/netcore50/ja/System.Xml.XDocument.xml",
        "ref/netcore50/ko/System.Xml.XDocument.xml",
        "ref/netcore50/ru/System.Xml.XDocument.xml",
        "ref/netcore50/zh-hans/System.Xml.XDocument.xml",
        "ref/netcore50/zh-hant/System.Xml.XDocument.xml",
        "ref/netstandard1.0/System.Xml.XDocument.dll",
        "ref/netstandard1.0/System.Xml.XDocument.xml",
        "ref/netstandard1.0/de/System.Xml.XDocument.xml",
        "ref/netstandard1.0/es/System.Xml.XDocument.xml",
        "ref/netstandard1.0/fr/System.Xml.XDocument.xml",
        "ref/netstandard1.0/it/System.Xml.XDocument.xml",
        "ref/netstandard1.0/ja/System.Xml.XDocument.xml",
        "ref/netstandard1.0/ko/System.Xml.XDocument.xml",
        "ref/netstandard1.0/ru/System.Xml.XDocument.xml",
        "ref/netstandard1.0/zh-hans/System.Xml.XDocument.xml",
        "ref/netstandard1.0/zh-hant/System.Xml.XDocument.xml",
        "ref/netstandard1.3/System.Xml.XDocument.dll",
        "ref/netstandard1.3/System.Xml.XDocument.xml",
        "ref/netstandard1.3/de/System.Xml.XDocument.xml",
        "ref/netstandard1.3/es/System.Xml.XDocument.xml",
        "ref/netstandard1.3/fr/System.Xml.XDocument.xml",
        "ref/netstandard1.3/it/System.Xml.XDocument.xml",
        "ref/netstandard1.3/ja/System.Xml.XDocument.xml",
        "ref/netstandard1.3/ko/System.Xml.XDocument.xml",
        "ref/netstandard1.3/ru/System.Xml.XDocument.xml",
        "ref/netstandard1.3/zh-hans/System.Xml.XDocument.xml",
        "ref/netstandard1.3/zh-hant/System.Xml.XDocument.xml",
        "ref/portable-net45+win8+wp8+wpa81/_._",
        "ref/win8/_._",
        "ref/wp80/_._",
        "ref/wpa81/_._",
        "ref/xamarinios10/_._",
        "ref/xamarinmac20/_._",
        "ref/xamarintvos10/_._",
        "ref/xamarinwatchos10/_._",
        "system.xml.xdocument.4.3.0.nupkg.sha512",
        "system.xml.xdocument.nuspec"
      ]
    }
  },
  "projectFileDependencyGroups": {
    "net6.0": [
      "Microsoft.EntityFrameworkCore.SqlServer >= 6.0.7",
      "Microsoft.EntityFrameworkCore.Tools >= 6.0.7",
      "Swagger-Net >= 8.4.12.1",
      "Swashbuckle.AspNetCore >= 6.2.3"
    ]
  },
  "packageFolders": {
    "C:\\Users\\MH\\.nuget\\packages\\": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "F:\\Work\\API Project\\API Project(ASP .Net Core)\\API Project\\API Project.csproj",
      "projectName": "API Project",
      "projectPath": "F:\\Work\\API Project\\API Project(ASP .Net Core)\\API Project\\API Project.csproj",
      "packagesPath": "C:\\Users\\MH\\.nuget\\packages\\",
      "outputPath": "F:\\Work\\API Project\\API Project(ASP .Net Core)\\API Project\\obj\\",
      "projectStyle": "PackageReference",
      "configFilePaths": [
        "C:\\Users\\MH\\AppData\\Roaming\\NuGet\\NuGet.Config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
      ],
      "originalTargetFrameworks": [
        "net6.0"
      ],
      "sources": {
        "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net6.0": {
          "targetAlias": "net6.0",
          "projectReferences": {}
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      }
    },
    "frameworks": {
      "net6.0": {
        "targetAlias": "net6.0",
        "dependencies": {
          "Microsoft.EntityFrameworkCore.SqlServer": {
            "target": "Package",
            "version": "[6.0.7, )"
          },
          "Microsoft.EntityFrameworkCore.Tools": {
            "include": "Runtime, Build, Native, ContentFiles, Analyzers, BuildTransitive",
            "suppressParent": "All",
            "target": "Package",
            "version": "[6.0.7, )"
          },
          "Swagger-Net": {
            "target": "Package",
            "version": "[8.4.12.1, )"
          },
          "Swashbuckle.AspNetCore": {
            "target": "Package",
            "version": "[6.2.3, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.AspNetCore.App": {
            "privateAssets": "none"
          },
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\6.0.400\\RuntimeIdentifierGraph.json"
      }
    }
  },
  "logs": [
    {
      "code": "NU1701",
      "level": "Warning",
      "warningLevel": 1,
      "message": "Package 'FromHeaderAttribute 2.0.4' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net6.0'. This package may not be fully compatible with your project.",
      "libraryId": "FromHeaderAttribute",
      "targetGraphs": [
        "net6.0"
      ]
    },
    {
      "code": "NU1701",
      "level": "Warning",
      "warningLevel": 1,
      "message": "Package 'Microsoft.AspNet.WebApi.Core 5.2.4' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net6.0'. This package may not be fully compatible with your project.",
      "libraryId": "Microsoft.AspNet.WebApi.Core",
      "targetGraphs": [
        "net6.0"
      ]
    },
    {
      "code": "NU1701",
      "level": "Warning",
      "warningLevel": 1,
      "message": "Package 'Microsoft.AspNet.WebApi.WebHost 5.2.4' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net6.0'. This package may not be fully compatible with your project.",
      "libraryId": "Microsoft.AspNet.WebApi.WebHost",
      "targetGraphs": [
        "net6.0"
      ]
    },
    {
      "code": "NU1701",
      "level": "Warning",
      "warningLevel": 1,
      "message": "Package 'Swagger-Net 8.4.12.1' was restored using '.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' instead of the project target framework 'net6.0'. This package may not be fully compatible with your project.",
      "libraryId": "Swagger-Net",
      "targetGraphs": [
        "net6.0"
      ]
    }
  ]
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, callback);
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic(milliseconds, callback) {
      var t1 = new A._TimerImpl(false);
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(0, thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _IterationMarker_yieldStar(values) {
      return new A._IterationMarker(values, 1);
    },
    _IterationMarker_endOfIteration() {
      return B._IterationMarker_null_2;
    },
    _IterationMarker_uncaughtError(error) {
      return new A._IterationMarker(error, 3);
    },
    _makeSyncStarIterable(body, $T) {
      return new A._SyncStarIterable(body, $T._eval$1("_SyncStarIterable<0>"));
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B._StringStackTrace_3uE;
    },
    Future_Future$value(value, $T) {
      var t1, t2;
      $T._as(value);
      t1 = value;
      t2 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t2._asyncComplete$1(t1);
      return t2;
    },
    Future_Future$error(error, stackTrace, $T) {
      var t1, replacement;
      A.checkNotNullable(error, "error", type$.Object);
      t1 = $.Zone__current;
      if (t1 !== B.C__RootZone) {
        replacement = t1.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        }
      }
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Future_wait(futures, $T) {
      var error, stackTrace, handleError, future, pos, e, st, t1, t2, exception, _box_0 = {}, cleanUp = null,
        eagerError = false,
        _future = new A._Future($.Zone__current, $T._eval$1("_Future<List<0>>"));
      _box_0.values = null;
      _box_0.remaining = 0;
      error = A._Cell$named("error");
      stackTrace = A._Cell$named("stackTrace");
      handleError = new A.Future_wait_handleError(_box_0, cleanUp, eagerError, _future, error, stackTrace);
      try {
        for (t1 = J.get$iterator$ax(futures), t2 = type$.Null; t1.moveNext$0();) {
          future = t1.get$current(t1);
          pos = _box_0.remaining;
          J.then$1$2$onError$x(future, new A.Future_wait_closure(_box_0, pos, _future, cleanUp, eagerError, error, stackTrace, $T), handleError, t2);
          ++_box_0.remaining;
        }
        t1 = _box_0.remaining;
        if (t1 === 0) {
          t1 = _future;
          t1._completeWithValue$1(A._setArrayType([], $T._eval$1("JSArray<0>")));
          return t1;
        }
        _box_0.values = A.List_List$filled(t1, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        if (_box_0.remaining === 0 || eagerError)
          return A.Future_Future$error(e, st, $T._eval$1("List<0>"));
        else {
          error._value = e;
          stackTrace._value = st;
        }
      }
      return _future;
    },
    _Future$zoneValue(value, _zone, $T) {
      var t1 = new A._Future(_zone, $T._eval$1("_Future<0>"));
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainCoreFuture(source, target) {
      var t1, listeners;
      for (; t1 = source._state, (t1 & 4) !== 0;)
        source = source._resultOrListeners;
      if ((t1 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = target._resultOrListeners;
        target._state = target._state & 1 | 4;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, _box_0, t3, t4, hasError, nextListener, nextListener0, sourceResult, t5, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t3 = t1._state;
        t4 = (t3 & 16) === 0;
        hasError = !t4;
        if (listeners == null) {
          if (hasError && (t3 & 1) === 0) {
            t2 = t1._resultOrListeners;
            t1._zone.handleUncaughtError$2(t2.error, t2.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t3 = _box_1.source;
        sourceResult = t3._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t4) {
          t5 = t1.state;
          t5 = (t5 & 1) !== 0 || (t5 & 15) === 8;
        } else
          t5 = true;
        if (t5) {
          zone = t1.result._zone;
          if (hasError) {
            t1 = t3._zone;
            t1 = !(t1 === zone || t1.get$errorZone() === zone.get$errorZone());
          } else
            t1 = false;
          if (t1) {
            t1 = _box_1.source;
            t2 = t1._resultOrListeners;
            t1._zone.handleUncaughtError$2(t2.error, t2.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = _box_0.listener.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t4) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t2._is(t1)) {
            t3 = _box_0.listener.$ti;
            t3 = t3._eval$1("Future<2>")._is(t1) || !t3._rest[1]._is(t1);
          } else
            t3 = false;
          if (t3) {
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = result._resultOrListeners;
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = result._resultOrListeners;
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t3 = _box_0.listenerValueOrError;
        if (!t1) {
          result._state = 8;
          result._resultOrListeners = t3;
        } else {
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t3;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      if (B.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = B.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
    },
    Stream_Stream$fromFuture(future, $T) {
      var _null = null,
        t1 = $T._eval$1("_SyncStreamController<0>"),
        controller = new A._SyncStreamController(_null, _null, _null, _null, t1);
      future.then$1$2$onError(0, new A.Stream_Stream$fromFuture_closure(controller, $T), new A.Stream_Stream$fromFuture_closure0(controller), type$.Null);
      return new A._ControllerStream(controller, t1._eval$1("_ControllerStream<1>"));
    },
    StreamIterator_StreamIterator(stream) {
      return new A._StreamIterator(A.checkNotNullable(stream, "stream", type$.Object));
    },
    StreamController_StreamController(onCancel, onListen, onPause, onResume, sync, $T) {
      return sync ? new A._SyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_SyncStreamController<0>")) : new A._AsyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current.handleUncaughtError$2(e, s);
      }
    },
    _ControllerSubscription$(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0,
        t3 = A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T),
        t4 = A._BufferingStreamSubscription__registerErrorHandler(t1, onError),
        t5 = onDone == null ? A.async___nullDoneHandler$closure() : onDone;
      return new A._ControllerSubscription(_controller, t3, t4, t1.registerCallback$1$1(t5, type$.void), t1, t2, $T._eval$1("_ControllerSubscription<0>"));
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return zone.registerUnaryCallback$2$1(t1, type$.void, $T);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return zone.registerUnaryCallback$2$1(handleError, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.", null));
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      $.Zone__current.handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler() {
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return t1.createTimer$2(duration, callback);
      return t1.createTimer$2(duration, t1.bindCallbackGuarded$1(callback));
    },
    _rootHandleUncaughtError($self, $parent, zone, error, stackTrace) {
      A._rootHandleError(error, stackTrace);
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRegisterCallback($self, $parent, zone, f) {
      return f;
    },
    _rootRegisterUnaryCallback($self, $parent, zone, f) {
      return f;
    },
    _rootRegisterBinaryCallback($self, $parent, zone, f) {
      return f;
    },
    _rootErrorCallback($self, $parent, zone, error, stackTrace) {
      return null;
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      var t1, t2;
      if (B.C__RootZone !== zone) {
        t1 = B.C__RootZone.get$errorZone();
        t2 = zone.get$errorZone();
        f = t1 !== t2 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      }
      A._scheduleAsyncCallback(f);
    },
    _rootCreateTimer($self, $parent, zone, duration, callback) {
      return A.Timer__createTimer(duration, B.C__RootZone !== zone ? zone.bindCallback$1$1(callback, type$.void) : callback);
    },
    _rootCreatePeriodicTimer($self, $parent, zone, duration, callback) {
      var milliseconds;
      if (B.C__RootZone !== zone)
        callback = zone.bindUnaryCallback$2$1(callback, type$.void, type$.Timer);
      milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _rootPrint($self, $parent, zone, line) {
      A.printString(line);
    },
    _printToZone(line) {
      $.Zone__current.print$1(line);
    },
    _rootFork($self, $parent, zone, specification, zoneValues) {
      var valueMap, t1, handleUncaughtError;
      $.printToZone = A.async___printToZone$closure();
      if (specification == null)
        specification = B._ZoneSpecification_ALf;
      if (zoneValues == null)
        valueMap = zone.get$_async$_map();
      else {
        t1 = type$.nullable_Object;
        valueMap = A.HashMap_HashMap$from(zoneValues, t1, t1);
      }
      t1 = new A._CustomZone(zone.get$_run(), zone.get$_runUnary(), zone.get$_runBinary(), zone.get$_registerCallback(), zone.get$_registerUnaryCallback(), zone.get$_registerBinaryCallback(), zone.get$_errorCallback(), zone.get$_scheduleMicrotask(), zone.get$_createTimer(), zone.get$_createPeriodicTimer(), zone.get$_print(), zone.get$_fork(), zone.get$_handleUncaughtError(), zone, valueMap);
      handleUncaughtError = specification.handleUncaughtError;
      if (handleUncaughtError != null)
        t1._handleUncaughtError = new A._ZoneFunction(t1, handleUncaughtError);
      return t1;
    },
    runZoned(body, zoneValues, $R) {
      A.checkNotNullable(body, "body", $R._eval$1("0()"));
      return A._runZoned(body, zoneValues, null, $R);
    },
    _runZoned(body, zoneValues, specification, $R) {
      return $.Zone__current.fork$2$specification$zoneValues(specification, zoneValues).run$1$1(0, body, $R);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._async$_current = null;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
      _.error = t4;
      _.stackTrace = t5;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.cleanUp = t3;
      _.eagerError = t4;
      _.error = t5;
      _.stackTrace = t6;
      _.T = t7;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_Stream$fromFuture_closure: function Stream_Stream$fromFuture_closure(t0, t1) {
      this.controller = t0;
      this.T = t1;
    },
    Stream_Stream$fromFuture_closure0: function Stream_Stream$fromFuture_closure0(t0) {
      this.controller = t0;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _AddStreamState: function _AddStreamState() {
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _StreamControllerAddStreamState: function _StreamControllerAddStreamState(t0, t1, t2) {
      this.varData = t0;
      this.addStreamFuture = t1;
      this.addSubscription = t2;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0) {
      this.value = t0;
      this.next = null;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamImplEvents: function _StreamImplEvents() {
      this.lastPendingEvent = this.firstPendingEvent = null;
      this._state = 0;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this._subscription = null;
      this._stateData = t0;
      this._async$_hasValue = false;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._stream = t0;
      _._subscription = null;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _ExpandStream: function _ExpandStream(t0, t1, t2) {
      this._expand = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RunNullaryZoneFunction: function _RunNullaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RunUnaryZoneFunction: function _RunUnaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RunBinaryZoneFunction: function _RunBinaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RegisterNullaryZoneFunction: function _RegisterNullaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RegisterUnaryZoneFunction: function _RegisterUnaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RegisterBinaryZoneFunction: function _RegisterBinaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _ZoneSpecification: function _ZoneSpecification(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.handleUncaughtError = t0;
      _.run = t1;
      _.runUnary = t2;
      _.runBinary = t3;
      _.registerCallback = t4;
      _.registerUnaryCallback = t5;
      _.registerBinaryCallback = t6;
      _.errorCallback = t7;
      _.scheduleMicrotask = t8;
      _.createTimer = t9;
      _.createPeriodicTimer = t10;
      _.print = t11;
      _.fork = t12;
    },
    _ZoneDelegate: function _ZoneDelegate(t0) {
      this._delegationTarget = t0;
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._run = t0;
      _._runUnary = t1;
      _._runBinary = t2;
      _._registerCallback = t3;
      _._registerUnaryCallback = t4;
      _._registerBinaryCallback = t5;
      _._errorCallback = t6;
      _._scheduleMicrotask = t7;
      _._createTimer = t8;
      _._createPeriodicTimer = t9;
      _._print = t10;
      _._fork = t11;
      _._handleUncaughtError = t12;
      _._delegateCache = null;
      _.parent = t13;
      _._async$_map = t14;
    },
    _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.R = t2;
    },
    _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.registered = t1;
      _.T = t2;
      _.R = t3;
    },
    _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.registered = t1;
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindUnaryCallback_closure: function _RootZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.T = t2;
      _.R = t3;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    HashMap_HashMap($K, $V) {
      return new A._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap(equals, hashCode, isValidKey, $K, $V) {
      if (isValidKey == null)
        if (hashCode == null) {
          if (equals == null)
            return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
          hashCode = A.collection___defaultHashCode$closure();
        } else {
          if (A.core__identityHashCode$closure() === hashCode && A.core__identical$closure() === equals)
            return new A._LinkedIdentityHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedIdentityHashMap<1,2>"));
          if (equals == null)
            equals = A.collection___defaultEquals$closure();
        }
      else {
        if (hashCode == null)
          hashCode = A.collection___defaultHashCode$closure();
        if (equals == null)
          equals = A.collection___defaultEquals$closure();
      }
      return A._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>")));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new A._LinkedCustomHashMap_closure($K);
      return new A._LinkedCustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal(values, $E) {
      return A.fillLiteralSet(values, new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>")));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications);
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    UnmodifiableListView$(source, $E) {
      return new A.UnmodifiableListView(source, $E._eval$1("UnmodifiableListView<0>"));
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    HashMap_HashMap$from(other, $K, $V) {
      var result = A.HashMap_HashMap($K, $V);
      other.forEach$1(0, new A.HashMap_HashMap$from_closure(result, $K, $V));
      return result;
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      $._toStringVisiting.push(iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        $._toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      $._toStringVisiting.push(iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current(it));
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        ultimateString = parts.pop();
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1, _i,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, $E._as(elements[_i]));
      return result;
    },
    LinkedHashSet_LinkedHashSet$of(elements, $E) {
      var t1 = A.LinkedHashSet_LinkedHashSet($E);
      t1.addAll$1(0, elements);
      return t1;
    },
    ListMixin__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A._isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        $._toStringVisiting.push(m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__fillMapWithIterables(map, keys, values) {
      var keyIterator = keys.get$iterator(keys),
        valueIterator = values.get$iterator(values),
        hasNextKey = keyIterator.moveNext$0(),
        hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.get$current(keyIterator), valueIterator.get$current(valueIterator));
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw A.wrapException(A.ArgumentError$("Iterables do not have same length.", null));
    },
    ListQueue$($E) {
      return new A.ListQueue(A.List_List$filled(A.ListQueue__calculateCapacity(null), null, false, $E._eval$1("0?")), $E._eval$1("ListQueue<0>"));
    },
    ListQueue__calculateCapacity(initialCapacity) {
      return 8;
    },
    ListQueue_ListQueue$of(elements, $E) {
      var t1 = A.ListQueue$($E);
      t1.addAll$1(0, elements);
      return t1;
    },
    ListQueue__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    _ListQueueIterator$(queue) {
      return new A._ListQueueIterator(queue, queue._collection$_tail, queue._modificationCount, queue._collection$_head);
    },
    _UnmodifiableSetMixin__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot change an unmodifiable set"));
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _HashMap_addAll_closure: function _HashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1) {
      var _ = this;
      _._map = t0;
      _._keys = t1;
      _._offset = 0;
      _._collection$_current = null;
    },
    _LinkedIdentityHashMap: function _LinkedIdentityHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedIdentityHashSet: function _LinkedIdentityHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
    },
    UnmodifiableListView: function UnmodifiableListView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    IterableBase: function IterableBase() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    MapMixin_addAll_closure: function MapMixin_addAll_closure(t0) {
      this.$this = t0;
    },
    MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
      this.$this = t0;
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1) {
      this._keys = t0;
      this._map = t1;
      this._collection$_current = null;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0, t1) {
      var _ = this;
      _._collection$_table = t0;
      _._modificationCount = _._collection$_tail = _._collection$_head = 0;
      _.$ti = t1;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3) {
      var _ = this;
      _._queue = t0;
      _._collection$_end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
    },
    SetMixin: function SetMixin() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSetMixin: function _UnmodifiableSetMixin() {
    },
    _UnmodifiableSet: function _UnmodifiableSet(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    __SetBase_Object_SetMixin: function __SetBase_Object_SetMixin() {
    },
    __UnmodifiableSet__SetBase__UnmodifiableSetMixin: function __UnmodifiableSet__SetBase__UnmodifiableSetMixin() {
    },
    Utf8Decoder__convertIntercepted(allowMalformed, codeUnits, start, end) {
      var casted, result;
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        end = casted.length;
        if (end - start < 15)
          return null;
        result = A.Utf8Decoder__convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && allowMalformed)
          if (result.indexOf("\ufffd") >= 0)
            return null;
        return result;
      }
      return null;
    },
    Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$Utf8Decoder__decoderNonfatal() : $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A.Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A.Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, A.RangeError_checkValidRange(start, end, codeUnits.length)));
    },
    Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, i, byteOr, byte, outputIndex0, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = J.getInterceptor$asx(bytes), i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          output[outputIndex] = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 18 & 63);
          outputIndex = outputIndex0 + 1;
          output[outputIndex0] = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 12 & 63);
          outputIndex0 = outputIndex + 1;
          output[outputIndex] = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 6 & 63);
          outputIndex = outputIndex0 + 1;
          output[outputIndex0] = B.JSString_methods._codeUnitAt$1(alphabet, bits & 63);
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            output[outputIndex] = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 2 & 63);
            output[outputIndex0] = B.JSString_methods._codeUnitAt$1(alphabet, bits << 4 & 63);
            output[outputIndex1] = 61;
            output[outputIndex1 + 1] = 61;
          } else {
            output[outputIndex] = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 10 & 63);
            output[outputIndex0] = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 4 & 63);
            output[outputIndex1] = B.JSString_methods._codeUnitAt$1(alphabet, bits << 2 & 63);
            output[outputIndex1 + 1] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + J.toRadixString$1$n(t1.$index(bytes, i), 16), null));
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      return new A._JsonStringStringifier(_sink, [], A.convert___defaultToEncodable$closure());
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var t1,
        output = new A.StringBuffer(""),
        stringifier = A._JsonStringStringifier$(output, toEncodable);
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__makeUint8List(codeUnits, start, end) {
      var t1, i, b,
        $length = end - start,
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        bytes[i] = (b & 4294967040) >>> 0 !== 0 ? 255 : b;
      }
      return bytes;
    },
    Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {
    },
    Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    _Base64EncoderSink: function _Base64EncoderSink() {
    },
    _Utf8Base64EncoderSink: function _Utf8Base64EncoderSink(t0, t1) {
      this._sink = t0;
      this._encoder = t1;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    ByteConversionSinkBase: function ByteConversionSinkBase() {
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    StringConversionSinkBase: function StringConversionSinkBase() {
    },
    StringConversionSinkMixin: function StringConversionSinkMixin() {
    },
    _StringSinkConversionSink: function _StringSinkConversionSink(t0) {
      this._stringSink = t0;
    },
    _StringCallbackSink: function _StringCallbackSink(t0, t1) {
      this._convert$_callback = t0;
      this._stringSink = t1;
    },
    _Utf8StringSinkAdapter: function _Utf8StringSinkAdapter(t0, t1, t2) {
      this._decoder = t0;
      this._sink = t1;
      this._stringSink = t2;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._convert$_buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    identityHashCode(object) {
      return A.objectHashCode(object);
    },
    Function_apply($function, positionalArguments) {
      return A.Primitives_applyFunction($function, positionalArguments, null);
    },
    Expando$() {
      return new A.Expando(new WeakMap());
    },
    Expando__checkType(object) {
      var t1 = A._isBool(object) || typeof object == "number" || typeof object == "string";
      if (t1)
        throw A.wrapException(A.ArgumentError$value(object, string$.Expand, null));
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    double_parse(source) {
      var value = A.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$("Invalid double", source, null));
    },
    Error__objectToString(object) {
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current(t1));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(A.List_List$_of(elements, $E));
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current(t1));
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      return J.JSArray_markUnmodifiableList(A.List_List$from(elements, false, $E));
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var array, len;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = A.RangeError_checkValidRange(start, end, len);
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.Primitives_stringFromNativeUint8List(charCodes, start, A.RangeError_checkValidRange(start, end, charCodes.length));
      return A.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode(charCode) {
      return A.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromIterable(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw A.wrapException(A.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw A.wrapException(A.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw A.wrapException(A.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current(it));
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw A.wrapException(A.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current(it));
        }
      return A.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp(source, multiLine) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, multiLine, true, false, false, false));
    },
    identical(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current(iterator));
      }
      return string;
    },
    NoSuchMethodError$(receiver, memberName, positionalArguments, namedArguments) {
      return new A.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    Uri_base() {
      var uri = A.Primitives_currentUri();
      if (uri != null)
        return A.Uri_parse(uri);
      throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = encoding.get$encoder().convert$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128 && (canonicalTable[byte >>> 4] & 1 << (byte & 15)) !== 0)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current() {
      var stackTrace, exception;
      if ($.$get$_hasErrorStackProperty())
        return A.getTraceFromException(new Error());
      try {
        throw A.wrapException("");
      } catch (exception) {
        stackTrace = A.getTraceFromException(exception);
        return stackTrace;
      }
    },
    DateTime$_withValue(_value, isUtc) {
      var t1;
      if (Math.abs(_value) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + _value, null));
      A.checkNotNullable(false, "isUtc", type$.bool);
      return new A.DateTime(_value, false);
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$(milliseconds) {
      return new A.Duration(1000 * milliseconds);
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Error__objectToString(object);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name) {
      return argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name, message) {
      return new A.RangeError(null, null, true, value, $name, message == null ? "Value not in range" : message);
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, message == null ? "Invalid value" : message);
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidIndex(index, indexable, $name) {
      var $length = indexable.get$length(indexable);
      if (0 > index || index >= $length)
        throw A.wrapException(A.IndexError$(index, indexable, $name == null ? "index" : $name, null, $length));
      return index;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$(invalidValue, indexable, $name, message, $length) {
      var t1 = $length == null ? J.get$length$asx(indexable) : $length;
      return new A.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_Iterable$generate(count, generator, $E) {
      if (count <= 0)
        return new A.EmptyIterable($E._eval$1("EmptyIterable<0>"));
      return new A._GeneratorIterable(count, generator, $E._eval$1("_GeneratorIterable<0>"));
    },
    Map_castFrom(source, $K, $V, K2, V2) {
      return new A.CastMap(source, $K._eval$1("@<0>")._bind$1($V)._bind$1(K2)._bind$1(V2)._eval$1("CastMap<1,2,3,4>"));
    },
    Object_hash(object1, object2, object3) {
      var t1, t2;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      t2 = $.$get$_hashSeed();
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(t2, t1), object2), object3));
    },
    print(object) {
      var line = A.S(object),
        toZone = $.printToZone;
      if (toZone == null)
        A.printString(line);
      else
        toZone.call$1(line);
    },
    Set_castFrom(source, newSet, $S, $T) {
      return new A.CastSet(source, newSet, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastSet<1,2>"));
    },
    _combineSurrogatePair(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Uri_Uri$dataFromString($content, encoding, mimeType) {
      var encodingName, t1,
        buffer = new A.StringBuffer(""),
        indices = A._setArrayType([-1], type$.JSArray_int);
      if (encoding == null)
        encodingName = null;
      else
        encodingName = "utf-8";
      if (encoding == null)
        encoding = B.C_AsciiCodec;
      A.UriData__writeUri(mimeType, encodingName, null, buffer, indices);
      indices.push(buffer._contents.length);
      buffer._contents += ",";
      A.UriData__uriEncodeBytes(B.List_CVk, encoding.encode$1($content), buffer);
      t1 = buffer._contents;
      return new A.UriData(t1.charCodeAt(0) == 0 ? t1 : t1, indices, null).get$uri();
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, userInfoStart, userInfo, host, portNumber, port, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        delta = ((B.JSString_methods._codeUnitAt$1(uri, 4) ^ 58) * 3 | B.JSString_methods._codeUnitAt$1(uri, 0) ^ 100 | B.JSString_methods._codeUnitAt$1(uri, 1) ^ 97 | B.JSString_methods._codeUnitAt$1(uri, 2) ^ 116 | B.JSString_methods._codeUnitAt$1(uri, 3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      indices[0] = 0;
      indices[1] = -1;
      indices[2] = -1;
      indices[7] = -1;
      indices[3] = 0;
      indices[4] = 0;
      indices[5] = end;
      indices[6] = end;
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        indices[7] = end;
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
              t2 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (B.JSString_methods.startsWith$2(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    ++fragmentStart;
                    queryStart0 = queryStart + 1;
                    uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (B.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    fragmentStart -= 3;
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && B.JSString_methods.startsWith$2(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                  fragmentStart -= 4;
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (end < uri.length) {
          uri = B.JSString_methods.substring$2(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new A._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = A._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            A._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        } else
          port = _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, wildCardLength, index, value, j, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (B.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            parts.push(-1);
            wildcardSeen = true;
          } else
            parts.push(parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          parts.push(parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          parts.push((last[0] << 8 | last[1]) >>> 0);
          parts.push((last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            bytes[index] = 0;
            bytes[index + 1] = 0;
            index += 2;
          }
        else {
          bytes[index] = B.JSInt_methods._shrOtherPositive$1(value, 8);
          bytes[index + 1] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri(host, path, pathSegments, scheme) {
      var userInfo, query, fragment, port, isFile, t1, hasAuthority, t2, _null = null;
      scheme = scheme == null ? "" : A._Uri__makeScheme(scheme, 0, scheme.length);
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      query = A._Uri__makeQuery(_null, 0, 0, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(path, 0, path == null ? 0 : path.length, pathSegments, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal(scheme, userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__Uri$file(path, windows) {
      return windows ? A._Uri__makeWindowsFileUrl(path, false) : A._Uri__makeFileUri(path, false);
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment, t2, t3;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        t2 = J.getInterceptor$asx(segment);
        t3 = t2.get$length(segment);
        if (0 > t3)
          A.throwExpression(A.RangeError$range(0, 0, t2.get$length(segment), null, null));
        if (A.stringContainsUnchecked(segment, "/", 0)) {
          t1 = A.UnsupportedError$("Illegal path character " + A.S(segment));
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
      var t1, t2, t3, t4;
      for (t1 = A.SubListIterable$(segments, firstSegment, null, A._arrayInstanceType(segments)._precomputed1), t1 = new A.ListIterator(t1, t1.get$length(t1)), t2 = A._instanceType(t1)._precomputed1; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        t4 = A.RegExp_RegExp('["*/:<>?\\\\|]', false);
        if (A.stringContainsUnchecked(t3, t4, 0))
          if (argumentError)
            throw A.wrapException(A.ArgumentError$("Illegal character in path", null));
          else
            throw A.wrapException(A.UnsupportedError$("Illegal character in path: " + t3));
      }
    },
    _Uri__checkWindowsDriveLetter(charCode, argumentError) {
      var t1,
        _s21_ = "Illegal drive letter ";
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      if (argumentError)
        throw A.wrapException(A.ArgumentError$(_s21_ + A.String_String$fromCharCode(charCode), null));
      else
        throw A.wrapException(A.UnsupportedError$(_s21_ + A.String_String$fromCharCode(charCode)));
    },
    _Uri__makeFileUri(path, slashTerminated) {
      var _null = null,
        segments = A._setArrayType(path.split("/"), type$.JSArray_String);
      if (B.JSString_methods.startsWith$1(path, "/"))
        return A._Uri__Uri(_null, _null, segments, "file");
      else
        return A._Uri__Uri(_null, _null, segments, _null);
    },
    _Uri__makeWindowsFileUrl(path, slashTerminated) {
      var t1, pathSegments, pathStart, hostPart, _s1_ = "\\", _null = null, _s4_ = "file";
      if (B.JSString_methods.startsWith$1(path, "\\\\?\\"))
        if (B.JSString_methods.startsWith$2(path, "UNC\\", 4))
          path = B.JSString_methods.replaceRange$3(path, 0, 7, _s1_);
        else {
          path = B.JSString_methods.substring$1(path, 4);
          if (path.length < 3 || B.JSString_methods._codeUnitAt$1(path, 1) !== 58 || B.JSString_methods._codeUnitAt$1(path, 2) !== 92)
            throw A.wrapException(A.ArgumentError$("Windows paths with \\\\?\\ prefix must be absolute", _null));
        }
      else
        path = A.stringReplaceAllUnchecked(path, "/", _s1_);
      t1 = path.length;
      if (t1 > 1 && B.JSString_methods._codeUnitAt$1(path, 1) === 58) {
        A._Uri__checkWindowsDriveLetter(B.JSString_methods._codeUnitAt$1(path, 0), true);
        if (t1 === 2 || B.JSString_methods._codeUnitAt$1(path, 2) !== 92)
          throw A.wrapException(A.ArgumentError$("Windows paths with drive letter must be absolute", _null));
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 1);
        return A._Uri__Uri(_null, _null, pathSegments, _s4_);
      }
      if (B.JSString_methods.startsWith$1(path, _s1_))
        if (B.JSString_methods.startsWith$2(path, _s1_, 1)) {
          pathStart = B.JSString_methods.indexOf$2(path, _s1_, 2);
          t1 = pathStart < 0;
          hostPart = t1 ? B.JSString_methods.substring$1(path, 2) : B.JSString_methods.substring$2(path, 2, pathStart);
          pathSegments = A._setArrayType((t1 ? "" : B.JSString_methods.substring$1(path, pathStart + 1)).split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(hostPart, _null, pathSegments, _s4_);
        } else {
          pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(_null, _null, pathSegments, _s4_);
        }
      else {
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
        return A._Uri__Uri(_null, _null, pathSegments, _null);
      }
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      if (B.JSString_methods.codeUnitAt$1(host, start) === 91) {
        t1 = end - 1;
        if (B.JSString_methods.codeUnitAt$1(host, t1) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t2 = start + 1;
        index = A._Uri__checkZoneID(host, t2, t1);
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t2, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i)
        if (B.JSString_methods.codeUnitAt$1(host, i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var index, sectionStart, isNormalized, char, replacement, t1, t2, tail, sourceLength, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (index = start, sectionStart = index, isNormalized = true; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t2 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t1)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t2 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (B.List_nxB[char >>> 4] & 1 << (char & 15)) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else {
          if ((char & 64512) === 55296 && index + 1 < end) {
            tail = B.JSString_methods.codeUnitAt$1(host, index + 1);
            if ((tail & 64512) === 56320) {
              char = (char & 1023) << 10 | tail & 1023 | 65536;
              sourceLength = 2;
            } else
              sourceLength = 1;
          } else
            sourceLength = 1;
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t1 = buffer;
          } else
            t1 = buffer;
          t1._contents += slice;
          t1._contents += A._Uri__escapeChar(char);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(host, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      for (index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (B.List_qNA[char >>> 4] & 1 << (char & 15)) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else if (char <= 93 && (B.List_2Vk[char >>> 4] & 1 << (char & 15)) !== 0)
          A._Uri__fail(host, index, "Invalid character");
        else {
          if ((char & 64512) === 55296 && index + 1 < end) {
            tail = B.JSString_methods.codeUnitAt$1(host, index + 1);
            if ((tail & 64512) === 56320) {
              char = (char & 1023) << 10 | tail & 1023 | 65536;
              sourceLength = 2;
            } else
              sourceLength = 1;
          } else
            sourceLength = 1;
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t1 = buffer;
          } else
            t1 = buffer;
          t1._contents += slice;
          t1._contents += A._Uri__escapeChar(char);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var i, containsUpperCase, codeUnit;
      if (start === end)
        return "";
      if (!A._Uri__isAlphabeticCharacter(B.JSString_methods._codeUnitAt$1(scheme, start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(scheme, i);
        if (!(codeUnit < 128 && (B.List_JYB[codeUnit >>> 4] & 1 << (codeUnit & 15)) !== 0))
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, B.List_gRj, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        result = new A.MappedListIterable(pathSegments, new A._Uri__makePath_closure(), A._arrayInstanceType(pathSegments)._eval$1("MappedListIterable<1,String>")).join$1(0, "/");
      } else if (pathSegments != null)
        throw A.wrapException(A.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, B.List_qg4, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null)
        return A._Uri__normalizeOrSubstring(query, start, end, B.List_CVk, true);
      return null;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, B.List_CVk, true);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = B.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = B.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127 && (B.List_nxB[B.JSInt_methods._shrOtherPositive$1(value, 4)] & 1 << (value & 15)) !== 0)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        codeUnits[1] = B.JSString_methods._codeUnitAt$1(_s16_, char >>> 4);
        codeUnits[2] = B.JSString_methods._codeUnitAt$1(_s16_, char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        codeUnits = new Uint8Array(3 * encodedBytes);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          codeUnits[index] = 37;
          codeUnits[index + 1] = B.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4);
          codeUnits[index + 2] = B.JSString_methods._codeUnitAt$1(_s16_, byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters) {
      var t1 = A._Uri__normalize(component, start, end, charTable, escapeDelimiters);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters) {
      var t1, index, sectionStart, buffer, char, replacement, sourceLength, t2, tail, t3, _null = null;
      for (t1 = !escapeDelimiters, index = start, sectionStart = index, buffer = _null; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(component, index);
        if (char < 127 && (charTable[char >>> 4] & 1 << (char & 15)) !== 0)
          ++index;
        else {
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement) {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
          } else if (t1 && char <= 93 && (B.List_2Vk[char >>> 4] & 1 << (char & 15)) !== 0) {
            A._Uri__fail(component, index, "Invalid character");
            sourceLength = _null;
            replacement = sourceLength;
          } else {
            if ((char & 64512) === 55296) {
              t2 = index + 1;
              if (t2 < end) {
                tail = B.JSString_methods.codeUnitAt$1(component, t2);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            replacement = A._Uri__escapeChar(char);
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t3 = t2._contents += B.JSString_methods.substring$2(component, sectionStart, index);
          t2._contents = t3 + A.S(replacement);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          if (output.length !== 0) {
            output.pop();
            if (output.length === 0)
              output.push("");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          output.push(segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        output.push("");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && B.JSArray_methods.get$last(output) !== "..") {
            output.pop();
            appendSlash = true;
          } else {
            output.push("..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          output.push(segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        t1 = t1 === 1 && output[0].length === 0;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        output.push("");
      if (!allowScheme)
        output[0] = A._Uri__escapeScheme(output[0]);
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(B.JSString_methods._codeUnitAt$1(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = B.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char > 127 || (B.List_JYB[char >>> 4] & 1 << (char & 15)) === 0)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__toWindowsFilePath(uri) {
      var hasDriveLetter, t2, host,
        segments = uri.get$pathSegments(),
        t1 = segments.length;
      if (t1 > 0 && J.get$length$asx(segments[0]) === 2 && J.codeUnitAt$1$s(segments[0], 1) === 58) {
        A._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(segments[0], 0), false);
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "" + "\\" : "";
      if (uri.get$hasAuthority()) {
        host = uri.get$host();
        if (host.length !== 0)
          t2 = t2 + "\\" + host + "\\";
      }
      t2 = A.StringBuffer__writeAll(t2, segments, "\\");
      t1 = hasDriveLetter && t1 === 1 ? t2 + "\\" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var byte, i, charCode;
      for (byte = 0, i = 0; i < 2; ++i) {
        charCode = B.JSString_methods._codeUnitAt$1(s, pos + i);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t1, bytes,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = B.JSString_methods._codeUnitAt$1(text, i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t1 = false;
          else
            t1 = true;
        else
          t1 = true;
        if (t1) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple) {
        if (B.C_Utf8Codec !== encoding)
          t1 = false;
        else
          t1 = true;
        if (t1)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      } else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (t1 = text.length, i = start; i < end; ++i) {
          codeUnit = B.JSString_methods._codeUnitAt$1(text, i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            bytes.push(A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else
            bytes.push(codeUnit);
        }
      }
      return B.Utf8Decoder_false.convert$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__writeUri(mimeType, charsetName, parameters, buffer, indices) {
      var t1, slashIndex;
      if (mimeType != null)
        t1 = 10 === mimeType.length && A._caseInsensitiveCompareStart("text/plain", mimeType, 0) >= 0;
      else
        t1 = true;
      if (t1)
        mimeType = "";
      if (mimeType.length === 0 || mimeType === "application/octet-stream")
        t1 = buffer._contents += mimeType;
      else {
        slashIndex = A.UriData__validateMimeType(mimeType);
        if (slashIndex < 0)
          throw A.wrapException(A.ArgumentError$value(mimeType, "mimeType", "Invalid MIME type"));
        t1 = buffer._contents += A._Uri__uriEncode(B.List_qFt, B.JSString_methods.substring$2(mimeType, 0, slashIndex), B.C_Utf8Codec, false);
        buffer._contents = t1 + "/";
        t1 = buffer._contents += A._Uri__uriEncode(B.List_qFt, B.JSString_methods.substring$1(mimeType, slashIndex + 1), B.C_Utf8Codec, false);
      }
      if (charsetName != null) {
        indices.push(t1.length);
        indices.push(buffer._contents.length + 8);
        buffer._contents += ";charset=";
        buffer._contents += A._Uri__uriEncode(B.List_qFt, charsetName, B.C_Utf8Codec, false);
      }
    },
    UriData__validateMimeType(mimeType) {
      var t1, slashIndex, i;
      for (t1 = mimeType.length, slashIndex = -1, i = 0; i < t1; ++i) {
        if (B.JSString_methods._codeUnitAt$1(mimeType, i) !== 47)
          continue;
        if (slashIndex < 0) {
          slashIndex = i;
          continue;
        }
        return -1;
      }
      return slashIndex;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = B.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        indices.push(i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = B.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          indices.push(equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      indices.push(i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.C_Base64Codec.normalize$3(text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, B.List_CVk, true);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    UriData__uriEncodeBytes(canonicalTable, bytes, buffer) {
      var t1, byteOr, i, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      for (t1 = J.getInterceptor$asx(bytes), byteOr = 0, i = 0; i < t1.get$length(bytes); ++i) {
        byte = t1.$index(bytes, i);
        byteOr |= byte;
        t2 = byte < 128 && (canonicalTable[B.JSInt_methods._shrOtherPositive$1(byte, 4)] & 1 << (byte & 15)) !== 0;
        t3 = buffer._contents;
        if (t2)
          buffer._contents = t3 + A.Primitives_stringFromCharCode(byte);
        else {
          t2 = t3 + A.Primitives_stringFromCharCode(37);
          buffer._contents = t2;
          t2 += A.Primitives_stringFromCharCode(B.JSString_methods._codeUnitAt$1(_s16_, B.JSInt_methods._shrOtherPositive$1(byte, 4)));
          buffer._contents = t2;
          buffer._contents = t2 + A.Primitives_stringFromCharCode(B.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
        }
      }
      if ((byteOr & 4294967040) >>> 0 !== 0)
        for (i = 0; i < t1.get$length(bytes); ++i) {
          byte = t1.$index(bytes, i);
          if (byte < 0 || byte > 255)
            throw A.wrapException(A.ArgumentError$value(byte, "non-byte value", null));
        }
    },
    _createTables() {
      var _i, t1, t2, t3, b,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        tables = J.JSArray_JSArray$allocateGrowable(22, type$.Uint8List);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t1 = new A._createTables_build(tables);
      t2 = new A._createTables_setChars();
      t3 = new A._createTables_setRange();
      b = t1.call$2(0, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(14, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(15, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(1, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(2, 235);
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(3, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(4, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(5, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(6, 231);
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(7, 231);
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      t2.call$3(t1.call$2(8, 8), "]", 5);
      b = t1.call$2(9, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(16, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(17, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(10, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(18, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(19, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(11, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(12, 236);
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_2, 12);
      t2.call$3(b, _s1_3, 205);
      b = t1.call$2(13, 237);
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_2, 13);
      t3.call$3(t1.call$2(20, 245), "az", 21);
      b = t1.call$2(21, 245);
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (i = start; i < end; ++i) {
        table = tables[state];
        char = B.JSString_methods._codeUnitAt$1(uri, i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        indices[transition >>> 5] = i;
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && B.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _skipPackageNameChars(source, start, end) {
      var i, dots, char;
      for (i = start, dots = 0; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(source, i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    _caseInsensitiveCompareStart(prefix, string, start) {
      var t1, result, i, prefixChar, stringChar, delta, lowerChar;
      for (t1 = prefix.length, result = 0, i = 0; i < t1; ++i) {
        prefixChar = B.JSString_methods._codeUnitAt$1(prefix, i);
        stringChar = B.JSString_methods._codeUnitAt$1(string, start + i);
        delta = prefixChar ^ stringChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = stringChar | delta;
            if (97 <= lowerChar && lowerChar <= 122) {
              result = 32;
              continue;
            }
          }
          return -1;
        }
      }
      return result;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    DateTime: function DateTime(t0, t1) {
      this._core$_value = t0;
      this.isUtc = t1;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable(t0, t1, t2) {
      this.length = t0;
      this._generator = t1;
      this.$ti = t2;
    },
    Iterator: function Iterator() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace(t0) {
      this._stackTrace = t0;
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode = _.___Uri_pathSegments = _.___Uri__text = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode = _.___Uri_pathSegments = _.___Uri__text = $;
    },
    Expando: function Expando(t0) {
      this._jsWeakMap = t0;
    },
    _convertDataTree(data) {
      var t1 = new A._convertDataTree__convert(new A._IdentityHashMap(type$._IdentityHashMap_dynamic_dynamic)).call$1(data);
      t1.toString;
      return t1;
    },
    callConstructor(constr, $arguments) {
      var args, factoryFunction;
      if ($arguments instanceof Array)
        switch ($arguments.length) {
          case 0:
            return new constr();
          case 1:
            return new constr($arguments[0]);
          case 2:
            return new constr($arguments[0], $arguments[1]);
          case 3:
            return new constr($arguments[0], $arguments[1], $arguments[2]);
          case 4:
            return new constr($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        }
      args = [null];
      B.JSArray_methods.addAll$1(args, $arguments);
      factoryFunction = constr.bind.apply(constr, args);
      String(factoryFunction);
      return new factoryFunction();
    },
    _convertDataTree__convert: function _convertDataTree__convert(t0) {
      this._convertedObjects = t0;
    },
    max(a, b) {
      return Math.max(A.checkNum(a), A.checkNum(b));
    },
    pow(x, exponent) {
      return Math.pow(x, exponent);
    },
    Random_Random() {
      return B.C__JSRandom;
    },
    _JSRandom: function _JSRandom() {
    },
    ArgParser: function ArgParser(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._arg_parser$_options = t0;
      _._aliases = t1;
      _.options = t2;
      _.commands = t3;
      _._optionsAndSeparators = t4;
      _.allowTrailingOptions = t5;
      _.usageLineLength = t6;
    },
    ArgParser__addOption_closure: function ArgParser__addOption_closure(t0) {
      this.$this = t0;
    },
    ArgParserException$(message, commands) {
      return new A.ArgParserException(commands == null ? B.List_empty : A.List_List$unmodifiable(commands, type$.String), message, null, null);
    },
    ArgParserException: function ArgParserException(t0, t1, t2, t3) {
      var _ = this;
      _.commands = t0;
      _.message = t1;
      _.source = t2;
      _.offset = t3;
    },
    ArgResults: function ArgResults(t0, t1, t2, t3) {
      var _ = this;
      _._parser = t0;
      _._parsed = t1;
      _.name = t2;
      _.rest = t3;
    },
    Option: function Option(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.name = t0;
      _.abbr = t1;
      _.help = t2;
      _.valueHelp = t3;
      _.allowed = t4;
      _.allowedHelp = t5;
      _.defaultsTo = t6;
      _.negatable = t7;
      _.callback = t8;
      _.type = t9;
      _.splitCommas = t10;
      _.mandatory = t11;
      _.hide = t12;
    },
    OptionType: function OptionType(t0) {
      this.name = t0;
    },
    Parser$(_commandName, _grammar, _args, _parent, rest) {
      var t1 = A._setArrayType([], type$.JSArray_String);
      if (rest != null)
        B.JSArray_methods.addAll$1(t1, rest);
      return new A.Parser0(_commandName, _parent, _grammar, _args, t1, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic));
    },
    _isLetterOrDigit(codeUnit) {
      var t1;
      if (!(codeUnit >= 65 && codeUnit <= 90))
        if (!(codeUnit >= 97 && codeUnit <= 122))
          t1 = codeUnit >= 48 && codeUnit <= 57;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    Parser0: function Parser0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._commandName = t0;
      _._parser$_parent = t1;
      _._grammar = t2;
      _._args = t3;
      _._parser$_rest = t4;
      _._results = t5;
    },
    Parser_parse_closure: function Parser_parse_closure(t0) {
      this.$this = t0;
    },
    Parser__setOption_closure: function Parser__setOption_closure() {
    },
    _Usage: function _Usage(t0, t1, t2) {
      var _ = this;
      _._usage$_optionsAndSeparators = t0;
      _._buffer = t1;
      _._currentColumn = 0;
      _.___Usage__columnWidths = $;
      _._newlinesNeeded = 0;
      _.lineLength = t2;
    },
    _Usage__writeOption_closure: function _Usage__writeOption_closure() {
    },
    _Usage__buildAllowedList_closure: function _Usage__buildAllowedList_closure(t0) {
      this.option = t0;
    },
    ErrorResult: function ErrorResult(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    ValueResult: function ValueResult(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    StreamCompleter: function StreamCompleter(t0, t1) {
      this._stream_completer$_stream = t0;
      this.$ti = t1;
    },
    _CompleterStream: function _CompleterStream(t0) {
      this._sourceStream = this._stream_completer$_controller = null;
      this.$ti = t0;
    },
    StreamGroup: function StreamGroup(t0, t1, t2) {
      var _ = this;
      _.__StreamGroup__controller = $;
      _._closed = false;
      _._stream_group$_state = t0;
      _._subscriptions = t1;
      _.$ti = t2;
    },
    StreamGroup_add_closure: function StreamGroup_add_closure() {
    },
    StreamGroup_add_closure0: function StreamGroup_add_closure0(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    StreamGroup__onListen_closure: function StreamGroup__onListen_closure() {
    },
    StreamGroup__onCancel_closure: function StreamGroup__onCancel_closure(t0) {
      this.$this = t0;
    },
    StreamGroup__listenToStream_closure: function StreamGroup__listenToStream_closure(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    _StreamGroupState: function _StreamGroupState(t0) {
      this.name = t0;
    },
    StreamQueue: function StreamQueue(t0, t1, t2, t3) {
      var _ = this;
      _._stream_queue$_source = t0;
      _._stream_queue$_subscription = null;
      _._isDone = false;
      _._eventsReceived = 0;
      _._eventQueue = t1;
      _._requestQueue = t2;
      _.$ti = t3;
    },
    StreamQueue__ensureListening_closure: function StreamQueue__ensureListening_closure(t0) {
      this.$this = t0;
    },
    StreamQueue__ensureListening_closure1: function StreamQueue__ensureListening_closure1(t0) {
      this.$this = t0;
    },
    StreamQueue__ensureListening_closure0: function StreamQueue__ensureListening_closure0(t0) {
      this.$this = t0;
    },
    _NextRequest: function _NextRequest(t0, t1) {
      this._completer = t0;
      this.$ti = t1;
    },
    Repl: function Repl(t0, t1, t2, t3) {
      var _ = this;
      _.prompt = t0;
      _.continuation = t1;
      _.validator = t2;
      _.__Repl__adapter = $;
      _.history = t3;
    },
    alwaysValid_closure: function alwaysValid_closure() {
    },
    ReplAdapter: function ReplAdapter(t0) {
      this.repl = t0;
      this.rl = null;
    },
    ReplAdapter_runAsync_closure: function ReplAdapter_runAsync_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.rl = t2;
      _.runController = t3;
    },
    ReplAdapter_runAsync__closure: function ReplAdapter_runAsync__closure(t0) {
      this.lineController = t0;
    },
    Stdin: function Stdin() {
    },
    Stdout: function Stdout() {
    },
    ReadlineModule: function ReadlineModule() {
    },
    ReadlineOptions: function ReadlineOptions() {
    },
    ReadlineInterface: function ReadlineInterface() {
    },
    EmptyUnmodifiableSet: function EmptyUnmodifiableSet(t0) {
      this.$ti = t0;
    },
    _EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin: function _EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin() {
    },
    DefaultEquality: function DefaultEquality() {
    },
    IterableEquality: function IterableEquality() {
    },
    ListEquality: function ListEquality() {
    },
    _MapEntry: function _MapEntry(t0, t1, t2) {
      this.equality = t0;
      this.key = t1;
      this.value = t2;
    },
    MapEquality: function MapEquality() {
    },
    QueueList$(initialCapacity, $E) {
      return new A.QueueList(A.List_List$filled(A.QueueList__computeInitialCapacity(initialCapacity), null, false, $E._eval$1("0?")), 0, 0, $E._eval$1("QueueList<0>"));
    },
    QueueList_QueueList$from(source, $E) {
      var $length, queue, t1;
      if (type$.List_dynamic._is(source)) {
        $length = J.get$length$asx(source);
        queue = A.QueueList$($length + 1, $E);
        J.setRange$4$ax(queue._table, 0, $length, source, 0);
        queue._tail = $length;
        return queue;
      } else {
        t1 = A.QueueList$(null, $E);
        t1.addAll$1(0, source);
        return t1;
      }
    },
    QueueList__computeInitialCapacity(initialCapacity) {
      if (initialCapacity == null || initialCapacity < 8)
        return 8;
      ++initialCapacity;
      if ((initialCapacity & initialCapacity - 1) >>> 0 === 0)
        return initialCapacity;
      return A.QueueList__nextPowerOf2(initialCapacity);
    },
    QueueList__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    QueueList: function QueueList(t0, t1, t2, t3) {
      var _ = this;
      _._table = t0;
      _._head = t1;
      _._tail = t2;
      _.$ti = t3;
    },
    _CastQueueList: function _CastQueueList(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue_list$_delegate = t0;
      _._table = t1;
      _._head = t2;
      _._tail = t3;
      _.$ti = t4;
    },
    _QueueList_Object_ListMixin: function _QueueList_Object_ListMixin() {
    },
    UnmodifiableSetMixin__throw() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable Set"));
    },
    UnmodifiableSetView: function UnmodifiableSetView(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    UnmodifiableSetMixin: function UnmodifiableSetMixin() {
    },
    _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: function _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin() {
    },
    _DelegatingIterableBase: function _DelegatingIterableBase() {
    },
    DelegatingSet: function DelegatingSet(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    MapKeySet: function MapKeySet(t0, t1) {
      this._baseMap = t0;
      this.$ti = t1;
    },
    MapKeySet_difference_closure: function MapKeySet_difference_closure(t0, t1) {
      this.$this = t0;
      this.other = t1;
    },
    _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin: function _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin() {
    },
    BufferModule: function BufferModule() {
    },
    BufferConstants: function BufferConstants() {
    },
    Buffer: function Buffer() {
    },
    ConsoleModule: function ConsoleModule() {
    },
    Console: function Console() {
    },
    EventEmitter: function EventEmitter() {
    },
    fs() {
      var t1 = $._fs;
      return t1 == null ? $._fs = self.fs : t1;
    },
    FS: function FS() {
    },
    FSConstants: function FSConstants() {
    },
    FSWatcher: function FSWatcher() {
    },
    ReadStream: function ReadStream() {
    },
    ReadStreamOptions: function ReadStreamOptions() {
    },
    WriteStream: function WriteStream() {
    },
    WriteStreamOptions: function WriteStreamOptions() {
    },
    FileOptions: function FileOptions() {
    },
    StatOptions: function StatOptions() {
    },
    MkdirOptions: function MkdirOptions() {
    },
    RmdirOptions: function RmdirOptions() {
    },
    WatchOptions: function WatchOptions() {
    },
    WatchFileOptions: function WatchFileOptions() {
    },
    Stats: function Stats() {
    },
    Promise: function Promise() {
    },
    Date: function Date() {
    },
    JsError: function JsError() {
    },
    Atomics: function Atomics() {
    },
    Modules: function Modules() {
    },
    Module1: function Module1() {
    },
    Net: function Net() {
    },
    Socket: function Socket() {
    },
    NetAddress: function NetAddress() {
    },
    NetServer: function NetServer() {
    },
    NodeJsError: function NodeJsError() {
    },
    JsAssertionError: function JsAssertionError() {
    },
    JsRangeError: function JsRangeError() {
    },
    JsReferenceError: function JsReferenceError() {
    },
    JsSyntaxError: function JsSyntaxError() {
    },
    JsTypeError: function JsTypeError() {
    },
    JsSystemError: function JsSystemError() {
    },
    Process: function Process() {
    },
    CPUUsage: function CPUUsage() {
    },
    Release: function Release() {
    },
    StreamModule: function StreamModule() {
    },
    Readable: function Readable() {
    },
    Writable: function Writable() {
    },
    Duplex: function Duplex() {
    },
    Transform: function Transform() {
    },
    WritableOptions: function WritableOptions() {
    },
    ReadableOptions: function ReadableOptions() {
    },
    Immediate: function Immediate() {
    },
    Timeout: function Timeout() {
    },
    TTY: function TTY() {
    },
    TTYReadStream: function TTYReadStream() {
    },
    TTYWriteStream: function TTYWriteStream() {
    },
    jsify(dartObject) {
      if (A._isBasicType(dartObject))
        return dartObject;
      return A._convertDataTree(dartObject);
    },
    _isBasicType(value) {
      return false;
    },
    promiseToFuture(promise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._SyncCompleter(t1, $T._eval$1("_SyncCompleter<0>"));
      J.then$2$x(promise, A.allowInterop(new A.promiseToFuture_closure(completer)), A.allowInterop(new A.promiseToFuture_closure0(completer)));
      return t1;
    },
    futureToPromise(future, $T) {
      return new self.Promise(A.allowInterop(new A.futureToPromise_closure(future, $T)));
    },
    Util: function Util() {
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0) {
      this.completer = t0;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    futureToPromise_closure: function futureToPromise_closure(t0, t1) {
      this.future = t0;
      this.T = t1;
    },
    futureToPromise__closure: function futureToPromise__closure(t0, t1) {
      this.resolve = t0;
      this.T = t1;
    },
    Context_Context(style) {
      var current = style == null ? A.current() : ".";
      if (style == null)
        style = $.$get$Style_platform();
      return new A.Context(type$.InternalStyle._as(style), current);
    },
    _parseUri(uri) {
      if (typeof uri == "string")
        return A.Uri_parse(uri);
      if (type$.Uri._is(uri))
        return uri;
      throw A.wrapException(A.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = "" + (method + "(");
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, new A._validateArgList_closure(), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    _PathDirection: function _PathDirection(t0) {
      this.name = t0;
    },
    _PathRelation: function _PathRelation(t0) {
      this.name = t0;
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path),
        isRootRelative = style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0 && style.isSeparator$1(B.JSString_methods._codeUnitAt$1(path, 0))) {
        separators.push(path[0]);
        start = 1;
      } else {
        separators.push("");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(B.JSString_methods._codeUnitAt$1(path, i))) {
          parts.push(B.JSString_methods.substring$2(path, start, i));
          separators.push(path[i]);
          start = i + 1;
        }
      if (start < t1) {
        parts.push(B.JSString_methods.substring$1(path, start));
        separators.push("");
      }
      return new A.ParsedPath(style, root, isRootRelative, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3, t4) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.isRootRelative = t2;
      _.parts = t3;
      _.separators = t4;
    },
    ParsedPath__splitExtension_closure: function ParsedPath__splitExtension_closure() {
    },
    ParsedPath__splitExtension_closure0: function ParsedPath__splitExtension_closure0() {
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    PathMap__create(context, $V) {
      var t1 = {};
      t1.context = context;
      t1.context = $.$get$context();
      return A.LinkedHashMap_LinkedHashMap(new A.PathMap__create_closure(t1), new A.PathMap__create_closure0(t1), new A.PathMap__create_closure1(), type$.nullable_String, $V);
    },
    PathMap: function PathMap(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    PathMap__create_closure: function PathMap__create_closure(t0) {
      this._box_0 = t0;
    },
    PathMap__create_closure0: function PathMap__create_closure0(t0) {
      this._box_0 = t0;
    },
    PathMap__create_closure1: function PathMap__create_closure1() {
    },
    Style__getPlatformStyle() {
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      var t1 = A.Uri_base();
      if (!B.JSString_methods.endsWith$1(t1.get$path(t1), "/"))
        return $.$get$Style_url();
      if (A._Uri__Uri(null, "a/b", null, null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure() {
    },
    CssMediaQuery: function CssMediaQuery(t0, t1, t2) {
      this.modifier = t0;
      this.type = t1;
      this.features = t2;
    },
    _SingletonCssMediaQueryMergeResult: function _SingletonCssMediaQueryMergeResult(t0) {
      this._media_query$_name = t0;
    },
    MediaQuerySuccessfulMergeResult: function MediaQuerySuccessfulMergeResult(t0) {
      this.query = t0;
    },
    ModifiableCssAtRule$($name, span, childless, value) {
      var t1 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      return new A.ModifiableCssAtRule($name, value, childless, span, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_ModifiableCssNode), t1);
    },
    ModifiableCssAtRule: function ModifiableCssAtRule(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.isChildless = t2;
      _.span = t3;
      _.children = t4;
      _._children = t5;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssComment: function ModifiableCssComment(t0, t1) {
      var _ = this;
      _.text = t0;
      _.span = t1;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssDeclaration$($name, value, span, parsedAsCustomProperty, valueSpanForMap) {
      var t1 = valueSpanForMap == null ? value.get$span(value) : valueSpanForMap;
      if (parsedAsCustomProperty)
        if (!J.startsWith$1$s($name.get$value($name), "--"))
          A.throwExpression(A.ArgumentError$(string$.parsed, null));
        else if (!(value.get$value(value) instanceof A.SassString))
          A.throwExpression(A.ArgumentError$(string$.If_par + value.toString$0(0) + "` of type " + A.getRuntimeType(value.get$value(value)).toString$0(0) + ").", null));
      return new A.ModifiableCssDeclaration($name, value, parsedAsCustomProperty, t1, span);
    },
    ModifiableCssDeclaration: function ModifiableCssDeclaration(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.parsedAsCustomProperty = t2;
      _.valueSpanForMap = t3;
      _.span = t4;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssImport: function ModifiableCssImport(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _.modifiers = t1;
      _.span = t2;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssKeyframeBlock$(selector, span) {
      var t1 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      return new A.ModifiableCssKeyframeBlock(selector, span, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_ModifiableCssNode), t1);
    },
    ModifiableCssKeyframeBlock: function ModifiableCssKeyframeBlock(t0, t1, t2, t3) {
      var _ = this;
      _.selector = t0;
      _.span = t1;
      _.children = t2;
      _._children = t3;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssMediaRule$(queries, span) {
      var t1 = A.List_List$unmodifiable(queries, type$.CssMediaQuery),
        t2 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      if (J.get$isEmpty$asx(queries))
        A.throwExpression(A.ArgumentError$value(queries, "queries", "may not be empty."));
      return new A.ModifiableCssMediaRule(t1, span, new A.UnmodifiableListView(t2, type$.UnmodifiableListView_ModifiableCssNode), t2);
    },
    ModifiableCssMediaRule: function ModifiableCssMediaRule(t0, t1, t2, t3) {
      var _ = this;
      _.queries = t0;
      _.span = t1;
      _.children = t2;
      _._children = t3;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssNode: function ModifiableCssNode() {
    },
    ModifiableCssParentNode: function ModifiableCssParentNode() {
    },
    ModifiableCssStyleRule$(selector, span, originalSelector) {
      var t1 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      return new A.ModifiableCssStyleRule(selector, originalSelector, span, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_ModifiableCssNode), t1);
    },
    ModifiableCssStyleRule: function ModifiableCssStyleRule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.selector = t0;
      _.originalSelector = t1;
      _.span = t2;
      _.children = t3;
      _._children = t4;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssStylesheet$(span) {
      var t1 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      return new A.ModifiableCssStylesheet(span, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_ModifiableCssNode), t1);
    },
    ModifiableCssStylesheet: function ModifiableCssStylesheet(t0, t1, t2) {
      var _ = this;
      _.span = t0;
      _.children = t1;
      _._children = t2;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssSupportsRule$(condition, span) {
      var t1 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      return new A.ModifiableCssSupportsRule(condition, span, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_ModifiableCssNode), t1);
    },
    ModifiableCssSupportsRule: function ModifiableCssSupportsRule(t0, t1, t2, t3) {
      var _ = this;
      _.condition = t0;
      _.span = t1;
      _.children = t2;
      _._children = t3;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssValue: function ModifiableCssValue(t0, t1, t2) {
      this.value = t0;
      this.span = t1;
      this.$ti = t2;
    },
    CssNode: function CssNode() {
    },
    CssParentNode: function CssParentNode() {
    },
    CssStylesheet: function CssStylesheet(t0, t1) {
      this.children = t0;
      this.span = t1;
    },
    CssValue: function CssValue(t0, t1, t2) {
      this.value = t0;
      this.span = t1;
      this.$ti = t2;
    },
    AstNode: function AstNode() {
    },
    _FakeAstNode: function _FakeAstNode(t0) {
      this._callback = t0;
    },
    Argument: function Argument(t0, t1, t2) {
      this.name = t0;
      this.defaultValue = t1;
      this.span = t2;
    },
    ArgumentDeclaration_ArgumentDeclaration$parse(contents, url) {
      return A.ScssParser$(contents, null, url).parseArgumentDeclaration$0();
    },
    ArgumentDeclaration: function ArgumentDeclaration(t0, t1, t2) {
      this.$arguments = t0;
      this.restArgument = t1;
      this.span = t2;
    },
    ArgumentDeclaration_verify_closure: function ArgumentDeclaration_verify_closure() {
    },
    ArgumentDeclaration_verify_closure0: function ArgumentDeclaration_verify_closure0() {
    },
    ArgumentInvocation$empty(span) {
      return new A.ArgumentInvocation(B.List_empty7, B.Map_empty2, null, null, span);
    },
    ArgumentInvocation: function ArgumentInvocation(t0, t1, t2, t3, t4) {
      var _ = this;
      _.positional = t0;
      _.named = t1;
      _.rest = t2;
      _.keywordRest = t3;
      _.span = t4;
    },
    AtRootQuery: function AtRootQuery(t0, t1, t2, t3) {
      var _ = this;
      _.include = t0;
      _.names = t1;
      _._all = t2;
      _._at_root_query$_rule = t3;
    },
    ConfiguredVariable: function ConfiguredVariable(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.expression = t1;
      _.isGuarded = t2;
      _.span = t3;
    },
    BinaryOperationExpression: function BinaryOperationExpression(t0, t1, t2, t3) {
      var _ = this;
      _.operator = t0;
      _.left = t1;
      _.right = t2;
      _.allowsSlash = t3;
    },
    BinaryOperator: function BinaryOperator(t0, t1, t2) {
      this.name = t0;
      this.operator = t1;
      this.precedence = t2;
    },
    BooleanExpression: function BooleanExpression(t0, t1) {
      this.value = t0;
      this.span = t1;
    },
    CalculationExpression__verifyArguments($arguments) {
      return A.List_List$unmodifiable(new A.MappedListIterable($arguments, new A.CalculationExpression__verifyArguments_closure(), A._arrayInstanceType($arguments)._eval$1("MappedListIterable<1,@>")), type$.Expression);
    },
    CalculationExpression__verify(expression) {
      var t1,
        _s29_ = "Invalid calculation argument ";
      if (expression instanceof A.NumberExpression)
        return;
      if (expression instanceof A.CalculationExpression)
        return;
      if (expression instanceof A.VariableExpression)
        return;
      if (expression instanceof A.FunctionExpression)
        return;
      if (expression instanceof A.IfExpression)
        return;
      if (expression instanceof A.StringExpression) {
        if (expression.hasQuotes)
          throw A.wrapException(A.ArgumentError$(_s29_ + expression.toString$0(0) + ".", null));
      } else if (expression instanceof A.ParenthesizedExpression)
        A.CalculationExpression__verify(expression.expression);
      else if (expression instanceof A.BinaryOperationExpression) {
        A.CalculationExpression__verify(expression.left);
        A.CalculationExpression__verify(expression.right);
        t1 = expression.operator;
        if (t1 === B.BinaryOperator_AcR0)
          return;
        if (t1 === B.BinaryOperator_iyO)
          return;
        if (t1 === B.BinaryOperator_O1M)
          return;
        if (t1 === B.BinaryOperator_RTB)
          return;
        throw A.wrapException(A.ArgumentError$(_s29_ + expression.toString$0(0) + ".", null));
      } else
        throw A.wrapException(A.ArgumentError$(_s29_ + expression.toString$0(0) + ".", null));
    },
    CalculationExpression: function CalculationExpression(t0, t1, t2) {
      this.name = t0;
      this.$arguments = t1;
      this.span = t2;
    },
    CalculationExpression__verifyArguments_closure: function CalculationExpression__verifyArguments_closure() {
    },
    ColorExpression: function ColorExpression(t0, t1) {
      this.value = t0;
      this.span = t1;
    },
    FunctionExpression: function FunctionExpression(t0, t1, t2, t3) {
      var _ = this;
      _.namespace = t0;
      _.originalName = t1;
      _.$arguments = t2;
      _.span = t3;
    },
    IfExpression: function IfExpression(t0, t1) {
      this.$arguments = t0;
      this.span = t1;
    },
    InterpolatedFunctionExpression: function InterpolatedFunctionExpression(t0, t1, t2) {
      this.name = t0;
      this.$arguments = t1;
      this.span = t2;
    },
    ListExpression: function ListExpression(t0, t1, t2, t3) {
      var _ = this;
      _.contents = t0;
      _.separator = t1;
      _.hasBrackets = t2;
      _.span = t3;
    },
    ListExpression_toString_closure: function ListExpression_toString_closure(t0) {
      this.$this = t0;
    },
    MapExpression: function MapExpression(t0, t1) {
      this.pairs = t0;
      this.span = t1;
    },
    MapExpression_toString_closure: function MapExpression_toString_closure() {
    },
    NullExpression: function NullExpression(t0) {
      this.span = t0;
    },
    NumberExpression: function NumberExpression(t0, t1, t2) {
      this.value = t0;
      this.unit = t1;
      this.span = t2;
    },
    ParenthesizedExpression: function ParenthesizedExpression(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    SelectorExpression: function SelectorExpression(t0) {
      this.span = t0;
    },
    StringExpression_quoteText(text) {
      var t1,
        quote = A.StringExpression__bestQuote(A._setArrayType([text], type$.JSArray_String)),
        buffer = new A.StringBuffer("");
      buffer._contents = "" + A.Primitives_stringFromCharCode(quote);
      A.StringExpression__quoteInnerText(text, quote, buffer, true);
      t1 = buffer._contents += A.Primitives_stringFromCharCode(quote);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    StringExpression__quoteInnerText(text, quote, buffer, $static) {
      var t1, t2, i, codeUnit, next, t3;
      for (t1 = text.length, t2 = t1 - 1, i = 0; i < t1; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(text, i);
        if (codeUnit === 10 || codeUnit === 13 || codeUnit === 12) {
          buffer.writeCharCode$1(92);
          buffer.writeCharCode$1(97);
          if (i !== t2) {
            next = B.JSString_methods._codeUnitAt$1(text, i + 1);
            if (next === 32 || next === 9 || next === 10 || next === 13 || next === 12 || A.isHex(next))
              buffer.writeCharCode$1(32);
          }
        } else {
          if (codeUnit !== quote)
            if (codeUnit !== 92)
              t3 = $static && codeUnit === 35 && i < t2 && B.JSString_methods._codeUnitAt$1(text, i + 1) === 123;
            else
              t3 = true;
          else
            t3 = true;
          if (t3)
            buffer.writeCharCode$1(92);
          buffer.writeCharCode$1(codeUnit);
        }
      }
    },
    StringExpression__bestQuote(strings) {
      var t1, containsDoubleQuote, t2, t3, i, codeUnit;
      for (t1 = J.get$iterator$ax(strings), containsDoubleQuote = false; t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        for (t3 = t2.length, i = 0; i < t3; ++i) {
          codeUnit = B.JSString_methods._codeUnitAt$1(t2, i);
          if (codeUnit === 39)
            return 34;
          if (codeUnit === 34)
            containsDoubleQuote = true;
        }
      }
      return containsDoubleQuote ? 39 : 34;
    },
    StringExpression: function StringExpression(t0, t1) {
      this.text = t0;
      this.hasQuotes = t1;
    },
    SupportsExpression: function SupportsExpression(t0) {
      this.condition = t0;
    },
    UnaryOperationExpression: function UnaryOperationExpression(t0, t1, t2) {
      this.operator = t0;
      this.operand = t1;
      this.span = t2;
    },
    UnaryOperator: function UnaryOperator(t0, t1) {
      this.name = t0;
      this.operator = t1;
    },
    ValueExpression: function ValueExpression(t0, t1) {
      this.value = t0;
      this.span = t1;
    },
    VariableExpression: function VariableExpression(t0, t1, t2) {
      this.namespace = t0;
      this.name = t1;
      this.span = t2;
    },
    DynamicImport: function DynamicImport(t0, t1) {
      this.urlString = t0;
      this.span = t1;
    },
    StaticImport: function StaticImport(t0, t1, t2) {
      this.url = t0;
      this.modifiers = t1;
      this.span = t2;
    },
    Interpolation$(contents, span) {
      var t1 = new A.Interpolation(A.List_List$unmodifiable(contents, type$.Object), span);
      t1.Interpolation$2(contents, span);
      return t1;
    },
    Interpolation: function Interpolation(t0, t1) {
      this.contents = t0;
      this.span = t1;
    },
    Interpolation_toString_closure: function Interpolation_toString_closure() {
    },
    AtRootRule$(children, span, query) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.AtRootRule(query, span, t1, t2);
    },
    AtRootRule: function AtRootRule(t0, t1, t2, t3) {
      var _ = this;
      _.query = t0;
      _.span = t1;
      _.children = t2;
      _.hasDeclarations = t3;
    },
    AtRule$($name, span, children, value) {
      var t1 = children == null ? null : A.List_List$unmodifiable(children, type$.Statement),
        t2 = t1 == null ? null : B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.AtRule($name, value, span, t1, t2 === true);
    },
    AtRule: function AtRule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.span = t2;
      _.children = t3;
      _.hasDeclarations = t4;
    },
    CallableDeclaration: function CallableDeclaration() {
    },
    ContentBlock$($arguments, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.ContentBlock("@content", $arguments, span, t1, t2);
    },
    ContentBlock: function ContentBlock(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.$arguments = t1;
      _.span = t2;
      _.children = t3;
      _.hasDeclarations = t4;
    },
    ContentRule: function ContentRule(t0, t1) {
      this.$arguments = t0;
      this.span = t1;
    },
    DebugRule: function DebugRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    Declaration$($name, value, span) {
      if (B.JSString_methods.startsWith$1($name.get$initialPlain(), "--") && !(value instanceof A.StringExpression))
        A.throwExpression(A.ArgumentError$(string$.Declarwu + value.toString$0(0) + "` of type " + value.get$runtimeType(value).toString$0(0) + ").", null));
      return new A.Declaration($name, value, span, null, false);
    },
    Declaration$nested($name, children, span, value) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      if (B.JSString_methods.startsWith$1($name.get$initialPlain(), "--") && !(value instanceof A.StringExpression))
        A.throwExpression(A.ArgumentError$(string$.Declarwa, null));
      return new A.Declaration($name, value, span, t1, t2);
    },
    Declaration: function Declaration(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.span = t2;
      _.children = t3;
      _.hasDeclarations = t4;
    },
    EachRule$(variables, list, children, span) {
      var t1 = A.List_List$unmodifiable(variables, type$.String),
        t2 = A.List_List$unmodifiable(children, type$.Statement),
        t3 = B.JSArray_methods.any$1(t2, new A.ParentStatement_closure());
      return new A.EachRule(t1, list, span, t2, t3);
    },
    EachRule: function EachRule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.variables = t0;
      _.list = t1;
      _.span = t2;
      _.children = t3;
      _.hasDeclarations = t4;
    },
    EachRule_toString_closure: function EachRule_toString_closure() {
    },
    ErrorRule: function ErrorRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    ExtendRule: function ExtendRule(t0, t1, t2) {
      this.selector = t0;
      this.isOptional = t1;
      this.span = t2;
    },
    ForRule$(variable, from, to, children, span, exclusive) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.ForRule(variable, from, to, exclusive, span, t1, t2);
    },
    ForRule: function ForRule(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.variable = t0;
      _.from = t1;
      _.to = t2;
      _.isExclusive = t3;
      _.span = t4;
      _.children = t5;
      _.hasDeclarations = t6;
    },
    ForwardRule: function ForwardRule(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.url = t0;
      _.shownMixinsAndFunctions = t1;
      _.shownVariables = t2;
      _.hiddenMixinsAndFunctions = t3;
      _.hiddenVariables = t4;
      _.prefix = t5;
      _.configuration = t6;
      _.span = t7;
    },
    FunctionRule$($name, $arguments, children, span, comment) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.FunctionRule($name, $arguments, span, t1, t2);
    },
    FunctionRule: function FunctionRule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.$arguments = t1;
      _.span = t2;
      _.children = t3;
      _.hasDeclarations = t4;
    },
    IfClause$(expression, children) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      return new A.IfClause(expression, t1, B.JSArray_methods.any$1(t1, new A.IfRuleClause$__closure()));
    },
    ElseClause$(children) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      return new A.ElseClause(t1, B.JSArray_methods.any$1(t1, new A.IfRuleClause$__closure()));
    },
    IfRule: function IfRule(t0, t1, t2) {
      this.clauses = t0;
      this.lastClause = t1;
      this.span = t2;
    },
    IfRule_toString_closure: function IfRule_toString_closure() {
    },
    IfRuleClause: function IfRuleClause() {
    },
    IfRuleClause$__closure: function IfRuleClause$__closure() {
    },
    IfRuleClause$___closure: function IfRuleClause$___closure() {
    },
    IfClause: function IfClause(t0, t1, t2) {
      this.expression = t0;
      this.children = t1;
      this.hasDeclarations = t2;
    },
    ElseClause: function ElseClause(t0, t1) {
      this.children = t0;
      this.hasDeclarations = t1;
    },
    ImportRule: function ImportRule(t0, t1) {
      this.imports = t0;
      this.span = t1;
    },
    IncludeRule: function IncludeRule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.namespace = t0;
      _.name = t1;
      _.$arguments = t2;
      _.content = t3;
      _.span = t4;
    },
    LoudComment: function LoudComment(t0) {
      this.text = t0;
    },
    MediaRule$(query, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.MediaRule(query, span, t1, t2);
    },
    MediaRule: function MediaRule(t0, t1, t2, t3) {
      var _ = this;
      _.query = t0;
      _.span = t1;
      _.children = t2;
      _.hasDeclarations = t3;
    },
    MixinRule$($name, $arguments, children, span, comment) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.MixinRule($name, $arguments, span, t1, t2);
    },
    MixinRule: function MixinRule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__MixinRule_hasContent = $;
      _.name = t0;
      _.$arguments = t1;
      _.span = t2;
      _.children = t3;
      _.hasDeclarations = t4;
    },
    _HasContentVisitor: function _HasContentVisitor() {
    },
    ParentStatement: function ParentStatement() {
    },
    ParentStatement_closure: function ParentStatement_closure() {
    },
    ParentStatement__closure: function ParentStatement__closure() {
    },
    ReturnRule: function ReturnRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    SilentComment: function SilentComment(t0, t1) {
      this.text = t0;
      this.span = t1;
    },
    StyleRule$(selector, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.StyleRule(selector, span, t1, t2);
    },
    StyleRule: function StyleRule(t0, t1, t2, t3) {
      var _ = this;
      _.selector = t0;
      _.span = t1;
      _.children = t2;
      _.hasDeclarations = t3;
    },
    Stylesheet$(children, span) {
      var t1 = A._setArrayType([], type$.JSArray_UseRule),
        t2 = A._setArrayType([], type$.JSArray_ForwardRule),
        t3 = A.List_List$unmodifiable(children, type$.Statement),
        t4 = B.JSArray_methods.any$1(t3, new A.ParentStatement_closure());
      t1 = new A.Stylesheet(span, false, t1, t2, t3, t4);
      t1.Stylesheet$internal$3$plainCss(children, span, false);
      return t1;
    },
    Stylesheet$internal(children, span, plainCss) {
      var t1 = A._setArrayType([], type$.JSArray_UseRule),
        t2 = A._setArrayType([], type$.JSArray_ForwardRule),
        t3 = A.List_List$unmodifiable(children, type$.Statement),
        t4 = B.JSArray_methods.any$1(t3, new A.ParentStatement_closure());
      t1 = new A.Stylesheet(span, plainCss, t1, t2, t3, t4);
      t1.Stylesheet$internal$3$plainCss(children, span, plainCss);
      return t1;
    },
    Stylesheet_Stylesheet$parse(contents, syntax, logger, url) {
      var t1, t2;
      switch (syntax) {
        case B.Syntax_Sass:
          t1 = A.SpanScanner$(contents, url);
          t2 = logger == null ? B.StderrLogger_false : logger;
          return new A.SassParser(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.VariableDeclaration), t1, t2).parse$0();
        case B.Syntax_SCSS:
          return A.ScssParser$(contents, logger, url).parse$0();
        case B.Syntax_CSS:
          t1 = A.SpanScanner$(contents, url);
          t2 = logger == null ? B.StderrLogger_false : logger;
          return new A.CssParser(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.VariableDeclaration), t1, t2).parse$0();
        default:
          throw A.wrapException(A.ArgumentError$("Unknown syntax " + syntax.toString$0(0) + ".", null));
      }
    },
    Stylesheet: function Stylesheet(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.span = t0;
      _.plainCss = t1;
      _._uses = t2;
      _._forwards = t3;
      _.children = t4;
      _.hasDeclarations = t5;
    },
    SupportsRule$(condition, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.SupportsRule(condition, span, t1, t2);
    },
    SupportsRule: function SupportsRule(t0, t1, t2, t3) {
      var _ = this;
      _.condition = t0;
      _.span = t1;
      _.children = t2;
      _.hasDeclarations = t3;
    },
    UseRule: function UseRule(t0, t1, t2, t3) {
      var _ = this;
      _.url = t0;
      _.namespace = t1;
      _.configuration = t2;
      _.span = t3;
    },
    VariableDeclaration$($name, expression, span, comment, global, guarded, namespace) {
      if (namespace != null && global)
        A.throwExpression(A.ArgumentError$(string$.Other_, null));
      return new A.VariableDeclaration(namespace, $name, expression, guarded, global, span);
    },
    VariableDeclaration: function VariableDeclaration(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.namespace = t0;
      _.name = t1;
      _.expression = t2;
      _.isGuarded = t3;
      _.isGlobal = t4;
      _.span = t5;
    },
    WarnRule: function WarnRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    WhileRule$(condition, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.WhileRule(condition, span, t1, t2);
    },
    WhileRule: function WhileRule(t0, t1, t2, t3) {
      var _ = this;
      _.condition = t0;
      _.span = t1;
      _.children = t2;
      _.hasDeclarations = t3;
    },
    SupportsAnything: function SupportsAnything(t0, t1) {
      this.contents = t0;
      this.span = t1;
    },
    SupportsDeclaration: function SupportsDeclaration(t0, t1, t2) {
      this.name = t0;
      this.value = t1;
      this.span = t2;
    },
    SupportsFunction: function SupportsFunction(t0, t1, t2) {
      this.name = t0;
      this.$arguments = t1;
      this.span = t2;
    },
    SupportsInterpolation: function SupportsInterpolation(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    SupportsNegation: function SupportsNegation(t0, t1) {
      this.condition = t0;
      this.span = t1;
    },
    SupportsOperation: function SupportsOperation(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.right = t1;
      _.operator = t2;
      _.span = t3;
    },
    Selector: function Selector() {
    },
    AttributeSelector: function AttributeSelector(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.op = t1;
      _.value = t2;
      _.modifier = t3;
    },
    AttributeOperator: function AttributeOperator(t0) {
      this._attribute$_text = t0;
    },
    ClassSelector: function ClassSelector(t0) {
      this.name = t0;
    },
    ComplexSelector$(components, lineBreak) {
      var t1 = A.List_List$unmodifiable(components, type$.ComplexSelectorComponent);
      if (t1.length === 0)
        A.throwExpression(A.ArgumentError$("components may not be empty.", null));
      return new A.ComplexSelector(t1, lineBreak);
    },
    ComplexSelector: function ComplexSelector(t0, t1) {
      var _ = this;
      _.components = t0;
      _.lineBreak = t1;
      _._complex$_maxSpecificity = _._minSpecificity = null;
      _.__ComplexSelector_isInvisible = $;
    },
    ComplexSelector_isInvisible_closure: function ComplexSelector_isInvisible_closure() {
    },
    Combinator: function Combinator(t0) {
      this._complex$_text = t0;
    },
    CompoundSelector$(components) {
      var t1 = A.List_List$unmodifiable(components, type$.SimpleSelector);
      if (t1.length === 0)
        A.throwExpression(A.ArgumentError$("components may not be empty.", null));
      return new A.CompoundSelector(t1);
    },
    CompoundSelector: function CompoundSelector(t0) {
      this.components = t0;
      this._maxSpecificity = this._compound$_minSpecificity = null;
    },
    CompoundSelector_isInvisible_closure: function CompoundSelector_isInvisible_closure() {
    },
    IDSelector: function IDSelector(t0) {
      this.name = t0;
    },
    IDSelector_unify_closure: function IDSelector_unify_closure(t0) {
      this.$this = t0;
    },
    SelectorList$(components) {
      var t1 = A.List_List$unmodifiable(components, type$.ComplexSelector);
      if (t1.length === 0)
        A.throwExpression(A.ArgumentError$("components may not be empty.", null));
      return new A.SelectorList(t1);
    },
    SelectorList_SelectorList$parse(contents, allowParent, allowPlaceholder, logger) {
      return A.SelectorParser$(contents, allowParent, allowPlaceholder, logger, null).parse$0();
    },
    SelectorList: function SelectorList(t0) {
      this.components = t0;
    },
    SelectorList_isInvisible_closure: function SelectorList_isInvisible_closure() {
    },
    SelectorList_asSassList_closure: function SelectorList_asSassList_closure() {
    },
    SelectorList_asSassList__closure: function SelectorList_asSassList__closure() {
    },
    SelectorList_unify_closure: function SelectorList_unify_closure(t0) {
      this.other = t0;
    },
    SelectorList_unify__closure: function SelectorList_unify__closure(t0) {
      this.complex1 = t0;
    },
    SelectorList_unify___closure: function SelectorList_unify___closure() {
    },
    SelectorList_resolveParentSelectors_closure: function SelectorList_resolveParentSelectors_closure(t0, t1, t2) {
      this.$this = t0;
      this.implicitParent = t1;
      this.parent = t2;
    },
    SelectorList_resolveParentSelectors__closure: function SelectorList_resolveParentSelectors__closure(t0) {
      this.complex = t0;
    },
    SelectorList_resolveParentSelectors__closure0: function SelectorList_resolveParentSelectors__closure0(t0) {
      this._box_0 = t0;
    },
    SelectorList__complexContainsParentSelector_closure: function SelectorList__complexContainsParentSelector_closure() {
    },
    SelectorList__complexContainsParentSelector__closure: function SelectorList__complexContainsParentSelector__closure() {
    },
    SelectorList__resolveParentSelectorsCompound_closure: function SelectorList__resolveParentSelectorsCompound_closure() {
    },
    SelectorList__resolveParentSelectorsCompound_closure0: function SelectorList__resolveParentSelectorsCompound_closure0(t0) {
      this.parent = t0;
    },
    SelectorList__resolveParentSelectorsCompound_closure1: function SelectorList__resolveParentSelectorsCompound_closure1(t0, t1) {
      this.compound = t0;
      this.resolvedMembers = t1;
    },
    ParentSelector: function ParentSelector(t0) {
      this.suffix = t0;
    },
    PlaceholderSelector: function PlaceholderSelector(t0) {
      this.name = t0;
    },
    PseudoSelector$($name, argument, element, selector) {
      var t1 = !element,
        t2 = t1 && !A.PseudoSelector__isFakePseudoElement($name);
      return new A.PseudoSelector($name, A.unvendor($name), t2, t1, argument, selector);
    },
    PseudoSelector__isFakePseudoElement($name) {
      switch (B.JSString_methods._codeUnitAt$1($name, 0)) {
        case 97:
        case 65:
          return A.equalsIgnoreCase($name, "after");
        case 98:
        case 66:
          return A.equalsIgnoreCase($name, "before");
        case 102:
        case 70:
          return A.equalsIgnoreCase($name, "first-line") || A.equalsIgnoreCase($name, "first-letter");
        default:
          return false;
      }
    },
    PseudoSelector: function PseudoSelector(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.normalizedName = t1;
      _.isClass = t2;
      _.isSyntacticClass = t3;
      _.argument = t4;
      _.selector = t5;
      _._pseudo$_maxSpecificity = _._pseudo$_minSpecificity = null;
    },
    PseudoSelector_unify_closure: function PseudoSelector_unify_closure() {
    },
    QualifiedName: function QualifiedName(t0, t1) {
      this.name = t0;
      this.namespace = t1;
    },
    SimpleSelector: function SimpleSelector() {
    },
    TypeSelector: function TypeSelector(t0) {
      this.name = t0;
    },
    UniversalSelector: function UniversalSelector(t0) {
      this.namespace = t0;
    },
    compileAsync(path, charset, importCache, logger, quietDeps, sourceMap, style, syntax, verbose) {
      return A.compileAsync$body(path, charset, importCache, logger, quietDeps, sourceMap, style, syntax, verbose);
    },
    compileAsync$body(path, charset, importCache, logger, quietDeps, sourceMap, style, syntax, verbose) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CompileResult),
        $async$returnValue, t1, terseLogger, t2, stylesheet, result;
      var $async$compileAsync = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!verbose) {
                t1 = logger == null ? new A.StderrLogger(false) : logger;
                terseLogger = new A.TerseLogger(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int), t1);
                logger = terseLogger;
              } else
                terseLogger = null;
              t1 = syntax === A.Syntax_forPath(path);
              $async$goto = t1 ? 3 : 5;
              break;
            case 3:
              // then
              t1 = $.$get$context();
              t2 = t1.absolute$7(".", null, null, null, null, null, null);
              $async$goto = 6;
              return A._asyncAwait(importCache.importCanonical$3$originalUrl(new A.FilesystemImporter(t2), t1.toUri$1(J.$eq$(J.get$platform$x(self.process), "win32") || J.$eq$(J.get$platform$x(self.process), "darwin") ? A._realCasePath(t1.absolute$7(t1.normalize$1(path), null, null, null, null, null, null)) : t1.canonicalize$1(0, path)), t1.toUri$1(path)), $async$compileAsync);
            case 6:
              // returning from await.
              t2 = $async$result;
              t2.toString;
              stylesheet = t2;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              t1 = A.readFile(path);
              t2 = $.$get$context();
              stylesheet = A.Stylesheet_Stylesheet$parse(t1, syntax, logger, t2.toUri$1(path));
              t1 = t2;
            case 4:
              // join
              $async$goto = 7;
              return A._asyncAwait(A._compileStylesheet0(stylesheet, logger, importCache, null, new A.FilesystemImporter(t1.absolute$7(".", null, null, null, null, null, null)), null, style, true, null, null, quietDeps, sourceMap, charset), $async$compileAsync);
            case 7:
              // returning from await.
              result = $async$result;
              if (terseLogger != null)
                terseLogger.summarize$1$node(false);
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$compileAsync, $async$completer);
    },
    compileStringAsync(source, charset, importCache, importer, logger, quietDeps, sourceMap, style, syntax, verbose) {
      return A.compileStringAsync$body(source, charset, importCache, importer, logger, quietDeps, sourceMap, style, syntax, verbose);
    },
    compileStringAsync$body(source, charset, importCache, importer, logger, quietDeps, sourceMap, style, syntax, verbose) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CompileResult),
        $async$returnValue, t1, terseLogger, stylesheet, result;
      var $async$compileStringAsync = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!verbose) {
                t1 = logger == null ? new A.StderrLogger(false) : logger;
                terseLogger = new A.TerseLogger(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int), t1);
                logger = terseLogger;
              } else
                terseLogger = null;
              stylesheet = A.Stylesheet_Stylesheet$parse(source, syntax, logger, null);
              $async$goto = 3;
              return A._asyncAwait(A._compileStylesheet0(stylesheet, logger, importCache, null, importer, null, style, true, null, null, quietDeps, sourceMap, charset), $async$compileStringAsync);
            case 3:
              // returning from await.
              result = $async$result;
              if (terseLogger != null)
                terseLogger.summarize$1$node(false);
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$compileStringAsync, $async$completer);
    },
    _compileStylesheet0(stylesheet, logger, importCache, nodeImporter, importer, functions, style, useSpaces, indentWidth, lineFeed, quietDeps, sourceMap, charset) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CompileResult),
        $async$returnValue, serializeResult, resultSourceMap, $async$temp1;
      var $async$_compileStylesheet0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A._EvaluateVisitor$0(functions, importCache, logger, nodeImporter, quietDeps, sourceMap).run$2(0, importer, stylesheet), $async$_compileStylesheet0);
            case 3:
              // returning from await.
              serializeResult = $async$temp1.serialize($async$result.stylesheet, charset, indentWidth, false, lineFeed, sourceMap, style, true);
              resultSourceMap = serializeResult.sourceMap;
              if (resultSourceMap != null && true)
                A.mapInPlace(resultSourceMap.urls, new A._compileStylesheet_closure0(stylesheet, importCache));
              $async$returnValue = new A.CompileResult(serializeResult);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_compileStylesheet0, $async$completer);
    },
    _compileStylesheet_closure0: function _compileStylesheet_closure0(t0, t1) {
      this.stylesheet = t0;
      this.importCache = t1;
    },
    AsyncEnvironment$() {
      var t1 = type$.String,
        t2 = type$.Module_AsyncCallable,
        t3 = type$.AstNode,
        t4 = type$.int,
        t5 = type$.AsyncCallable,
        t6 = type$.JSArray_Map_String_AsyncCallable;
      return new A.AsyncEnvironment(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), A.LinkedHashMap_LinkedHashMap$_empty(t1, t3), A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), null, null, A._setArrayType([], type$.JSArray_Module_AsyncCallable), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value)], type$.JSArray_Map_String_Value), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t3)], type$.JSArray_Map_String_AstNode), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), null);
    },
    AsyncEnvironment$_(_modules, _namespaceNodes, _globalModules, _importedModules, _forwardedModules, _nestedForwardedModules, _allModules, _variables, _variableNodes, _functions, _mixins, _content) {
      var t1 = type$.String,
        t2 = type$.int;
      return new A.AsyncEnvironment(_modules, _namespaceNodes, _globalModules, _importedModules, _forwardedModules, _nestedForwardedModules, _allModules, _variables, _variableNodes, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _functions, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _mixins, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _content);
    },
    _EnvironmentModule__EnvironmentModule0(environment, css, extensionStore, forwarded) {
      var t1, t2, t3, t4, t5, t6;
      if (forwarded == null)
        forwarded = B.Set_empty0;
      t1 = A._EnvironmentModule__makeModulesByVariable0(forwarded);
      t2 = A._EnvironmentModule__memberMap0(B.JSArray_methods.get$first(environment._async_environment$_variables), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure5(), type$.Map_String_Value), type$.Value);
      t3 = A._EnvironmentModule__memberMap0(B.JSArray_methods.get$first(environment._async_environment$_variableNodes), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure6(), type$.Map_String_AstNode), type$.AstNode);
      t4 = type$.Map_String_AsyncCallable;
      t5 = type$.AsyncCallable;
      t6 = A._EnvironmentModule__memberMap0(B.JSArray_methods.get$first(environment._async_environment$_functions), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure7(), t4), t5);
      t5 = A._EnvironmentModule__memberMap0(B.JSArray_methods.get$first(environment._async_environment$_mixins), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure8(), t4), t5);
      t4 = J.get$isNotEmpty$asx(css.get$children(css)) || B.JSArray_methods.any$1(environment._async_environment$_allModules, new A._EnvironmentModule__EnvironmentModule_closure9());
      return A._EnvironmentModule$_0(environment, css, extensionStore, t1, t2, t3, t6, t5, t4, !extensionStore.get$isEmpty(extensionStore) || B.JSArray_methods.any$1(environment._async_environment$_allModules, new A._EnvironmentModule__EnvironmentModule_closure10()));
    },
    _EnvironmentModule__makeModulesByVariable0(forwarded) {
      var modulesByVariable, t1, t2, t3, t4, t5;
      if (forwarded.get$isEmpty(forwarded))
        return B.Map_empty3;
      modulesByVariable = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Module_AsyncCallable);
      for (t1 = forwarded.get$iterator(forwarded); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        if (t2 instanceof A._EnvironmentModule0) {
          for (t3 = t2._async_environment$_modulesByVariable, t3 = t3.get$values(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
            t4 = t3.get$current(t3);
            t5 = t4.get$variables();
            A.setAll(modulesByVariable, t5.get$keys(t5), t4);
          }
          A.setAll(modulesByVariable, J.get$keys$z(B.JSArray_methods.get$first(t2._async_environment$_environment._async_environment$_variables)), t2);
        } else {
          t3 = t2.get$variables();
          A.setAll(modulesByVariable, t3.get$keys(t3), t2);
        }
      }
      return modulesByVariable;
    },
    _EnvironmentModule__memberMap0(localMap, otherMaps, $V) {
      var t1, t2, t3;
      localMap = new A.PublicMemberMapView(localMap, $V._eval$1("PublicMemberMapView<0>"));
      if (otherMaps.get$isEmpty(otherMaps))
        return localMap;
      t1 = A._setArrayType([], $V._eval$1("JSArray<Map<String,0>>"));
      for (t2 = otherMaps.get$iterator(otherMaps); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        if (t3.get$isNotEmpty(t3))
          t1.push(t3);
      }
      t1.push(localMap);
      if (t1.length === 1)
        return localMap;
      return A.MergedMapView$(t1, type$.String, $V);
    },
    _EnvironmentModule$_0(_environment, css, extensionStore, _modulesByVariable, variables, variableNodes, functions, mixins, transitivelyContainsCss, transitivelyContainsExtensions) {
      return new A._EnvironmentModule0(_environment._async_environment$_allModules, variables, variableNodes, functions, mixins, extensionStore, css, transitivelyContainsCss, transitivelyContainsExtensions, _environment, _modulesByVariable);
    },
    AsyncEnvironment: function AsyncEnvironment(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._async_environment$_modules = t0;
      _._async_environment$_namespaceNodes = t1;
      _._async_environment$_globalModules = t2;
      _._async_environment$_importedModules = t3;
      _._async_environment$_forwardedModules = t4;
      _._async_environment$_nestedForwardedModules = t5;
      _._async_environment$_allModules = t6;
      _._async_environment$_variables = t7;
      _._async_environment$_variableNodes = t8;
      _._async_environment$_variableIndices = t9;
      _._async_environment$_functions = t10;
      _._async_environment$_functionIndices = t11;
      _._async_environment$_mixins = t12;
      _._async_environment$_mixinIndices = t13;
      _._async_environment$_content = t14;
      _._async_environment$_inMixin = false;
      _._async_environment$_inSemiGlobalScope = true;
      _._async_environment$_lastVariableIndex = _._async_environment$_lastVariableName = null;
    },
    AsyncEnvironment_importForwards_closure: function AsyncEnvironment_importForwards_closure() {
    },
    AsyncEnvironment_importForwards_closure0: function AsyncEnvironment_importForwards_closure0() {
    },
    AsyncEnvironment_importForwards_closure1: function AsyncEnvironment_importForwards_closure1() {
    },
    AsyncEnvironment__getVariableFromGlobalModule_closure: function AsyncEnvironment__getVariableFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    AsyncEnvironment_setVariable_closure: function AsyncEnvironment_setVariable_closure(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    AsyncEnvironment_setVariable_closure0: function AsyncEnvironment_setVariable_closure0(t0) {
      this.name = t0;
    },
    AsyncEnvironment_setVariable_closure1: function AsyncEnvironment_setVariable_closure1(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    AsyncEnvironment__getFunctionFromGlobalModule_closure: function AsyncEnvironment__getFunctionFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    AsyncEnvironment__getMixinFromGlobalModule_closure: function AsyncEnvironment__getMixinFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    AsyncEnvironment_toModule_closure: function AsyncEnvironment_toModule_closure() {
    },
    AsyncEnvironment_toDummyModule_closure: function AsyncEnvironment_toDummyModule_closure() {
    },
    AsyncEnvironment__fromOneModule_closure: function AsyncEnvironment__fromOneModule_closure(t0, t1) {
      this.callback = t0;
      this.T = t1;
    },
    AsyncEnvironment__fromOneModule__closure: function AsyncEnvironment__fromOneModule__closure(t0, t1) {
      this.entry = t0;
      this.T = t1;
    },
    _EnvironmentModule0: function _EnvironmentModule0(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.upstream = t0;
      _.variables = t1;
      _.variableNodes = t2;
      _.functions = t3;
      _.mixins = t4;
      _.extensionStore = t5;
      _.css = t6;
      _.transitivelyContainsCss = t7;
      _.transitivelyContainsExtensions = t8;
      _._async_environment$_environment = t9;
      _._async_environment$_modulesByVariable = t10;
    },
    _EnvironmentModule__EnvironmentModule_closure5: function _EnvironmentModule__EnvironmentModule_closure5() {
    },
    _EnvironmentModule__EnvironmentModule_closure6: function _EnvironmentModule__EnvironmentModule_closure6() {
    },
    _EnvironmentModule__EnvironmentModule_closure7: function _EnvironmentModule__EnvironmentModule_closure7() {
    },
    _EnvironmentModule__EnvironmentModule_closure8: function _EnvironmentModule__EnvironmentModule_closure8() {
    },
    _EnvironmentModule__EnvironmentModule_closure9: function _EnvironmentModule__EnvironmentModule_closure9() {
    },
    _EnvironmentModule__EnvironmentModule_closure10: function _EnvironmentModule__EnvironmentModule_closure10() {
    },
    AsyncImportCache__toImporters(importers, loadPaths, packageConfig) {
      var sassPath, t2, t3, _i, path, _null = null,
        t1 = J.get$env$x(self.process);
      if (t1 == null)
        t1 = type$.Object._as(t1);
      sassPath = A._asStringQ(t1.SASS_PATH);
      t1 = A._setArrayType([], type$.JSArray_AsyncImporter_2);
      for (t2 = J.get$iterator$ax(loadPaths); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        t1.push(new A.FilesystemImporter($.$get$context().absolute$7(t3, _null, _null, _null, _null, _null, _null)));
      }
      if (sassPath != null) {
        t2 = sassPath.split(J.$eq$(J.get$platform$x(self.process), "win32") ? ";" : ":");
        t3 = t2.length;
        _i = 0;
        for (; _i < t3; ++_i) {
          path = t2[_i];
          t1.push(new A.FilesystemImporter($.$get$context().absolute$7(path, _null, _null, _null, _null, _null, _null)));
        }
      }
      return t1;
    },
    AsyncImportCache: function AsyncImportCache(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._async_import_cache$_importers = t0;
      _._async_import_cache$_logger = t1;
      _._async_import_cache$_canonicalizeCache = t2;
      _._async_import_cache$_relativeCanonicalizeCache = t3;
      _._async_import_cache$_importCache = t4;
      _._async_import_cache$_resultsCache = t5;
    },
    AsyncImportCache_canonicalize_closure: function AsyncImportCache_canonicalize_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.baseUrl = t1;
      _.url = t2;
      _.baseImporter = t3;
      _.forImport = t4;
    },
    AsyncImportCache_canonicalize_closure0: function AsyncImportCache_canonicalize_closure0(t0, t1, t2) {
      this.$this = t0;
      this.url = t1;
      this.forImport = t2;
    },
    AsyncImportCache__canonicalize_closure: function AsyncImportCache__canonicalize_closure(t0, t1) {
      this.importer = t0;
      this.url = t1;
    },
    AsyncImportCache_importCanonical_closure: function AsyncImportCache_importCanonical_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _.originalUrl = t3;
      _.quiet = t4;
    },
    AsyncImportCache_humanize_closure: function AsyncImportCache_humanize_closure(t0) {
      this.canonicalUrl = t0;
    },
    AsyncImportCache_humanize_closure0: function AsyncImportCache_humanize_closure0() {
    },
    AsyncImportCache_humanize_closure1: function AsyncImportCache_humanize_closure1() {
    },
    AsyncBuiltInCallable$mixin($name, $arguments, callback, url) {
      return new A.AsyncBuiltInCallable($name, A.ScssParser$("@mixin " + $name + "(" + $arguments + ") {", null, url).parseArgumentDeclaration$0(), new A.AsyncBuiltInCallable$mixin_closure(callback));
    },
    AsyncBuiltInCallable: function AsyncBuiltInCallable(t0, t1, t2) {
      this.name = t0;
      this._async_built_in$_arguments = t1;
      this._async_built_in$_callback = t2;
    },
    AsyncBuiltInCallable$mixin_closure: function AsyncBuiltInCallable$mixin_closure(t0) {
      this.callback = t0;
    },
    BuiltInCallable$function($name, $arguments, callback, url) {
      return new A.BuiltInCallable($name, A._setArrayType([new A.Tuple2(A.ScssParser$("@function " + $name + "(" + $arguments + ") {", null, url).parseArgumentDeclaration$0(), callback, type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value)], type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value));
    },
    BuiltInCallable$mixin($name, $arguments, callback, url) {
      return new A.BuiltInCallable($name, A._setArrayType([new A.Tuple2(A.ScssParser$("@mixin " + $name + "(" + $arguments + ") {", null, url).parseArgumentDeclaration$0(), new A.BuiltInCallable$mixin_closure(callback), type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value)], type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value));
    },
    BuiltInCallable$overloadedFunction($name, overloads) {
      var t2, t3, t4, t5, t6, t7, t8,
        t1 = A._setArrayType([], type$.JSArray_Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value);
      for (t2 = overloads.get$entries(overloads), t2 = t2.get$iterator(t2), t3 = type$.Tuple2_of_ArgumentDeclaration_and_Value_Function_List_Value, t4 = "@function " + $name + "(", t5 = type$.String, t6 = type$.VariableDeclaration; t2.moveNext$0();) {
        t7 = t2.get$current(t2);
        t8 = A.SpanScanner$(t4 + A.S(t7.key) + ") {", null);
        t1.push(new A.Tuple2(new A.ScssParser(A.LinkedHashMap_LinkedHashMap$_empty(t5, t6), t8, B.StderrLogger_false).parseArgumentDeclaration$0(), t7.value, t3));
      }
      return new A.BuiltInCallable($name, t1);
    },
    BuiltInCallable: function BuiltInCallable(t0, t1) {
      this.name = t0;
      this._overloads = t1;
    },
    BuiltInCallable$mixin_closure: function BuiltInCallable$mixin_closure(t0) {
      this.callback = t0;
    },
    PlainCssCallable: function PlainCssCallable(t0) {
      this.name = t0;
    },
    UserDefinedCallable: function UserDefinedCallable(t0, t1, t2, t3) {
      var _ = this;
      _.declaration = t0;
      _.environment = t1;
      _.inDependency = t2;
      _.$ti = t3;
    },
    _compileStylesheet(stylesheet, logger, importCache, nodeImporter, importer, functions, style, useSpaces, indentWidth, lineFeed, quietDeps, sourceMap, charset) {
      var serializeResult = A.serialize(A._EvaluateVisitor$(functions, importCache, logger, nodeImporter, quietDeps, sourceMap).run$2(0, importer, stylesheet).stylesheet, charset, indentWidth, false, lineFeed, sourceMap, style, true),
        resultSourceMap = serializeResult.sourceMap;
      if (resultSourceMap != null && true)
        A.mapInPlace(resultSourceMap.urls, new A._compileStylesheet_closure(stylesheet, importCache));
      return new A.CompileResult(serializeResult);
    },
    _compileStylesheet_closure: function _compileStylesheet_closure(t0, t1) {
      this.stylesheet = t0;
      this.importCache = t1;
    },
    CompileResult: function CompileResult(t0) {
      this._serialize = t0;
    },
    Configuration: function Configuration(t0) {
      this._values = t0;
    },
    Configuration_toString_closure: function Configuration_toString_closure() {
    },
    ExplicitConfiguration: function ExplicitConfiguration(t0, t1) {
      this.nodeWithSpan = t0;
      this._values = t1;
    },
    ConfiguredValue: function ConfiguredValue(t0, t1, t2) {
      this.value = t0;
      this.configurationSpan = t1;
      this.assignmentNode = t2;
    },
    Environment$() {
      var t1 = type$.String,
        t2 = type$.Module_Callable,
        t3 = type$.AstNode,
        t4 = type$.int,
        t5 = type$.Callable,
        t6 = type$.JSArray_Map_String_Callable;
      return new A.Environment(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), A.LinkedHashMap_LinkedHashMap$_empty(t1, t3), A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), null, null, A._setArrayType([], type$.JSArray_Module_Callable), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value)], type$.JSArray_Map_String_Value), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t3)], type$.JSArray_Map_String_AstNode), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), null);
    },
    Environment$_(_modules, _namespaceNodes, _globalModules, _importedModules, _forwardedModules, _nestedForwardedModules, _allModules, _variables, _variableNodes, _functions, _mixins, _content) {
      var t1 = type$.String,
        t2 = type$.int;
      return new A.Environment(_modules, _namespaceNodes, _globalModules, _importedModules, _forwardedModules, _nestedForwardedModules, _allModules, _variables, _variableNodes, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _functions, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _mixins, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _content);
    },
    _EnvironmentModule__EnvironmentModule(environment, css, extensionStore, forwarded) {
      var t1, t2, t3, t4, t5, t6;
      if (forwarded == null)
        forwarded = B.Set_empty;
      t1 = A._EnvironmentModule__makeModulesByVariable(forwarded);
      t2 = A._EnvironmentModule__memberMap(B.JSArray_methods.get$first(environment._variables), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure(), type$.Map_String_Value), type$.Value);
      t3 = A._EnvironmentModule__memberMap(B.JSArray_methods.get$first(environment._variableNodes), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure0(), type$.Map_String_AstNode), type$.AstNode);
      t4 = type$.Map_String_Callable;
      t5 = type$.Callable;
      t6 = A._EnvironmentModule__memberMap(B.JSArray_methods.get$first(environment._functions), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure1(), t4), t5);
      t5 = A._EnvironmentModule__memberMap(B.JSArray_methods.get$first(environment._mixins), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure2(), t4), t5);
      t4 = J.get$isNotEmpty$asx(css.get$children(css)) || B.JSArray_methods.any$1(environment._allModules, new A._EnvironmentModule__EnvironmentModule_closure3());
      return A._EnvironmentModule$_(environment, css, extensionStore, t1, t2, t3, t6, t5, t4, !extensionStore.get$isEmpty(extensionStore) || B.JSArray_methods.any$1(environment._allModules, new A._EnvironmentModule__EnvironmentModule_closure4()));
    },
    _EnvironmentModule__makeModulesByVariable(forwarded) {
      var modulesByVariable, t1, t2, t3, t4, t5;
      if (forwarded.get$isEmpty(forwarded))
        return B.Map_empty;
      modulesByVariable = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Module_Callable);
      for (t1 = forwarded.get$iterator(forwarded); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        if (t2 instanceof A._EnvironmentModule) {
          for (t3 = t2._modulesByVariable, t3 = t3.get$values(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
            t4 = t3.get$current(t3);
            t5 = t4.get$variables();
            A.setAll(modulesByVariable, t5.get$keys(t5), t4);
          }
          A.setAll(modulesByVariable, J.get$keys$z(B.JSArray_methods.get$first(t2._environment$_environment._variables)), t2);
        } else {
          t3 = t2.get$variables();
          A.setAll(modulesByVariable, t3.get$keys(t3), t2);
        }
      }
      return modulesByVariable;
    },
    _EnvironmentModule__memberMap(localMap, otherMaps, $V) {
      var t1, t2, t3;
      localMap = new A.PublicMemberMapView(localMap, $V._eval$1("PublicMemberMapView<0>"));
      if (otherMaps.get$isEmpty(otherMaps))
        return localMap;
      t1 = A._setArrayType([], $V._eval$1("JSArray<Map<String,0>>"));
      for (t2 = otherMaps.get$iterator(otherMaps); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        if (t3.get$isNotEmpty(t3))
          t1.push(t3);
      }
      t1.push(localMap);
      if (t1.length === 1)
        return localMap;
      return A.MergedMapView$(t1, type$.String, $V);
    },
    _EnvironmentModule$_(_environment, css, extensionStore, _modulesByVariable, variables, variableNodes, functions, mixins, transitivelyContainsCss, transitivelyContainsExtensions) {
      return new A._EnvironmentModule(_environment._allModules, variables, variableNodes, functions, mixins, extensionStore, css, transitivelyContainsCss, transitivelyContainsExtensions, _environment, _modulesByVariable);
    },
    Environment: function Environment(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._environment$_modules = t0;
      _._namespaceNodes = t1;
      _._globalModules = t2;
      _._importedModules = t3;
      _._forwardedModules = t4;
      _._nestedForwardedModules = t5;
      _._allModules = t6;
      _._variables = t7;
      _._variableNodes = t8;
      _._variableIndices = t9;
      _._functions = t10;
      _._functionIndices = t11;
      _._mixins = t12;
      _._mixinIndices = t13;
      _._content = t14;
      _._inMixin = false;
      _._inSemiGlobalScope = true;
      _._lastVariableIndex = _._lastVariableName = null;
    },
    Environment_importForwards_closure: function Environment_importForwards_closure() {
    },
    Environment_importForwards_closure0: function Environment_importForwards_closure0() {
    },
    Environment_importForwards_closure1: function Environment_importForwards_closure1() {
    },
    Environment__getVariableFromGlobalModule_closure: function Environment__getVariableFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    Environment_setVariable_closure: function Environment_setVariable_closure(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    Environment_setVariable_closure0: function Environment_setVariable_closure0(t0) {
      this.name = t0;
    },
    Environment_setVariable_closure1: function Environment_setVariable_closure1(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    Environment__getFunctionFromGlobalModule_closure: function Environment__getFunctionFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    Environment__getMixinFromGlobalModule_closure: function Environment__getMixinFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    Environment_toModule_closure: function Environment_toModule_closure() {
    },
    Environment_toDummyModule_closure: function Environment_toDummyModule_closure() {
    },
    Environment__fromOneModule_closure: function Environment__fromOneModule_closure(t0, t1) {
      this.callback = t0;
      this.T = t1;
    },
    Environment__fromOneModule__closure: function Environment__fromOneModule__closure(t0, t1) {
      this.entry = t0;
      this.T = t1;
    },
    _EnvironmentModule: function _EnvironmentModule(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.upstream = t0;
      _.variables = t1;
      _.variableNodes = t2;
      _.functions = t3;
      _.mixins = t4;
      _.extensionStore = t5;
      _.css = t6;
      _.transitivelyContainsCss = t7;
      _.transitivelyContainsExtensions = t8;
      _._environment$_environment = t9;
      _._modulesByVariable = t10;
    },
    _EnvironmentModule__EnvironmentModule_closure: function _EnvironmentModule__EnvironmentModule_closure() {
    },
    _EnvironmentModule__EnvironmentModule_closure0: function _EnvironmentModule__EnvironmentModule_closure0() {
    },
    _EnvironmentModule__EnvironmentModule_closure1: function _EnvironmentModule__EnvironmentModule_closure1() {
    },
    _EnvironmentModule__EnvironmentModule_closure2: function _EnvironmentModule__EnvironmentModule_closure2() {
    },
    _EnvironmentModule__EnvironmentModule_closure3: function _EnvironmentModule__EnvironmentModule_closure3() {
    },
    _EnvironmentModule__EnvironmentModule_closure4: function _EnvironmentModule__EnvironmentModule_closure4() {
    },
    SassException$(message, span) {
      return new A.SassException(message, span);
    },
    MultiSpanSassRuntimeException$(message, span, primaryLabel, secondarySpans, trace) {
      return new A.MultiSpanSassRuntimeException(trace, primaryLabel, A.ConstantMap_ConstantMap$from(secondarySpans, type$.FileSpan, type$.String), message, span);
    },
    SassFormatException$(message, span) {
      return new A.SassFormatException(message, span);
    },
    SassScriptException$(message) {
      return new A.SassScriptException(message);
    },
    MultiSpanSassScriptException$(message, primaryLabel, secondarySpans) {
      return new A.MultiSpanSassScriptException(primaryLabel, A.ConstantMap_ConstantMap$from(secondarySpans, type$.FileSpan, type$.String), message);
    },
    SassException: function SassException(t0, t1) {
      this._span_exception$_message = t0;
      this._span = t1;
    },
    MultiSpanSassException: function MultiSpanSassException(t0, t1, t2, t3) {
      var _ = this;
      _.primaryLabel = t0;
      _.secondarySpans = t1;
      _._span_exception$_message = t2;
      _._span = t3;
    },
    SassRuntimeException: function SassRuntimeException(t0, t1, t2) {
      this.trace = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    MultiSpanSassRuntimeException: function MultiSpanSassRuntimeException(t0, t1, t2, t3, t4) {
      var _ = this;
      _.trace = t0;
      _.primaryLabel = t1;
      _.secondarySpans = t2;
      _._span_exception$_message = t3;
      _._span = t4;
    },
    SassFormatException: function SassFormatException(t0, t1) {
      this._span_exception$_message = t0;
      this._span = t1;
    },
    SassScriptException: function SassScriptException(t0) {
      this.message = t0;
    },
    MultiSpanSassScriptException: function MultiSpanSassScriptException(t0, t1, t2) {
      this.primaryLabel = t0;
      this.secondarySpans = t1;
      this.message = t2;
    },
    compileStylesheet(options, graph, source, destination, ifModified) {
      return A.compileStylesheet$body(options, graph, source, destination, ifModified);
    },
    compileStylesheet$body(options, graph, source, destination, ifModified) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], syntax, result, importCache, error, exception, t2, t3, t4, t5, t6, t7, t8, t9, result0, logger, terseLogger, stylesheet, css, buffer, sourceName, t1, importer, $async$exception;
      var $async$compileStylesheet = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$context();
              importer = new A.FilesystemImporter(t1.absolute$7(".", null, null, null, null, null, null));
              if (ifModified)
                try {
                  if (source != null && destination != null && !graph.modifiedSince$3(t1.toUri$1(source), A.modificationTime(destination), importer)) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                } catch (exception) {
                  if (!(A.unwrapException(exception) instanceof A.FileSystemException))
                    throw exception;
                }
              syntax = null;
              if (A._asBoolQ(options._ifParsed$1("indented")) === true)
                syntax = B.Syntax_Sass;
              else if (source != null)
                syntax = A.Syntax_forPath(source);
              else
                syntax = B.Syntax_SCSS;
              result = null;
              $async$handler = 4;
              t1 = options._options;
              $async$goto = A._asBool(t1.$index(0, "async")) ? 7 : 9;
              break;
            case 7:
              // then
              t2 = type$.List_String._as(t1.$index(0, "load-path"));
              t3 = A._asBool(t1.$index(0, "quiet")) ? $.$get$Logger_quiet() : new A.StderrLogger(options.get$color());
              t4 = type$.nullable_Tuple3_AsyncImporter_Uri_Uri;
              t5 = type$.Uri;
              t2 = A.AsyncImportCache__toImporters(null, t2, null);
              importCache = new A.AsyncImportCache(t2, t3, A.LinkedHashMap_LinkedHashMap$_empty(type$.Tuple2_Uri_bool, t4), A.LinkedHashMap_LinkedHashMap$_empty(type$.Tuple4_of_Uri_and_bool_and_AsyncImporter_and_nullable_Uri, t4), A.LinkedHashMap_LinkedHashMap$_empty(t5, type$.nullable_Stylesheet), A.LinkedHashMap_LinkedHashMap$_empty(t5, type$.ImporterResult));
              $async$goto = source == null ? 10 : 12;
              break;
            case 10:
              // then
              $async$goto = 13;
              return A._asyncAwait(A.readStdin(), $async$compileStylesheet);
            case 13:
              // returning from await.
              t2 = $async$result;
              t3 = syntax;
              t4 = A._asBool(t1.$index(0, "quiet")) ? $.$get$Logger_quiet() : new A.StderrLogger(options.get$color());
              t5 = $.$get$context().absolute$7(".", null, null, null, null, null, null);
              t6 = J.$eq$(t1.$index(0, "style"), "compressed") ? B.OutputStyle_compressed : B.OutputStyle_expanded;
              t7 = A._asBool(t1.$index(0, "quiet-deps"));
              t8 = A._asBool(t1.$index(0, "verbose"));
              t9 = options.get$emitSourceMap();
              $async$goto = 14;
              return A._asyncAwait(A.compileStringAsync(t2, A._asBool(t1.$index(0, "charset")), importCache, new A.FilesystemImporter(t5), t4, t7, t9, t6, t3, t8), $async$compileStylesheet);
            case 14:
              // returning from await.
              result0 = $async$result;
              // goto join
              $async$goto = 11;
              break;
            case 12:
              // else
              t2 = syntax;
              t3 = A._asBool(t1.$index(0, "quiet")) ? $.$get$Logger_quiet() : new A.StderrLogger(options.get$color());
              t4 = J.$eq$(t1.$index(0, "style"), "compressed") ? B.OutputStyle_compressed : B.OutputStyle_expanded;
              t5 = A._asBool(t1.$index(0, "quiet-deps"));
              t6 = A._asBool(t1.$index(0, "verbose"));
              t7 = options.get$emitSourceMap();
              $async$goto = 15;
              return A._asyncAwait(A.compileAsync(source, A._asBool(t1.$index(0, "charset")), importCache, t3, t5, t7, t4, t2, t6), $async$compileStylesheet);
            case 15:
              // returning from await.
              result0 = $async$result;
            case 11:
              // join
              result = result0;
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              $async$goto = source == null ? 16 : 18;
              break;
            case 16:
              // then
              $async$goto = 19;
              return A._asyncAwait(A.readStdin(), $async$compileStylesheet);
            case 19:
              // returning from await.
              t2 = $async$result;
              t3 = syntax;
              logger = A._asBool(t1.$index(0, "quiet")) ? $.$get$Logger_quiet() : new A.StderrLogger(options.get$color());
              t4 = $.$get$context().absolute$7(".", null, null, null, null, null, null);
              t5 = J.$eq$(t1.$index(0, "style"), "compressed") ? B.OutputStyle_compressed : B.OutputStyle_expanded;
              t6 = A._asBool(t1.$index(0, "quiet-deps"));
              t7 = A._asBool(t1.$index(0, "verbose"));
              t8 = options.get$emitSourceMap();
              t1 = A._asBool(t1.$index(0, "charset"));
              if (!t7) {
                terseLogger = new A.TerseLogger(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int), logger);
                logger = terseLogger;
              } else
                terseLogger = null;
              stylesheet = A.Stylesheet_Stylesheet$parse(t2, t3 == null ? B.Syntax_SCSS : t3, logger, null);
              result0 = A._compileStylesheet(stylesheet, logger, graph.importCache, null, new A.FilesystemImporter(t4), null, t5, true, null, null, t6, t8, t1);
              if (terseLogger != null)
                terseLogger.summarize$1$node(false);
              // goto join
              $async$goto = 17;
              break;
            case 18:
              // else
              t2 = syntax;
              logger = A._asBool(t1.$index(0, "quiet")) ? $.$get$Logger_quiet() : new A.StderrLogger(options.get$color());
              importCache = graph.importCache;
              t3 = J.$eq$(t1.$index(0, "style"), "compressed") ? B.OutputStyle_compressed : B.OutputStyle_expanded;
              t4 = A._asBool(t1.$index(0, "quiet-deps"));
              t5 = A._asBool(t1.$index(0, "verbose"));
              t6 = options.get$emitSourceMap();
              t1 = A._asBool(t1.$index(0, "charset"));
              if (!t5) {
                terseLogger = new A.TerseLogger(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int), logger);
                logger = terseLogger;
              } else
                terseLogger = null;
              t5 = t2 == null || t2 === A.Syntax_forPath(source);
              if (t5) {
                t2 = $.$get$context();
                t5 = t2.absolute$7(".", null, null, null, null, null, null);
                t5 = importCache.importCanonical$3$originalUrl(new A.FilesystemImporter(t5), t2.toUri$1(J.$eq$(J.get$platform$x(self.process), "win32") || J.$eq$(J.get$platform$x(self.process), "darwin") ? A._realCasePath(t2.absolute$7(t2.normalize$1(source), null, null, null, null, null, null)) : t2.canonicalize$1(0, source)), t2.toUri$1(source));
                t5.toString;
                stylesheet = t5;
              } else {
                t5 = A.readFile(source);
                if (t2 == null)
                  t2 = A.Syntax_forPath(source);
                t7 = $.$get$context();
                stylesheet = A.Stylesheet_Stylesheet$parse(t5, t2, logger, t7.toUri$1(source));
                t2 = t7;
              }
              result0 = A._compileStylesheet(stylesheet, logger, importCache, null, new A.FilesystemImporter(t2.absolute$7(".", null, null, null, null, null, null)), null, t3, true, null, null, t4, t6, t1);
              if (terseLogger != null)
                terseLogger.summarize$1$node(false);
            case 17:
              // join
              result = result0;
            case 8:
              // join
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.SassException) {
                error = t1;
                if (options.get$emitErrorCss())
                  if (destination == null)
                    A.print(error.toCssString$0());
                  else {
                    A.ensureDir($.$get$context().dirname$1(destination));
                    A.writeFile(destination, error.toCssString$0() + "\n");
                  }
                throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              css = result._serialize.css + A._writeSourceMap(options, result._serialize.sourceMap, destination);
              if (destination == null) {
                if (css.length !== 0)
                  A.print(css);
              } else {
                A.ensureDir($.$get$context().dirname$1(destination));
                A.writeFile(destination, css + "\n");
              }
              t1 = options._options;
              if (!A._asBool(t1.$index(0, "quiet")))
                t1 = !A._asBool(t1.$index(0, "update")) && !A._asBool(t1.$index(0, "watch"));
              else
                t1 = true;
              if (t1) {
                // goto return
                $async$goto = 1;
                break;
              }
              buffer = new A.StringBuffer("");
              t1 = options.get$color() ? buffer._contents = "" + "\x1b[32m" : "";
              if (source == null)
                sourceName = "stdin";
              else {
                t2 = $.$get$context();
                sourceName = t2.prettyUri$1(t2.toUri$1(source));
              }
              destination.toString;
              t2 = $.$get$context();
              t2 = t1 + ("Compiled " + sourceName + " to " + t2.prettyUri$1(t2.toUri$1(destination)) + ".");
              buffer._contents = t2;
              if (options.get$color())
                buffer._contents = t2 + "\x1b[0m";
              A.print(buffer);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$compileStylesheet, $async$completer);
    },
    _writeSourceMap(options, sourceMap, destination) {
      var t1, sourceMapText, url, sourceMapPath, t2, escapedUrl;
      if (sourceMap == null)
        return "";
      if (destination != null) {
        t1 = $.$get$context();
        sourceMap.targetUrl = t1.toUri$1(A.ParsedPath_ParsedPath$parse(destination, t1.style).get$basename()).toString$0(0);
      }
      A.mapInPlace(sourceMap.urls, new A._writeSourceMap_closure(options, destination));
      t1 = options._options;
      sourceMapText = B.C_JsonCodec.encode$2$toEncodable(sourceMap.toJson$1$includeSourceContents(A._asBool(t1.$index(0, "embed-sources"))), null);
      if (A._asBool(t1.$index(0, "embed-source-map")))
        url = A.Uri_Uri$dataFromString(sourceMapText, B.C_Utf8Codec, "application/json");
      else {
        destination.toString;
        sourceMapPath = destination + ".map";
        t2 = $.$get$context();
        A.ensureDir(t2.dirname$1(sourceMapPath));
        A.writeFile(sourceMapPath, sourceMapText);
        url = t2.toUri$1(t2.relative$2$from(sourceMapPath, t2.dirname$1(destination)));
      }
      t2 = url.toString$0(0);
      escapedUrl = A.stringReplaceAllUnchecked(t2, "*/", "%2A/");
      t1 = (J.$eq$(t1.$index(0, "style"), "compressed") ? B.OutputStyle_compressed : B.OutputStyle_expanded) === B.OutputStyle_compressed ? "" : "\n\n";
      return t1 + ("/*# sourceMappingURL=" + escapedUrl + " */");
    },
    _writeSourceMap_closure: function _writeSourceMap_closure(t0, t1) {
      this.options = t0;
      this.destination = t1;
    },
    ExecutableOptions__separator(text) {
      var t1 = $.$get$ExecutableOptions__separatorBar(),
        t2 = B.JSString_methods.$mul(t1, 3),
        t3 = J.$eq$(self.process.stdout.isTTY, true) ? "\x1b[1m" : "",
        t4 = J.$eq$(self.process.stdout.isTTY, true) ? "\x1b[0m" : "";
      return t2 + " " + t3 + text + t4 + " " + B.JSString_methods.$mul(t1, 35 - text.length);
    },
    ExecutableOptions__fail(message) {
      return A.throwExpression(A.UsageException$(message));
    },
    ExecutableOptions_ExecutableOptions$parse(args) {
      var options, error, t1, exception;
      try {
        t1 = A.Parser$(null, $.$get$ExecutableOptions__parser(), A.ListQueue_ListQueue$of(args, type$.String), null, null).parse$0();
        if (t1.wasParsed$1("poll") && !A._asBool(t1.$index(0, "watch")))
          A.ExecutableOptions__fail("--poll may not be passed without --watch.");
        options = new A.ExecutableOptions(t1);
        if (A._asBool(options._options.$index(0, "help")))
          A.ExecutableOptions__fail("Compile Sass to CSS.");
        return options;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.FormatException._is(t1)) {
          error = t1;
          A.ExecutableOptions__fail(J.get$message$x(error));
        } else
          throw exception;
      }
    },
    UsageException$(message) {
      return new A.UsageException(message);
    },
    ExecutableOptions: function ExecutableOptions(t0) {
      var _ = this;
      _._options = t0;
      _.__ExecutableOptions_interactive = $;
      _._sourcesToDestinations = null;
      _.__ExecutableOptions__sourceDirectoriesToDestinations = $;
    },
    ExecutableOptions__parser_closure: function ExecutableOptions__parser_closure() {
    },
    ExecutableOptions_interactive_closure: function ExecutableOptions_interactive_closure(t0) {
      this.$this = t0;
    },
    ExecutableOptions_emitErrorCss_closure: function ExecutableOptions_emitErrorCss_closure() {
    },
    UsageException: function UsageException(t0) {
      this.message = t0;
    },
    watch(options, graph) {
      return A.watch$body(options, graph);
    },
    watch$body(options, graph) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, t1, t2, t3, t4, t5, t6, dirWatcher, watcher;
      var $async$watch = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              options._ensureSources$0();
              t1 = type$.String;
              t2 = A._lateReadCheck(options.__ExecutableOptions__sourceDirectoriesToDestinations, "_sourceDirectoriesToDestinations").cast$2$0(0, t1, t1);
              t2 = A.List_List$of(t2.get$keys(t2), true, t1);
              for (options._ensureSources$0(), t3 = options._sourcesToDestinations.cast$2$0(0, t1, t1), t3 = J.get$iterator$ax(t3.get$keys(t3)); t3.moveNext$0();) {
                t4 = t3.get$current(t3);
                t2.push($.$get$context().dirname$1(t4));
              }
              t3 = options._options;
              B.JSArray_methods.addAll$1(t2, type$.List_String._as(t3.$index(0, "load-path")));
              t4 = A._asBool(t3.$index(0, "poll"));
              t5 = type$.Stream_WatchEvent;
              t6 = A.PathMap__create(null, t5);
              t5 = new A.StreamGroup(B._StreamGroupState_dormant, A.LinkedHashMap_LinkedHashMap$_empty(t5, type$.nullable_StreamSubscription_WatchEvent), type$.StreamGroup_WatchEvent);
              t5.__StreamGroup__controller = A.StreamController_StreamController(t5.get$_onCancel(), t5.get$_onListen(), t5.get$_onPause(), t5.get$_onResume(), true, type$.WatchEvent);
              dirWatcher = new A.MultiDirWatcher(new A.PathMap(t6, type$.PathMap_Stream_WatchEvent), t5, t4);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(new A.MappedListIterable(t2, new A.watch_closure(dirWatcher), A._arrayInstanceType(t2)._eval$1("MappedListIterable<1,Future<~>>")), type$.void), $async$watch);
            case 3:
              // returning from await.
              watcher = new A._Watcher(options, graph);
              options._ensureSources$0(), t1 = options._sourcesToDestinations.cast$2$0(0, t1, t1), t1 = t1.get$entries(t1), t1 = t1.get$iterator(t1);
            case 4:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t2 = t1.get$current(t1);
              t4 = $.$get$context();
              t5 = t4.absolute$7(".", null, null, null, null, null, null);
              t6 = t2.key;
              graph.addCanonical$4$recanonicalize(new A.FilesystemImporter(t5), t4.toUri$1(J.$eq$(J.get$platform$x(self.process), "win32") || J.$eq$(J.get$platform$x(self.process), "darwin") ? A._realCasePath(t4.absolute$7(t4.normalize$1(t6), null, null, null, null, null, null)) : t4.canonicalize$1(0, t6)), t4.toUri$1(t6), false);
              $async$goto = 6;
              return A._asyncAwait(watcher.compile$3$ifModified(0, t6, t2.value, true), $async$watch);
            case 6:
              // returning from await.
              if (!$async$result && A._asBool(t3.$index(0, "stop-on-error"))) {
                t1 = A._lateReadCheck(dirWatcher._group.__StreamGroup__controller, "_controller");
                t1._subscribe$4(null, null, null, false).cancel$0();
                // goto return
                $async$goto = 1;
                break;
              }
              // goto for condition
              $async$goto = 4;
              break;
            case 5:
              // after for
              A.print("Sass is watching for changes. Press Ctrl-C to stop.\n");
              $async$goto = 7;
              return A._asyncAwait(watcher.watch$1(0, dirWatcher), $async$watch);
            case 7:
              // returning from await.
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$watch, $async$completer);
    },
    watch_closure: function watch_closure(t0) {
      this.dirWatcher = t0;
    },
    _Watcher: function _Watcher(t0, t1) {
      this._watch$_options = t0;
      this._graph = t1;
    },
    _Watcher__debounceEvents_closure: function _Watcher__debounceEvents_closure() {
    },
    EmptyExtensionStore: function EmptyExtensionStore() {
    },
    Extension: function Extension(t0, t1, t2, t3, t4) {
      var _ = this;
      _.extender = t0;
      _.target = t1;
      _.mediaContext = t2;
      _.isOptional = t3;
      _.span = t4;
    },
    Extender: function Extender(t0, t1, t2) {
      var _ = this;
      _.selector = t0;
      _.isOriginal = t1;
      _._extension = null;
      _.span = t2;
    },
    ExtensionStore__extendOrReplace(selector, source, targets, mode, span) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, _i, complex, t10, t11, t12, _i0, simple, t13, _i1, t14, t15,
        extender = A.ExtensionStore$_mode(mode);
      if (!selector.get$isInvisible())
        extender._originals.addAll$1(0, selector.components);
      for (t1 = targets.components, t2 = t1.length, t3 = source.components, t4 = t3.length, t5 = type$.ComplexSelector, t6 = type$.Extension, t7 = type$.CompoundSelector, t8 = type$.SimpleSelector, t9 = type$.Map_ComplexSelector_Extension, _i = 0; _i < t2; ++_i) {
        complex = t1[_i];
        t10 = complex.components;
        if (t10.length !== 1)
          throw A.wrapException(A.SassScriptException$("Can't extend complex selector " + A.S(complex) + "."));
        t11 = A.LinkedHashMap_LinkedHashMap$_empty(t8, t9);
        for (t10 = t7._as(B.JSArray_methods.get$first(t10)).components, t12 = t10.length, _i0 = 0; _i0 < t12; ++_i0) {
          simple = t10[_i0];
          t13 = A.LinkedHashMap_LinkedHashMap$_empty(t5, t6);
          for (_i1 = 0; _i1 < t4; ++_i1) {
            complex = t3[_i1];
            if (complex._complex$_maxSpecificity == null)
              complex._computeSpecificity$0();
            complex._complex$_maxSpecificity.toString;
            t14 = new A.Extender(complex, false, span);
            t15 = new A.Extension(t14, simple, null, true, span);
            t14._extension = t15;
            t13.$indexSet(0, complex, t15);
          }
          t11.$indexSet(0, simple, t13);
        }
        selector = extender._extendList$3(selector, span, t11);
      }
      return selector;
    },
    ExtensionStore$() {
      var t1 = type$.SimpleSelector;
      return new A.ExtensionStore(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Set_ModifiableCssValue_SelectorList), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Map_ComplexSelector_Extension), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_Extension), A.LinkedHashMap_LinkedHashMap$_empty(type$.ModifiableCssValue_SelectorList, type$.List_CssMediaQuery), new A._LinkedIdentityHashMap(type$._LinkedIdentityHashMap_SimpleSelector_int), new A._LinkedIdentityHashSet(type$._LinkedIdentityHashSet_ComplexSelector), B.ExtendMode_normal);
    },
    ExtensionStore$_mode(_mode) {
      var t1 = type$.SimpleSelector;
      return new A.ExtensionStore(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Set_ModifiableCssValue_SelectorList), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Map_ComplexSelector_Extension), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_Extension), A.LinkedHashMap_LinkedHashMap$_empty(type$.ModifiableCssValue_SelectorList, type$.List_CssMediaQuery), new A._LinkedIdentityHashMap(type$._LinkedIdentityHashMap_SimpleSelector_int), new A._LinkedIdentityHashSet(type$._LinkedIdentityHashSet_ComplexSelector), _mode);
    },
    ExtensionStore: function ExtensionStore(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._selectors = t0;
      _._extensions = t1;
      _._extensionsByExtender = t2;
      _._mediaContexts = t3;
      _._sourceSpecificity = t4;
      _._originals = t5;
      _._mode = t6;
    },
    ExtensionStore_extensionsWhereTarget_closure: function ExtensionStore_extensionsWhereTarget_closure() {
    },
    ExtensionStore__registerSelector_closure: function ExtensionStore__registerSelector_closure() {
    },
    ExtensionStore_addExtension_closure: function ExtensionStore_addExtension_closure() {
    },
    ExtensionStore_addExtension_closure0: function ExtensionStore_addExtension_closure0() {
    },
    ExtensionStore_addExtension_closure1: function ExtensionStore_addExtension_closure1(t0) {
      this.complex = t0;
    },
    ExtensionStore__extendExistingExtensions_closure: function ExtensionStore__extendExistingExtensions_closure() {
    },
    ExtensionStore__extendExistingExtensions_closure0: function ExtensionStore__extendExistingExtensions_closure0() {
    },
    ExtensionStore_addExtensions_closure: function ExtensionStore_addExtensions_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    ExtensionStore_addExtensions__closure1: function ExtensionStore_addExtensions__closure1(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.existingSources = t1;
      _.extensionsForTarget = t2;
      _.selectorsForTarget = t3;
      _.target = t4;
    },
    ExtensionStore_addExtensions___closure: function ExtensionStore_addExtensions___closure() {
    },
    ExtensionStore_addExtensions_closure0: function ExtensionStore_addExtensions_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    ExtensionStore_addExtensions__closure: function ExtensionStore_addExtensions__closure(t0, t1) {
      this.$this = t0;
      this.newExtensions = t1;
    },
    ExtensionStore_addExtensions__closure0: function ExtensionStore_addExtensions__closure0(t0, t1) {
      this.$this = t0;
      this.newExtensions = t1;
    },
    ExtensionStore__extendComplex_closure: function ExtensionStore__extendComplex_closure(t0) {
      this.complex = t0;
    },
    ExtensionStore__extendComplex_closure0: function ExtensionStore__extendComplex_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.complex = t2;
    },
    ExtensionStore__extendComplex__closure: function ExtensionStore__extendComplex__closure() {
    },
    ExtensionStore__extendComplex__closure0: function ExtensionStore__extendComplex__closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.complex = t2;
      _.path = t3;
    },
    ExtensionStore__extendComplex___closure: function ExtensionStore__extendComplex___closure() {
    },
    ExtensionStore__extendCompound_closure: function ExtensionStore__extendCompound_closure(t0) {
      this.mediaQueryContext = t0;
    },
    ExtensionStore__extendCompound_closure0: function ExtensionStore__extendCompound_closure0(t0, t1) {
      this._box_1 = t0;
      this.mediaQueryContext = t1;
    },
    ExtensionStore__extendCompound__closure: function ExtensionStore__extendCompound__closure() {
    },
    ExtensionStore__extendCompound__closure0: function ExtensionStore__extendCompound__closure0(t0) {
      this._box_0 = t0;
    },
    ExtensionStore__extendCompound_closure1: function ExtensionStore__extendCompound_closure1() {
    },
    ExtensionStore__extendCompound_closure2: function ExtensionStore__extendCompound_closure2() {
    },
    ExtensionStore__extendCompound_closure3: function ExtensionStore__extendCompound_closure3(t0) {
      this.original = t0;
    },
    ExtensionStore__extendSimple_withoutPseudo: function ExtensionStore__extendSimple_withoutPseudo(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.extensions = t1;
      _.targetsUsed = t2;
      _.simpleSpan = t3;
    },
    ExtensionStore__extendSimple_closure: function ExtensionStore__extendSimple_closure(t0, t1, t2) {
      this.$this = t0;
      this.withoutPseudo = t1;
      this.simpleSpan = t2;
    },
    ExtensionStore__extendSimple_closure0: function ExtensionStore__extendSimple_closure0() {
    },
    ExtensionStore__extendPseudo_closure: function ExtensionStore__extendPseudo_closure() {
    },
    ExtensionStore__extendPseudo_closure0: function ExtensionStore__extendPseudo_closure0() {
    },
    ExtensionStore__extendPseudo_closure1: function ExtensionStore__extendPseudo_closure1() {
    },
    ExtensionStore__extendPseudo_closure2: function ExtensionStore__extendPseudo_closure2(t0) {
      this.pseudo = t0;
    },
    ExtensionStore__extendPseudo_closure3: function ExtensionStore__extendPseudo_closure3(t0) {
      this.pseudo = t0;
    },
    ExtensionStore__trim_closure: function ExtensionStore__trim_closure(t0, t1) {
      this._box_0 = t0;
      this.complex1 = t1;
    },
    ExtensionStore__trim_closure0: function ExtensionStore__trim_closure0(t0, t1) {
      this._box_0 = t0;
      this.complex1 = t1;
    },
    ExtensionStore_clone_closure: function ExtensionStore_clone_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.newSelectors = t1;
      _.oldToNewSelectors = t2;
      _.newMediaContexts = t3;
    },
    unifyComplex(complexes) {
      var t2, unifiedBase, base, t3, t4, _i, complexesWithoutBases,
        t1 = J.getInterceptor$asx(complexes);
      if (t1.get$length(complexes) === 1)
        return complexes;
      for (t2 = t1.get$iterator(complexes), unifiedBase = null; t2.moveNext$0();) {
        base = J.get$last$ax(t2.get$current(t2));
        if (!(base instanceof A.CompoundSelector))
          return null;
        if (unifiedBase == null)
          unifiedBase = base.components;
        else
          for (t3 = base.components, t4 = t3.length, _i = 0; _i < t4; ++_i) {
            unifiedBase = t3[_i].unify$1(unifiedBase);
            if (unifiedBase == null)
              return null;
          }
      }
      t1 = t1.map$1$1(complexes, new A.unifyComplex_closure(), type$.List_ComplexSelectorComponent);
      complexesWithoutBases = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
      t1 = B.JSArray_methods.get$last(complexesWithoutBases);
      unifiedBase.toString;
      J.add$1$ax(t1, A.CompoundSelector$(unifiedBase));
      return A.weave(complexesWithoutBases);
    },
    unifyCompound(compound1, compound2) {
      var t1, result, _i, unified;
      for (t1 = compound1.length, result = compound2, _i = 0; _i < t1; ++_i, result = unified) {
        unified = compound1[_i].unify$1(result);
        if (unified == null)
          return null;
      }
      return A.CompoundSelector$(result);
    },
    unifyUniversalAndElement(selector1, selector2) {
      var namespace1, name1, t1, namespace2, name2, namespace, $name, _null = null,
        _s45_ = string$.must_b;
      if (selector1 instanceof A.UniversalSelector) {
        namespace1 = selector1.namespace;
        name1 = _null;
      } else if (selector1 instanceof A.TypeSelector) {
        t1 = selector1.name;
        namespace1 = t1.namespace;
        name1 = t1.name;
      } else
        throw A.wrapException(A.ArgumentError$value(selector1, "selector1", _s45_));
      if (selector2 instanceof A.UniversalSelector) {
        namespace2 = selector2.namespace;
        name2 = _null;
      } else if (selector2 instanceof A.TypeSelector) {
        t1 = selector2.name;
        namespace2 = t1.namespace;
        name2 = t1.name;
      } else
        throw A.wrapException(A.ArgumentError$value(selector2, "selector2", _s45_));
      if (namespace1 == namespace2 || namespace2 === "*")
        namespace = namespace1;
      else {
        if (namespace1 !== "*")
          return _null;
        namespace = namespace2;
      }
      if (name1 == name2 || name2 == null)
        $name = name1;
      else {
        if (!(name1 == null || name1 === "*"))
          return _null;
        $name = name2;
      }
      return $name == null ? new A.UniversalSelector(namespace) : new A.TypeSelector(new A.QualifiedName($name, namespace));
    },
    weave(complexes) {
      var t2, t3, t4, t5, target, _i, parents, newPrefixes, parentPrefixes, t6,
        t1 = type$.JSArray_List_ComplexSelectorComponent,
        prefixes = A._setArrayType([J.toList$0$ax(B.JSArray_methods.get$first(complexes))], t1);
      for (t2 = A.SubListIterable$(complexes, 1, null, A._arrayInstanceType(complexes)._precomputed1), t2 = new A.ListIterator(t2, t2.get$length(t2)), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2.__internal$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        t5 = J.getInterceptor$asx(t4);
        if (t5.get$isEmpty(t4))
          continue;
        target = t5.get$last(t4);
        if (t5.get$length(t4) === 1) {
          for (t4 = prefixes.length, _i = 0; _i < prefixes.length; prefixes.length === t4 || (0, A.throwConcurrentModificationError)(prefixes), ++_i)
            J.add$1$ax(prefixes[_i], target);
          continue;
        }
        parents = t5.take$1(t4, t5.get$length(t4) - 1).toList$0(0);
        newPrefixes = A._setArrayType([], t1);
        for (t4 = prefixes.length, _i = 0; _i < prefixes.length; prefixes.length === t4 || (0, A.throwConcurrentModificationError)(prefixes), ++_i) {
          parentPrefixes = A._weaveParents(prefixes[_i], parents);
          if (parentPrefixes == null)
            continue;
          for (t5 = parentPrefixes.get$iterator(parentPrefixes); t5.moveNext$0();) {
            t6 = t5.get$current(t5);
            J.add$1$ax(t6, target);
            newPrefixes.push(t6);
          }
        }
        prefixes = newPrefixes;
      }
      return prefixes;
    },
    _weaveParents(parents1, parents2) {
      var finalCombinators, root1, root2, root, groups1, groups2, lcs, t2, choices, t3, _i, group, t4, t5, _null = null,
        t1 = type$.ComplexSelectorComponent,
        queue1 = A.ListQueue_ListQueue$of(parents1, t1),
        queue2 = A.ListQueue_ListQueue$of(parents2, t1),
        initialCombinators = A._mergeInitialCombinators(queue1, queue2);
      if (initialCombinators == null)
        return _null;
      finalCombinators = A._mergeFinalCombinators(queue1, queue2, _null);
      if (finalCombinators == null)
        return _null;
      root1 = A._firstIfRoot(queue1);
      root2 = A._firstIfRoot(queue2);
      t1 = root1 != null;
      if (t1 && root2 != null) {
        root = A.unifyCompound(root1.components, root2.components);
        if (root == null)
          return _null;
        queue1.addFirst$1(root);
        queue2.addFirst$1(root);
      } else if (t1)
        queue2.addFirst$1(root1);
      else if (root2 != null)
        queue1.addFirst$1(root2);
      groups1 = A._groupSelectors(queue1);
      groups2 = A._groupSelectors(queue2);
      t1 = type$.List_ComplexSelectorComponent;
      lcs = A.longestCommonSubsequence(groups2, groups1, new A._weaveParents_closure(), t1);
      t2 = type$.JSArray_Iterable_ComplexSelectorComponent;
      choices = A._setArrayType([A._setArrayType([initialCombinators], t2)], type$.JSArray_List_Iterable_ComplexSelectorComponent);
      for (t3 = lcs.length, _i = 0; _i < lcs.length; lcs.length === t3 || (0, A.throwConcurrentModificationError)(lcs), ++_i) {
        group = lcs[_i];
        t4 = A._chunks(groups1, groups2, new A._weaveParents_closure0(group), t1);
        t5 = A._arrayInstanceType(t4)._eval$1("MappedListIterable<1,Iterable<ComplexSelectorComponent>>");
        choices.push(A.List_List$of(new A.MappedListIterable(t4, new A._weaveParents_closure1(), t5), true, t5._eval$1("ListIterable.E")));
        choices.push(A._setArrayType([group], t2));
        groups1.removeFirst$0();
        groups2.removeFirst$0();
      }
      t2 = A._chunks(groups1, groups2, new A._weaveParents_closure2(), t1);
      t3 = A._arrayInstanceType(t2)._eval$1("MappedListIterable<1,Iterable<ComplexSelectorComponent>>");
      choices.push(A.List_List$of(new A.MappedListIterable(t2, new A._weaveParents_closure3(), t3), true, t3._eval$1("ListIterable.E")));
      B.JSArray_methods.addAll$1(choices, finalCombinators);
      return J.map$1$1$ax(A.paths(new A.WhereIterable(choices, new A._weaveParents_closure4(), type$.WhereIterable_List_Iterable_ComplexSelectorComponent), type$.Iterable_ComplexSelectorComponent), new A._weaveParents_closure5(), t1);
    },
    _firstIfRoot(queue) {
      var first;
      if (queue._collection$_head === queue._collection$_tail)
        return null;
      first = queue.get$first(queue);
      if (first instanceof A.CompoundSelector) {
        if (!A._hasRoot(first))
          return null;
        queue.removeFirst$0();
        return first;
      } else
        return null;
    },
    _mergeInitialCombinators(components1, components2) {
      var t4, combinators2, lcs,
        t1 = type$.JSArray_Combinator,
        combinators1 = A._setArrayType([], t1),
        t2 = type$.Combinator,
        t3 = components1.$ti._precomputed1;
      while (true) {
        if (!components1.get$isEmpty(components1)) {
          t4 = components1._collection$_head;
          if (t4 === components1._collection$_tail)
            A.throwExpression(A.IterableElementError_noElement());
          t4 = components1._collection$_table[t4];
          t4 = (t4 == null ? t3._as(t4) : t4) instanceof A.Combinator;
        } else
          t4 = false;
        if (!t4)
          break;
        combinators1.push(t2._as(components1.removeFirst$0()));
      }
      combinators2 = A._setArrayType([], t1);
      t1 = components2.$ti._precomputed1;
      while (true) {
        if (!components2.get$isEmpty(components2)) {
          t3 = components2._collection$_head;
          if (t3 === components2._collection$_tail)
            A.throwExpression(A.IterableElementError_noElement());
          t3 = components2._collection$_table[t3];
          t3 = (t3 == null ? t1._as(t3) : t3) instanceof A.Combinator;
        } else
          t3 = false;
        if (!t3)
          break;
        combinators2.push(t2._as(components2.removeFirst$0()));
      }
      lcs = A.longestCommonSubsequence(combinators1, combinators2, null, t2);
      if (B.C_ListEquality.equals$2(0, lcs, combinators1))
        return combinators2;
      if (B.C_ListEquality.equals$2(0, lcs, combinators2))
        return combinators1;
      return null;
    },
    _mergeFinalCombinators(components1, components2, result) {
      var t1, combinators1, t2, combinators2, lcs, combinator1, combinator2, compound1, compound2, choices, unified, followingSiblingSelector, nextSiblingSelector, _null = null;
      if (result == null)
        result = A.QueueList$(_null, type$.List_List_ComplexSelectorComponent);
      if (components1._collection$_head === components1._collection$_tail || !(components1.get$last(components1) instanceof A.Combinator))
        t1 = components2._collection$_head === components2._collection$_tail || !(components2.get$last(components2) instanceof A.Combinator);
      else
        t1 = false;
      if (t1)
        return result;
      t1 = type$.JSArray_Combinator;
      combinators1 = A._setArrayType([], t1);
      t2 = type$.Combinator;
      while (true) {
        if (!(!components1.get$isEmpty(components1) && components1.get$last(components1) instanceof A.Combinator))
          break;
        combinators1.push(t2._as(components1.removeLast$0(0)));
      }
      combinators2 = A._setArrayType([], t1);
      while (true) {
        if (!(!components2.get$isEmpty(components2) && components2.get$last(components2) instanceof A.Combinator))
          break;
        combinators2.push(t2._as(components2.removeLast$0(0)));
      }
      t1 = combinators1.length;
      if (t1 > 1 || combinators2.length > 1) {
        lcs = A.longestCommonSubsequence(combinators1, combinators2, _null, t2);
        if (B.C_ListEquality.equals$2(0, lcs, combinators1))
          result.addFirst$1(A._setArrayType([A.List_List$of(new A.ReversedListIterable(combinators2, type$.ReversedListIterable_Combinator), true, type$.ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
        else if (B.C_ListEquality.equals$2(0, lcs, combinators2))
          result.addFirst$1(A._setArrayType([A.List_List$of(new A.ReversedListIterable(combinators1, type$.ReversedListIterable_Combinator), true, type$.ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
        else
          return _null;
        return result;
      }
      combinator1 = t1 === 0 ? _null : B.JSArray_methods.get$first(combinators1);
      combinator2 = combinators2.length === 0 ? _null : B.JSArray_methods.get$first(combinators2);
      t1 = combinator1 != null;
      if (t1 && combinator2 != null) {
        t1 = type$.CompoundSelector;
        compound1 = t1._as(components1.removeLast$0(0));
        compound2 = t1._as(components2.removeLast$0(0));
        t1 = combinator1 === B.Combinator_CzM;
        if (t1 && combinator2 === B.Combinator_CzM)
          if (A.compoundIsSuperselector(compound1, compound2, _null))
            result.addFirst$1(A._setArrayType([A._setArrayType([compound2, B.Combinator_CzM], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
          else {
            t1 = type$.JSArray_ComplexSelectorComponent;
            t2 = type$.JSArray_List_ComplexSelectorComponent;
            if (A.compoundIsSuperselector(compound2, compound1, _null))
              result.addFirst$1(A._setArrayType([A._setArrayType([compound1, B.Combinator_CzM], t1)], t2));
            else {
              choices = A._setArrayType([A._setArrayType([compound1, B.Combinator_CzM, compound2, B.Combinator_CzM], t1), A._setArrayType([compound2, B.Combinator_CzM, compound1, B.Combinator_CzM], t1)], t2);
              unified = A.unifyCompound(compound1.components, compound2.components);
              if (unified != null)
                choices.push(A._setArrayType([unified, B.Combinator_CzM], t1));
              result.addFirst$1(choices);
            }
          }
        else {
          if (!(t1 && combinator2 === B.Combinator_uzg))
            t2 = combinator1 === B.Combinator_uzg && combinator2 === B.Combinator_CzM;
          else
            t2 = true;
          if (t2) {
            followingSiblingSelector = t1 ? compound1 : compound2;
            nextSiblingSelector = t1 ? compound2 : compound1;
            t1 = type$.JSArray_ComplexSelectorComponent;
            t2 = type$.JSArray_List_ComplexSelectorComponent;
            if (A.compoundIsSuperselector(followingSiblingSelector, nextSiblingSelector, _null))
              result.addFirst$1(A._setArrayType([A._setArrayType([nextSiblingSelector, B.Combinator_uzg], t1)], t2));
            else {
              unified = A.unifyCompound(compound1.components, compound2.components);
              t2 = A._setArrayType([A._setArrayType([followingSiblingSelector, B.Combinator_CzM, nextSiblingSelector, B.Combinator_uzg], t1)], t2);
              if (unified != null)
                t2.push(A._setArrayType([unified, B.Combinator_uzg], t1));
              result.addFirst$1(t2);
            }
          } else {
            if (combinator1 === B.Combinator_sgq)
              t2 = combinator2 === B.Combinator_uzg || combinator2 === B.Combinator_CzM;
            else
              t2 = false;
            if (t2) {
              result.addFirst$1(A._setArrayType([A._setArrayType([compound2, combinator2], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
              components1._add$1(compound1);
              components1._add$1(B.Combinator_sgq);
            } else {
              if (combinator2 === B.Combinator_sgq)
                t1 = combinator1 === B.Combinator_uzg || t1;
              else
                t1 = false;
              if (t1) {
                result.addFirst$1(A._setArrayType([A._setArrayType([compound1, combinator1], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
                components2._add$1(compound2);
                components2._add$1(B.Combinator_sgq);
              } else if (combinator1 === combinator2) {
                unified = A.unifyCompound(compound1.components, compound2.components);
                if (unified == null)
                  return _null;
                result.addFirst$1(A._setArrayType([A._setArrayType([unified, combinator1], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
              } else
                return _null;
            }
          }
        }
        return A._mergeFinalCombinators(components1, components2, result);
      } else if (t1) {
        if (combinator1 === B.Combinator_sgq)
          if (!components2.get$isEmpty(components2)) {
            t1 = type$.CompoundSelector;
            t1 = A.compoundIsSuperselector(t1._as(components2.get$last(components2)), t1._as(components1.get$last(components1)), _null);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          components2.removeLast$0(0);
        result.addFirst$1(A._setArrayType([A._setArrayType([components1.removeLast$0(0), combinator1], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
        return A._mergeFinalCombinators(components1, components2, result);
      } else {
        if (combinator2 === B.Combinator_sgq)
          if (!components1.get$isEmpty(components1)) {
            t1 = type$.CompoundSelector;
            t1 = A.compoundIsSuperselector(t1._as(components1.get$last(components1)), t1._as(components2.get$last(components2)), _null);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          components1.removeLast$0(0);
        t1 = components2.removeLast$0(0);
        combinator2.toString;
        result.addFirst$1(A._setArrayType([A._setArrayType([t1, combinator2], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
        return A._mergeFinalCombinators(components1, components2, result);
      }
    },
    _mustUnify(complex1, complex2) {
      var t2, t3, t4,
        t1 = A.LinkedHashSet_LinkedHashSet$_empty(type$.SimpleSelector);
      for (t2 = J.get$iterator$ax(complex1); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        if (t3 instanceof A.CompoundSelector)
          for (t3 = B.JSArray_methods.get$iterator(t3.components), t4 = new A.WhereIterator(t3, A.functions___isUnique$closure()); t4.moveNext$0();)
            t1.add$1(0, t3.get$current(t3));
      }
      if (t1._collection$_length === 0)
        return false;
      return J.any$1$ax(complex2, new A._mustUnify_closure(t1));
    },
    _isUnique(simple) {
      var t1;
      if (!(simple instanceof A.IDSelector))
        t1 = simple instanceof A.PseudoSelector && !simple.isClass;
      else
        t1 = true;
      return t1;
    },
    _chunks(queue1, queue2, done, $T) {
      var chunk2, t2,
        t1 = $T._eval$1("JSArray<0>"),
        chunk1 = A._setArrayType([], t1);
      for (; !done.call$1(queue1);)
        chunk1.push(queue1.removeFirst$0());
      chunk2 = A._setArrayType([], t1);
      for (; !done.call$1(queue2);)
        chunk2.push(queue2.removeFirst$0());
      t1 = chunk1.length === 0;
      if (t1 && chunk2.length === 0)
        return A._setArrayType([], $T._eval$1("JSArray<List<0>>"));
      if (t1)
        return A._setArrayType([chunk2], $T._eval$1("JSArray<List<0>>"));
      if (chunk2.length === 0)
        return A._setArrayType([chunk1], $T._eval$1("JSArray<List<0>>"));
      t1 = A.List_List$of(chunk1, true, $T);
      B.JSArray_methods.addAll$1(t1, chunk2);
      t2 = A.List_List$of(chunk2, true, $T);
      B.JSArray_methods.addAll$1(t2, chunk1);
      return A._setArrayType([t1, t2], $T._eval$1("JSArray<List<0>>"));
    },
    paths(choices, $T) {
      return J.fold$2$ax(choices, A._setArrayType([A._setArrayType([], $T._eval$1("JSArray<0>"))], $T._eval$1("JSArray<List<0>>")), new A.paths_closure($T));
    },
    _groupSelectors(complex) {
      var t1, t2, group, t3, t4,
        groups = A.QueueList$(null, type$.List_ComplexSelectorComponent),
        iterator = A._ListQueueIterator$(complex);
      if (!iterator.moveNext$0())
        return groups;
      t1 = iterator._collection$_current;
      if (t1 == null)
        t1 = A._instanceType(iterator)._precomputed1._as(t1);
      t2 = type$.JSArray_ComplexSelectorComponent;
      group = A._setArrayType([t1], t2);
      groups._queue_list$_add$1(group);
      for (t1 = A._instanceType(iterator)._precomputed1; iterator.moveNext$0();) {
        if (!(B.JSArray_methods.get$last(group) instanceof A.Combinator)) {
          t3 = iterator._collection$_current;
          t3 = (t3 == null ? t1._as(t3) : t3) instanceof A.Combinator;
        } else
          t3 = true;
        t4 = iterator._collection$_current;
        if (t3)
          group.push(t4 == null ? t1._as(t4) : t4);
        else {
          group = A._setArrayType([t4 == null ? t1._as(t4) : t4], t2);
          groups._queue_list$_add$1(group);
        }
      }
      return groups;
    },
    _hasRoot(compound) {
      return B.JSArray_methods.any$1(compound.components, new A._hasRoot_closure());
    },
    listIsSuperselector(list1, list2) {
      return B.JSArray_methods.every$1(list2, new A.listIsSuperselector_closure(list1));
    },
    complexIsParentSuperselector(complex1, complex2) {
      var t2, base,
        t1 = J.getInterceptor$ax(complex1);
      if (t1.get$first(complex1) instanceof A.Combinator)
        return false;
      t2 = J.getInterceptor$ax(complex2);
      if (t2.get$first(complex2) instanceof A.Combinator)
        return false;
      if (t1.get$length(complex1) > t2.get$length(complex2))
        return false;
      base = A.CompoundSelector$(A._setArrayType([new A.PlaceholderSelector("<temp>")], type$.JSArray_SimpleSelector));
      t1 = type$.ComplexSelectorComponent;
      t2 = A.List_List$of(complex1, true, t1);
      t2.push(base);
      t1 = A.List_List$of(complex2, true, t1);
      t1.push(base);
      return A.complexIsSuperselector(t2, t1);
    },
    complexIsSuperselector(complex1, complex2) {
      var t1, t2, t3, i1, i2, remaining1, remaining2, t4, t5, t6, afterSuperselector, afterSuperselector0, compound2, i10, combinator1, combinator2;
      if (B.JSArray_methods.get$last(complex1) instanceof A.Combinator)
        return false;
      if (B.JSArray_methods.get$last(complex2) instanceof A.Combinator)
        return false;
      for (t1 = A._arrayInstanceType(complex2), t2 = t1._precomputed1, t1 = t1._eval$1("SubListIterable<1>"), t3 = type$.CompoundSelector, i1 = 0, i2 = 0; true;) {
        remaining1 = complex1.length - i1;
        remaining2 = complex2.length - i2;
        if (remaining1 === 0 || remaining2 === 0)
          return false;
        if (remaining1 > remaining2)
          return false;
        t4 = complex1[i1];
        if (t4 instanceof A.Combinator)
          return false;
        if (complex2[i2] instanceof A.Combinator)
          return false;
        t3._as(t4);
        if (remaining1 === 1) {
          t5 = t3._as(B.JSArray_methods.get$last(complex2));
          t6 = complex2.length - 1;
          t3 = new A.SubListIterable(complex2, 0, t6, t1);
          t3.SubListIterable$3(complex2, 0, t6, t2);
          return A.compoundIsSuperselector(t4, t5, t3.skip$1(0, i2));
        }
        afterSuperselector = i2 + 1;
        for (afterSuperselector0 = afterSuperselector; afterSuperselector0 < complex2.length; ++afterSuperselector0) {
          t5 = afterSuperselector0 - 1;
          compound2 = complex2[t5];
          if (compound2 instanceof A.CompoundSelector) {
            t6 = new A.SubListIterable(complex2, 0, t5, t1);
            t6.SubListIterable$3(complex2, 0, t5, t2);
            if (A.compoundIsSuperselector(t4, compound2, t6.skip$1(0, afterSuperselector)))
              break;
          }
        }
        if (afterSuperselector0 === complex2.length)
          return false;
        i10 = i1 + 1;
        combinator1 = complex1[i10];
        combinator2 = complex2[afterSuperselector0];
        if (combinator1 instanceof A.Combinator) {
          if (!(combinator2 instanceof A.Combinator))
            return false;
          if (combinator1 === B.Combinator_CzM) {
            if (combinator2 === B.Combinator_sgq)
              return false;
          } else if (combinator2 !== combinator1)
            return false;
          if (remaining1 === 3 && remaining2 > 3)
            return false;
          i1 += 2;
          i2 = afterSuperselector0 + 1;
        } else {
          if (combinator2 instanceof A.Combinator) {
            if (combinator2 !== B.Combinator_sgq)
              return false;
            i2 = afterSuperselector0 + 1;
          } else
            i2 = afterSuperselector0;
          i1 = i10;
        }
      }
    },
    compoundIsSuperselector(compound1, compound2, parents) {
      var t1, t2, _i, simple1, simple2;
      for (t1 = compound1.components, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        simple1 = t1[_i];
        if (simple1 instanceof A.PseudoSelector && simple1.selector != null) {
          if (!A._selectorPseudoIsSuperselector(simple1, compound2, parents))
            return false;
        } else if (!A._simpleIsSuperselectorOfCompound(simple1, compound2))
          return false;
      }
      for (t1 = compound2.components, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        simple2 = t1[_i];
        if (simple2 instanceof A.PseudoSelector && !simple2.isClass && simple2.selector == null && !A._simpleIsSuperselectorOfCompound(simple2, compound1))
          return false;
      }
      return true;
    },
    _simpleIsSuperselectorOfCompound(simple, compound) {
      return B.JSArray_methods.any$1(compound.components, new A._simpleIsSuperselectorOfCompound_closure(simple));
    },
    _selectorPseudoIsSuperselector(pseudo1, compound2, parents) {
      var selector1_ = pseudo1.selector;
      if (selector1_ == null)
        throw A.wrapException(A.ArgumentError$("Selector " + pseudo1.toString$0(0) + " must have a selector argument.", null));
      switch (pseudo1.normalizedName) {
        case "is":
        case "matches":
        case "any":
        case "where":
          return A._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(0, new A._selectorPseudoIsSuperselector_closure(selector1_)) || B.JSArray_methods.any$1(selector1_.components, new A._selectorPseudoIsSuperselector_closure0(parents, compound2));
        case "has":
        case "host":
        case "host-context":
          return A._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(0, new A._selectorPseudoIsSuperselector_closure1(selector1_));
        case "slotted":
          return A._selectorPseudoArgs(compound2, pseudo1.name, false).any$1(0, new A._selectorPseudoIsSuperselector_closure2(selector1_));
        case "not":
          return B.JSArray_methods.every$1(selector1_.components, new A._selectorPseudoIsSuperselector_closure3(compound2, pseudo1));
        case "current":
          return A._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(0, new A._selectorPseudoIsSuperselector_closure4(selector1_));
        case "nth-child":
        case "nth-last-child":
          return B.JSArray_methods.any$1(compound2.components, new A._selectorPseudoIsSuperselector_closure5(pseudo1, selector1_));
        default:
          throw A.wrapException("unreachable");
      }
    },
    _selectorPseudoArgs(compound, $name, isClass) {
      var t1 = type$.WhereTypeIterable_PseudoSelector;
      return A.IterableNullableExtension_whereNotNull(new A.MappedIterable(new A.WhereIterable(new A.WhereTypeIterable(compound.components, t1), new A._selectorPseudoArgs_closure(isClass, $name), t1._eval$1("WhereIterable<Iterable.E>")), new A._selectorPseudoArgs_closure0(), t1._eval$1("MappedIterable<Iterable.E,SelectorList?>")), type$.SelectorList);
    },
    unifyComplex_closure: function unifyComplex_closure() {
    },
    _weaveParents_closure: function _weaveParents_closure() {
    },
    _weaveParents_closure0: function _weaveParents_closure0(t0) {
      this.group = t0;
    },
    _weaveParents_closure1: function _weaveParents_closure1() {
    },
    _weaveParents__closure1: function _weaveParents__closure1() {
    },
    _weaveParents_closure2: function _weaveParents_closure2() {
    },
    _weaveParents_closure3: function _weaveParents_closure3() {
    },
    _weaveParents__closure0: function _weaveParents__closure0() {
    },
    _weaveParents_closure4: function _weaveParents_closure4() {
    },
    _weaveParents_closure5: function _weaveParents_closure5() {
    },
    _weaveParents__closure: function _weaveParents__closure() {
    },
    _mustUnify_closure: function _mustUnify_closure(t0) {
      this.uniqueSelectors = t0;
    },
    _mustUnify__closure: function _mustUnify__closure(t0) {
      this.uniqueSelectors = t0;
    },
    paths_closure: function paths_closure(t0) {
      this.T = t0;
    },
    paths__closure: function paths__closure(t0, t1) {
      this.paths = t0;
      this.T = t1;
    },
    paths___closure: function paths___closure(t0, t1) {
      this.option = t0;
      this.T = t1;
    },
    _hasRoot_closure: function _hasRoot_closure() {
    },
    listIsSuperselector_closure: function listIsSuperselector_closure(t0) {
      this.list1 = t0;
    },
    listIsSuperselector__closure: function listIsSuperselector__closure(t0) {
      this.complex1 = t0;
    },
    _simpleIsSuperselectorOfCompound_closure: function _simpleIsSuperselectorOfCompound_closure(t0) {
      this.simple = t0;
    },
    _simpleIsSuperselectorOfCompound__closure: function _simpleIsSuperselectorOfCompound__closure(t0) {
      this.simple = t0;
    },
    _selectorPseudoIsSuperselector_closure: function _selectorPseudoIsSuperselector_closure(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure0: function _selectorPseudoIsSuperselector_closure0(t0, t1) {
      this.parents = t0;
      this.compound2 = t1;
    },
    _selectorPseudoIsSuperselector_closure1: function _selectorPseudoIsSuperselector_closure1(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure2: function _selectorPseudoIsSuperselector_closure2(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure3: function _selectorPseudoIsSuperselector_closure3(t0, t1) {
      this.compound2 = t0;
      this.pseudo1 = t1;
    },
    _selectorPseudoIsSuperselector__closure: function _selectorPseudoIsSuperselector__closure(t0, t1) {
      this.complex = t0;
      this.pseudo1 = t1;
    },
    _selectorPseudoIsSuperselector___closure: function _selectorPseudoIsSuperselector___closure(t0) {
      this.simple2 = t0;
    },
    _selectorPseudoIsSuperselector___closure0: function _selectorPseudoIsSuperselector___closure0(t0) {
      this.simple2 = t0;
    },
    _selectorPseudoIsSuperselector_closure4: function _selectorPseudoIsSuperselector_closure4(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure5: function _selectorPseudoIsSuperselector_closure5(t0, t1) {
      this.pseudo1 = t0;
      this.selector1 = t1;
    },
    _selectorPseudoArgs_closure: function _selectorPseudoArgs_closure(t0, t1) {
      this.isClass = t0;
      this.name = t1;
    },
    _selectorPseudoArgs_closure0: function _selectorPseudoArgs_closure0() {
    },
    MergedExtension_merge(left, right) {
      var t4, t5, t6,
        t1 = left.extender,
        t2 = t1.selector,
        t3 = B.C_ListEquality.equals$2(0, t2.components, right.extender.selector.components);
      if (!t3 || !left.target.$eq(0, right.target))
        throw A.wrapException(A.ArgumentError$(left.toString$0(0) + " and " + right.toString$0(0) + " aren't the same extension.", null));
      t3 = left.mediaContext;
      t4 = t3 == null;
      if (!t4) {
        t5 = right.mediaContext;
        t5 = t5 != null && !B.C_ListEquality.equals$2(0, t3, t5);
      } else
        t5 = false;
      if (t5)
        throw A.wrapException(A.SassException$("From " + left.span.message$1(0, "") + string$.x0aYou_m, right.span));
      if (right.isOptional && right.mediaContext == null)
        return left;
      if (left.isOptional && t4)
        return right;
      t5 = left.target;
      t6 = left.span;
      if (t4)
        t3 = right.mediaContext;
      t2.get$maxSpecificity();
      t1 = new A.Extender(t2, false, t1.span);
      return t1._extension = new A.MergedExtension(left, right, t1, t5, t3, true, t6);
    },
    MergedExtension: function MergedExtension(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.left = t0;
      _.right = t1;
      _.extender = t2;
      _.target = t3;
      _.mediaContext = t4;
      _.isOptional = t5;
      _.span = t6;
    },
    ExtendMode: function ExtendMode(t0) {
      this.name = t0;
    },
    globalFunctions_closure: function globalFunctions_closure() {
    },
    _updateComponents($arguments, adjust, change, scale) {
      var keywords, alpha, red, green, blue, hueNumber, t2, hue, saturation, lightness, whiteness, blackness, hasRgb, hasSL, hasWB, t3, t4, t5, _null = null,
        t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        argumentList = type$.SassArgumentList._as(t1.$index($arguments, 1));
      if (argumentList._list$_contents.length !== 0)
        throw A.wrapException(A.SassScriptException$(string$.Only_op));
      argumentList._wereKeywordsAccessed = true;
      keywords = A.LinkedHashMap_LinkedHashMap$of(argumentList._keywords, type$.String, type$.Value);
      t1 = new A._updateComponents_getParam(keywords, scale, change);
      alpha = t1.call$2("alpha", 1);
      red = t1.call$2("red", 255);
      green = t1.call$2("green", 255);
      blue = t1.call$2("blue", 255);
      if (scale)
        hueNumber = _null;
      else {
        t2 = keywords.remove$1(0, "hue");
        hueNumber = t2 == null ? _null : t2.assertNumber$1("hue");
      }
      t2 = hueNumber == null;
      if (!t2)
        A._checkAngle(hueNumber, "hue");
      hue = t2 ? _null : hueNumber._number$_value;
      saturation = t1.call$3$checkPercent("saturation", 100, true);
      lightness = t1.call$3$checkPercent("lightness", 100, true);
      whiteness = t1.call$3$assertPercent("whiteness", 100, true);
      blackness = t1.call$3$assertPercent("blackness", 100, true);
      t1 = keywords.__js_helper$_length;
      if (t1 !== 0)
        throw A.wrapException(A.SassScriptException$("No " + A.pluralize("argument", t1, _null) + " named " + A.S(A.toSentence(keywords.get$keys(keywords).map$1$1(0, new A._updateComponents_closure(), type$.Object), "or")) + "."));
      hasRgb = red != null || green != null || blue != null;
      hasSL = saturation != null || lightness != null;
      hasWB = whiteness != null || blackness != null;
      if (hasRgb)
        t1 = hasSL || hasWB || hue != null;
      else
        t1 = false;
      if (t1)
        throw A.wrapException(A.SassScriptException$(string$.RGB_pa + (hasWB ? "HWB" : "HSL") + " parameters."));
      if (hasSL && hasWB)
        throw A.wrapException(A.SassScriptException$(string$.HSL_pa));
      t1 = new A._updateComponents_updateValue(change, adjust);
      t2 = new A._updateComponents_updateRgb(t1);
      if (hasRgb) {
        t3 = t2.call$2(color.get$red(color), red);
        t4 = t2.call$2(color.get$green(color), green);
        t2 = t2.call$2(color.get$blue(color), blue);
        return color.changeRgb$4$alpha$blue$green$red(t1.call$3(color._alpha, alpha, 1), t2, t4, t3);
      } else if (hasWB) {
        if (change)
          t2 = hue;
        else {
          t2 = color.get$hue(color);
          t2 += hue == null ? 0 : hue;
        }
        t3 = t1.call$3(color.get$whiteness(color), whiteness, 100);
        t4 = t1.call$3(color.get$blackness(color), blackness, 100);
        t5 = color._alpha;
        t1 = t1.call$3(t5, alpha, 1);
        if (t2 == null)
          t2 = color.get$hue(color);
        if (t3 == null)
          t3 = color.get$whiteness(color);
        if (t4 == null)
          t4 = color.get$blackness(color);
        return A.SassColor_SassColor$hwb(t2, t3, t4, t1 == null ? t5 : t1);
      } else {
        t2 = hue == null;
        if (!t2 || hasSL) {
          if (change)
            t2 = hue;
          else {
            t3 = color.get$hue(color);
            t3 += t2 ? 0 : hue;
            t2 = t3;
          }
          t3 = t1.call$3(color.get$saturation(color), saturation, 100);
          t4 = t1.call$3(color.get$lightness(color), lightness, 100);
          return color.changeHsl$4$alpha$hue$lightness$saturation(t1.call$3(color._alpha, alpha, 1), t2, t4, t3);
        } else if (alpha != null)
          return color.changeAlpha$1(t1.call$3(color._alpha, alpha, 1));
        else
          return color;
      }
    },
    _functionString($name, $arguments) {
      return new A.SassString($name + "(" + J.map$1$1$ax($arguments, new A._functionString_closure(), type$.String).join$1(0, ", ") + ")", false);
    },
    _removedColorFunction($name, argument, negative) {
      return A.BuiltInCallable$function($name, "$color, $amount", new A._removedColorFunction_closure($name, argument, negative), "sass:color");
    },
    _rgb($name, $arguments) {
      var t2, red, green, blue,
        t1 = J.getInterceptor$asx($arguments),
        alpha = t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null;
      if (!t1.$index($arguments, 0).get$isSpecialNumber())
        if (!t1.$index($arguments, 1).get$isSpecialNumber())
          if (!t1.$index($arguments, 2).get$isSpecialNumber()) {
            t2 = alpha == null ? null : alpha.get$isSpecialNumber();
            t2 = t2 === true;
          } else
            t2 = true;
        else
          t2 = true;
      else
        t2 = true;
      if (t2)
        return A._functionString($name, $arguments);
      red = t1.$index($arguments, 0).assertNumber$1("red");
      green = t1.$index($arguments, 1).assertNumber$1("green");
      blue = t1.$index($arguments, 2).assertNumber$1("blue");
      return A.SassColor$rgbInternal(A.fuzzyRound(A._percentageOrUnitless(red, 255, "red")), A.fuzzyRound(A._percentageOrUnitless(green, 255, "green")), A.fuzzyRound(A._percentageOrUnitless(blue, 255, "blue")), A.NullableExtension_andThen(alpha, new A._rgb_closure()), B._ColorFormatEnum_rgbFunction);
    },
    _rgbTwoArg($name, $arguments) {
      var first, color,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0).get$isVar())
        return A._functionString($name, $arguments);
      else if (t1.$index($arguments, 1).get$isVar()) {
        first = t1.$index($arguments, 0);
        if (first instanceof A.SassColor)
          return new A.SassString($name + "(" + first.get$red(first) + ", " + first.get$green(first) + ", " + first.get$blue(first) + ", " + A.serializeValue(t1.$index($arguments, 1), false, true) + ")", false);
        else
          return A._functionString($name, $arguments);
      } else if (t1.$index($arguments, 1).get$isSpecialNumber()) {
        color = t1.$index($arguments, 0).assertColor$1("color");
        return new A.SassString($name + "(" + color.get$red(color) + ", " + color.get$green(color) + ", " + color.get$blue(color) + ", " + A.serializeValue(t1.$index($arguments, 1), false, true) + ")", false);
      }
      return t1.$index($arguments, 0).assertColor$1("color").changeAlpha$1(A._percentageOrUnitless(t1.$index($arguments, 1).assertNumber$1("alpha"), 1, "alpha"));
    },
    _hsl($name, $arguments) {
      var t2, hue, saturation, lightness,
        _s10_ = "saturation",
        _s9_ = "lightness",
        t1 = J.getInterceptor$asx($arguments),
        alpha = t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null;
      if (!t1.$index($arguments, 0).get$isSpecialNumber())
        if (!t1.$index($arguments, 1).get$isSpecialNumber())
          if (!t1.$index($arguments, 2).get$isSpecialNumber()) {
            t2 = alpha == null ? null : alpha.get$isSpecialNumber();
            t2 = t2 === true;
          } else
            t2 = true;
        else
          t2 = true;
      else
        t2 = true;
      if (t2)
        return A._functionString($name, $arguments);
      hue = t1.$index($arguments, 0).assertNumber$1("hue");
      saturation = t1.$index($arguments, 1).assertNumber$1(_s10_);
      lightness = t1.$index($arguments, 2).assertNumber$1(_s9_);
      A._checkAngle(hue, "hue");
      A._checkPercent(saturation, _s10_);
      A._checkPercent(lightness, _s9_);
      return A.SassColor$hslInternal(hue._number$_value, B.JSNumber_methods.clamp$2(saturation._number$_value, 0, 100), B.JSNumber_methods.clamp$2(lightness._number$_value, 0, 100), A.NullableExtension_andThen(alpha, new A._hsl_closure()), B._ColorFormatEnum_hslFunction);
    },
    _checkAngle(angle, $name) {
      var t1, t2, t3, t4,
        _s31_ = "To preserve current behavior: $";
      if (!angle.get$hasUnits() || angle.hasUnit$1("deg"))
        return;
      t1 = A.S($name);
      t2 = "" + ("$" + t1 + ": Passing a unit other than deg (" + angle.toString$0(0) + ") is deprecated.\n") + "\n";
      if (angle.compatibleWithUnit$1("deg")) {
        t3 = angle.toString$0(0);
        t4 = type$.JSArray_String;
        t1 = t2 + ("You're passing " + t3 + string$.x2c_whici + new A.SingleUnitSassNumber("deg", angle._number$_value, null).toString$0(0) + ".\n") + (string$.Soon__ + angle.coerce$2(A._setArrayType(["deg"], t4), A._setArrayType([], t4)).toString$0(0) + ".\n") + "\n" + (_s31_ + t1 + " * 1deg/1" + B.JSArray_methods.get$first(angle.get$numeratorUnits(angle)) + "\n") + ("To migrate to new behavior: 0deg + $" + t1 + "\n") + "\n";
      } else
        t1 = t2 + (_s31_ + t1 + A._removeUnits(angle) + "\n") + "\n";
      t1 += "See https://sass-lang.com/d/color-units";
      A.EvaluationContext_current().warn$2$deprecation(0, t1.charCodeAt(0) == 0 ? t1 : t1, true);
    },
    _checkPercent(number, $name) {
      var t1, t2;
      if (number.hasUnit$1("%"))
        return;
      t1 = number.toString$0(0);
      t2 = A._removeUnits(number);
      A.EvaluationContext_current().warn$2$deprecation(0, "$" + $name + ": Passing a number without unit % (" + t1 + string$.x29x20is_d + $name + t2 + " * 1%", true);
    },
    _removeUnits(number) {
      var t2,
        t1 = number.get$denominatorUnits(number);
      t1 = new A.MappedListIterable(t1, new A._removeUnits_closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,String>")).join$0(0);
      t2 = number.get$numeratorUnits(number);
      return t1 + new A.MappedListIterable(t2, new A._removeUnits_closure0(), A._arrayInstanceType(t2)._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    _hwb($arguments) {
      var _s9_ = "whiteness",
        _s9_0 = "blackness",
        t1 = J.getInterceptor$asx($arguments),
        alpha = t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null,
        hue = t1.$index($arguments, 0).assertNumber$1("hue"),
        whiteness = t1.$index($arguments, 1).assertNumber$1(_s9_),
        blackness = t1.$index($arguments, 2).assertNumber$1(_s9_0);
      whiteness.assertUnit$2("%", _s9_);
      blackness.assertUnit$2("%", _s9_0);
      return A.SassColor_SassColor$hwb(hue._number$_value, whiteness.valueInRange$3(0, 100, _s9_), blackness.valueInRange$3(0, 100, _s9_0), A.NullableExtension_andThen(alpha, new A._hwb_closure()));
    },
    _parseChannels($name, argumentNames, channels) {
      var list, t1, channels0, alphaFromSlashList, isCommaSeparated, isBracketed, buffer, maybeSlashSeparated, slash,
        _s17_ = "$channels must be";
      if (channels.get$isVar())
        return A._functionString($name, A._setArrayType([channels], type$.JSArray_Value));
      if (channels.get$separator(channels) === B.ListSeparator_1gm) {
        list = channels.get$asList();
        t1 = list.length;
        if (t1 !== 2)
          throw A.wrapException(A.SassScriptException$(string$.Only_2 + t1 + " " + A.pluralize("was", t1, "were") + " passed."));
        channels0 = list[0];
        alphaFromSlashList = list[1];
        if (!alphaFromSlashList.get$isSpecialNumber())
          alphaFromSlashList.assertNumber$1("alpha");
        if (list[0].get$isVar())
          return A._functionString($name, A._setArrayType([channels], type$.JSArray_Value));
      } else {
        channels0 = channels;
        alphaFromSlashList = null;
      }
      isCommaSeparated = channels0.get$separator(channels0) === B.ListSeparator_kWM;
      isBracketed = channels0.get$hasBrackets();
      if (isCommaSeparated || isBracketed) {
        buffer = new A.StringBuffer(_s17_);
        if (isBracketed) {
          t1 = _s17_ + " an unbracketed";
          buffer._contents = t1;
        } else
          t1 = _s17_;
        if (isCommaSeparated) {
          t1 += isBracketed ? "," : " a";
          buffer._contents = t1;
          t1 = buffer._contents = t1 + " space-separated";
        }
        buffer._contents = t1 + " list.";
        throw A.wrapException(A.SassScriptException$(buffer.toString$0(0)));
      }
      list = channels0.get$asList();
      t1 = list.length;
      if (t1 > 3)
        throw A.wrapException(A.SassScriptException$("Only 3 elements allowed, but " + t1 + " were passed."));
      else if (t1 < 3) {
        if (!B.JSArray_methods.any$1(list, new A._parseChannels_closure()))
          if (list.length !== 0) {
            t1 = B.JSArray_methods.get$last(list);
            if (t1 instanceof A.SassString)
              if (t1._hasQuotes) {
                t1 = t1._string$_text;
                t1 = A.startsWithIgnoreCase(t1, "var(") && B.JSString_methods.contains$1(t1, "/");
              } else
                t1 = false;
            else
              t1 = false;
          } else
            t1 = false;
        else
          t1 = true;
        if (t1)
          return A._functionString($name, A._setArrayType([channels], type$.JSArray_Value));
        else
          throw A.wrapException(A.SassScriptException$("Missing element " + argumentNames[list.length] + "."));
      }
      if (alphaFromSlashList != null) {
        t1 = A.List_List$of(list, true, type$.Value);
        t1.push(alphaFromSlashList);
        return t1;
      }
      maybeSlashSeparated = list[2];
      if (maybeSlashSeparated instanceof A.SassNumber) {
        slash = maybeSlashSeparated.asSlash;
        if (slash == null)
          return list;
        return A._setArrayType([list[0], list[1], slash.item1, slash.item2], type$.JSArray_Value);
      } else if (maybeSlashSeparated instanceof A.SassString && !maybeSlashSeparated._hasQuotes && B.JSString_methods.contains$1(maybeSlashSeparated._string$_text, "/"))
        return A._functionString($name, A._setArrayType([channels0], type$.JSArray_Value));
      else
        return list;
    },
    _percentageOrUnitless(number, max, $name) {
      var value;
      if (!number.get$hasUnits())
        value = number._number$_value;
      else if (number.hasUnit$1("%"))
        value = max * number._number$_value / 100;
      else
        throw A.wrapException(A.SassScriptException$("$" + $name + ": Expected " + number.toString$0(0) + ' to have no units or "%".'));
      return B.JSNumber_methods.clamp$2(value, 0, max);
    },
    _mixColors(color1, color2, weight) {
      var weightScale = weight.valueInRange$3(0, 100, "weight") / 100,
        normalizedWeight = weightScale * 2 - 1,
        t1 = color1._alpha,
        t2 = color2._alpha,
        alphaDistance = t1 - t2,
        t3 = normalizedWeight * alphaDistance,
        weight1 = ((t3 === -1 ? normalizedWeight : (normalizedWeight + alphaDistance) / (1 + t3)) + 1) / 2,
        weight2 = 1 - weight1;
      return A.SassColor$rgb(A.fuzzyRound(color1.get$red(color1) * weight1 + color2.get$red(color2) * weight2), A.fuzzyRound(color1.get$green(color1) * weight1 + color2.get$green(color2) * weight2), A.fuzzyRound(color1.get$blue(color1) * weight1 + color2.get$blue(color2) * weight2), t1 * weightScale + t2 * (1 - weightScale));
    },
    _opacify($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color");
      return color.changeAlpha$1(B.JSNumber_methods.clamp$2(color._alpha + t1.$index($arguments, 1).assertNumber$1("amount").valueInRange$3(0, 1, "amount"), 0, 1));
    },
    _transparentize($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color");
      return color.changeAlpha$1(B.JSNumber_methods.clamp$2(color._alpha - t1.$index($arguments, 1).assertNumber$1("amount").valueInRange$3(0, 1, "amount"), 0, 1));
    },
    _function4($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:color");
    },
    global_closure: function global_closure() {
    },
    global_closure0: function global_closure0() {
    },
    global_closure1: function global_closure1() {
    },
    global_closure2: function global_closure2() {
    },
    global_closure3: function global_closure3() {
    },
    global_closure4: function global_closure4() {
    },
    global_closure5: function global_closure5() {
    },
    global_closure6: function global_closure6() {
    },
    global_closure7: function global_closure7() {
    },
    global_closure8: function global_closure8() {
    },
    global_closure9: function global_closure9() {
    },
    global_closure10: function global_closure10() {
    },
    global_closure11: function global_closure11() {
    },
    global_closure12: function global_closure12() {
    },
    global_closure13: function global_closure13() {
    },
    global_closure14: function global_closure14() {
    },
    global_closure15: function global_closure15() {
    },
    global_closure16: function global_closure16() {
    },
    global_closure17: function global_closure17() {
    },
    global_closure18: function global_closure18() {
    },
    global_closure19: function global_closure19() {
    },
    global_closure20: function global_closure20() {
    },
    global_closure21: function global_closure21() {
    },
    global_closure22: function global_closure22() {
    },
    global_closure23: function global_closure23() {
    },
    global_closure24: function global_closure24() {
    },
    global__closure: function global__closure() {
    },
    global_closure25: function global_closure25() {
    },
    module_closure: function module_closure() {
    },
    module_closure0: function module_closure0() {
    },
    module_closure1: function module_closure1() {
    },
    module_closure2: function module_closure2() {
    },
    module_closure3: function module_closure3() {
    },
    module_closure4: function module_closure4() {
    },
    module_closure5: function module_closure5() {
    },
    module_closure6: function module_closure6() {
    },
    module__closure: function module__closure() {
    },
    module_closure7: function module_closure7() {
    },
    _red_closure: function _red_closure() {
    },
    _green_closure: function _green_closure() {
    },
    _blue_closure: function _blue_closure() {
    },
    _mix_closure: function _mix_closure() {
    },
    _hue_closure: function _hue_closure() {
    },
    _saturation_closure: function _saturation_closure() {
    },
    _lightness_closure: function _lightness_closure() {
    },
    _complement_closure: function _complement_closure() {
    },
    _adjust_closure: function _adjust_closure() {
    },
    _scale_closure: function _scale_closure() {
    },
    _change_closure: function _change_closure() {
    },
    _ieHexStr_closure: function _ieHexStr_closure() {
    },
    _ieHexStr_closure_hexString: function _ieHexStr_closure_hexString() {
    },
    _updateComponents_getParam: function _updateComponents_getParam(t0, t1, t2) {
      this.keywords = t0;
      this.scale = t1;
      this.change = t2;
    },
    _updateComponents_closure: function _updateComponents_closure() {
    },
    _updateComponents_updateValue: function _updateComponents_updateValue(t0, t1) {
      this.change = t0;
      this.adjust = t1;
    },
    _updateComponents_updateRgb: function _updateComponents_updateRgb(t0) {
      this.updateValue = t0;
    },
    _functionString_closure: function _functionString_closure() {
    },
    _removedColorFunction_closure: function _removedColorFunction_closure(t0, t1, t2) {
      this.name = t0;
      this.argument = t1;
      this.negative = t2;
    },
    _rgb_closure: function _rgb_closure() {
    },
    _hsl_closure: function _hsl_closure() {
    },
    _removeUnits_closure: function _removeUnits_closure() {
    },
    _removeUnits_closure0: function _removeUnits_closure0() {
    },
    _hwb_closure: function _hwb_closure() {
    },
    _parseChannels_closure: function _parseChannels_closure() {
    },
    _function3($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:list");
    },
    _length_closure0: function _length_closure0() {
    },
    _nth_closure: function _nth_closure() {
    },
    _setNth_closure: function _setNth_closure() {
    },
    _join_closure: function _join_closure() {
    },
    _append_closure0: function _append_closure0() {
    },
    _zip_closure: function _zip_closure() {
    },
    _zip__closure: function _zip__closure() {
    },
    _zip__closure0: function _zip__closure0(t0) {
      this._box_0 = t0;
    },
    _zip__closure1: function _zip__closure1(t0) {
      this._box_0 = t0;
    },
    _index_closure0: function _index_closure0() {
    },
    _separator_closure: function _separator_closure() {
    },
    _isBracketed_closure: function _isBracketed_closure() {
    },
    _slash_closure: function _slash_closure() {
    },
    _modify(map, keys, modify, addNesting) {
      var keyIterator = J.get$iterator$ax(keys);
      return keyIterator.moveNext$0() ? new A._modify__modifyNestedMap(keyIterator, modify, addNesting).call$1(map) : modify.call$1(map);
    },
    _deepMergeImpl(map1, map2) {
      var t2, t3, result,
        t1 = map1._map$_contents;
      if (t1.get$isEmpty(t1))
        return map2;
      t2 = map2._map$_contents;
      if (t2.get$isEmpty(t2))
        return map1;
      t3 = type$.Value;
      result = A.LinkedHashMap_LinkedHashMap$of(t1, t3, t3);
      t2.forEach$1(0, new A._deepMergeImpl_closure(result));
      return new A.SassMap(A.ConstantMap_ConstantMap$from(result, t3, t3));
    },
    _function2($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:map");
    },
    _get_closure: function _get_closure() {
    },
    _set_closure: function _set_closure() {
    },
    _set__closure0: function _set__closure0(t0) {
      this.$arguments = t0;
    },
    _set_closure0: function _set_closure0() {
    },
    _set__closure: function _set__closure(t0) {
      this.args = t0;
    },
    _merge_closure: function _merge_closure() {
    },
    _merge_closure0: function _merge_closure0() {
    },
    _merge__closure: function _merge__closure(t0) {
      this.map2 = t0;
    },
    _deepMerge_closure: function _deepMerge_closure() {
    },
    _deepRemove_closure: function _deepRemove_closure() {
    },
    _deepRemove__closure: function _deepRemove__closure(t0) {
      this.keys = t0;
    },
    _remove_closure: function _remove_closure() {
    },
    _remove_closure0: function _remove_closure0() {
    },
    _keys_closure: function _keys_closure() {
    },
    _values_closure: function _values_closure() {
    },
    _hasKey_closure: function _hasKey_closure() {
    },
    _modify__modifyNestedMap: function _modify__modifyNestedMap(t0, t1, t2) {
      this.keyIterator = t0;
      this.modify = t1;
      this.addNesting = t2;
    },
    _deepMergeImpl_closure: function _deepMergeImpl_closure(t0) {
      this.result = t0;
    },
    _fuzzyRoundIfZero(number) {
      if (!(Math.abs(number - 0) < $.$get$epsilon()))
        return number;
      return B.JSNumber_methods.get$isNegative(number) ? -0.0 : 0;
    },
    _numberFunction($name, transform) {
      return A.BuiltInCallable$function($name, "$number", new A._numberFunction_closure(transform), "sass:math");
    },
    _function1($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:math");
    },
    _ceil_closure: function _ceil_closure() {
    },
    _clamp_closure: function _clamp_closure() {
    },
    _floor_closure: function _floor_closure() {
    },
    _max_closure: function _max_closure() {
    },
    _min_closure: function _min_closure() {
    },
    _abs_closure: function _abs_closure() {
    },
    _hypot_closure: function _hypot_closure() {
    },
    _hypot__closure: function _hypot__closure() {
    },
    _log_closure: function _log_closure() {
    },
    _pow_closure: function _pow_closure() {
    },
    _sqrt_closure: function _sqrt_closure() {
    },
    _acos_closure: function _acos_closure() {
    },
    _asin_closure: function _asin_closure() {
    },
    _atan_closure: function _atan_closure() {
    },
    _atan2_closure: function _atan2_closure() {
    },
    _cos_closure: function _cos_closure() {
    },
    _sin_closure: function _sin_closure() {
    },
    _tan_closure: function _tan_closure() {
    },
    _compatible_closure: function _compatible_closure() {
    },
    _isUnitless_closure: function _isUnitless_closure() {
    },
    _unit_closure: function _unit_closure() {
    },
    _percentage_closure: function _percentage_closure() {
    },
    _randomFunction_closure: function _randomFunction_closure() {
    },
    _div_closure: function _div_closure() {
    },
    _numberFunction_closure: function _numberFunction_closure(t0) {
      this.transform = t0;
    },
    _function5($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:meta");
    },
    global_closure26: function global_closure26() {
    },
    global_closure27: function global_closure27() {
    },
    global_closure28: function global_closure28() {
    },
    global_closure29: function global_closure29() {
    },
    local_closure: function local_closure() {
    },
    local_closure0: function local_closure0() {
    },
    local__closure: function local__closure() {
    },
    _prependParent(compound) {
      var t2, _null = null,
        t1 = compound.components,
        first = B.JSArray_methods.get$first(t1);
      if (first instanceof A.UniversalSelector)
        return _null;
      if (first instanceof A.TypeSelector) {
        t2 = first.name;
        if (t2.namespace != null)
          return _null;
        t2 = A._setArrayType([new A.ParentSelector(t2.name)], type$.JSArray_SimpleSelector);
        B.JSArray_methods.addAll$1(t2, A.SubListIterable$(t1, 1, _null, A._arrayInstanceType(t1)._precomputed1));
        return A.CompoundSelector$(t2);
      } else {
        t2 = A._setArrayType([new A.ParentSelector(_null)], type$.JSArray_SimpleSelector);
        B.JSArray_methods.addAll$1(t2, t1);
        return A.CompoundSelector$(t2);
      }
    },
    _function0($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:selector");
    },
    _nest_closure: function _nest_closure() {
    },
    _nest__closure: function _nest__closure(t0) {
      this._box_0 = t0;
    },
    _nest__closure0: function _nest__closure0() {
    },
    _append_closure: function _append_closure() {
    },
    _append__closure: function _append__closure() {
    },
    _append__closure0: function _append__closure0() {
    },
    _append___closure: function _append___closure(t0) {
      this.parent = t0;
    },
    _extend_closure: function _extend_closure() {
    },
    _replace_closure: function _replace_closure() {
    },
    _unify_closure: function _unify_closure() {
    },
    _isSuperselector_closure: function _isSuperselector_closure() {
    },
    _simpleSelectors_closure: function _simpleSelectors_closure() {
    },
    _simpleSelectors__closure: function _simpleSelectors__closure() {
    },
    _parse_closure: function _parse_closure() {
    },
    _codepointForIndex(index, lengthInCodepoints, allowNegative) {
      var result;
      if (index === 0)
        return 0;
      if (index > 0)
        return Math.min(index - 1, lengthInCodepoints);
      result = lengthInCodepoints + index;
      if (result < 0 && !allowNegative)
        return 0;
      return result;
    },
    _function($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:string");
    },
    _unquote_closure: function _unquote_closure() {
    },
    _quote_closure: function _quote_closure() {
    },
    _length_closure: function _length_closure() {
    },
    _insert_closure: function _insert_closure() {
    },
    _index_closure: function _index_closure() {
    },
    _slice_closure: function _slice_closure() {
    },
    _toUpperCase_closure: function _toUpperCase_closure() {
    },
    _toLowerCase_closure: function _toLowerCase_closure() {
    },
    _uniqueId_closure: function _uniqueId_closure() {
    },
    ImportCache$(loadPaths, logger) {
      var t1 = type$.nullable_Tuple3_Importer_Uri_Uri,
        t2 = type$.Uri,
        t3 = A.ImportCache__toImporters(null, loadPaths, null),
        t4 = logger == null ? B.StderrLogger_false : logger;
      return new A.ImportCache(t3, t4, A.LinkedHashMap_LinkedHashMap$_empty(type$.Tuple2_Uri_bool, t1), A.LinkedHashMap_LinkedHashMap$_empty(type$.Tuple4_of_Uri_and_bool_and_Importer_and_nullable_Uri, t1), A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.nullable_Stylesheet), A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.ImporterResult));
    },
    ImportCache__toImporters(importers, loadPaths, packageConfig) {
      var sassPath, t2, t3, _i, path, _null = null,
        t1 = J.get$env$x(self.process);
      if (t1 == null)
        t1 = type$.Object._as(t1);
      sassPath = A._asStringQ(t1.SASS_PATH);
      t1 = A._setArrayType([], type$.JSArray_Importer_2);
      for (t2 = J.get$iterator$ax(loadPaths); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        t1.push(new A.FilesystemImporter($.$get$context().absolute$7(t3, _null, _null, _null, _null, _null, _null)));
      }
      if (sassPath != null) {
        t2 = sassPath.split(J.$eq$(J.get$platform$x(self.process), "win32") ? ";" : ":");
        t3 = t2.length;
        _i = 0;
        for (; _i < t3; ++_i) {
          path = t2[_i];
          t1.push(new A.FilesystemImporter($.$get$context().absolute$7(path, _null, _null, _null, _null, _null, _null)));
        }
      }
      return t1;
    },
    ImportCache: function ImportCache(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._importers = t0;
      _._logger = t1;
      _._canonicalizeCache = t2;
      _._relativeCanonicalizeCache = t3;
      _._importCache = t4;
      _._resultsCache = t5;
    },
    ImportCache_canonicalize_closure: function ImportCache_canonicalize_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.baseUrl = t1;
      _.url = t2;
      _.baseImporter = t3;
      _.forImport = t4;
    },
    ImportCache_canonicalize_closure0: function ImportCache_canonicalize_closure0(t0, t1, t2) {
      this.$this = t0;
      this.url = t1;
      this.forImport = t2;
    },
    ImportCache__canonicalize_closure: function ImportCache__canonicalize_closure(t0, t1) {
      this.importer = t0;
      this.url = t1;
    },
    ImportCache_importCanonical_closure: function ImportCache_importCanonical_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _.originalUrl = t3;
      _.quiet = t4;
    },
    ImportCache_humanize_closure: function ImportCache_humanize_closure(t0) {
      this.canonicalUrl = t0;
    },
    ImportCache_humanize_closure0: function ImportCache_humanize_closure0() {
    },
    ImportCache_humanize_closure1: function ImportCache_humanize_closure1() {
    },
    Importer: function Importer() {
    },
    AsyncImporter: function AsyncImporter() {
    },
    FilesystemImporter: function FilesystemImporter(t0) {
      this._loadPath = t0;
    },
    FilesystemImporter_canonicalize_closure: function FilesystemImporter_canonicalize_closure() {
    },
    ImporterResult: function ImporterResult(t0, t1, t2) {
      this.contents = t0;
      this._sourceMapUrl = t1;
      this.syntax = t2;
    },
    fromImport() {
      var t1 = A._asBoolQ($.Zone__current.$index(0, B.Symbol__inImportRule));
      return t1 === true;
    },
    resolveImportPath(path) {
      var t1,
        extension = A.ParsedPath_ParsedPath$parse(path, $.$get$context().style)._splitExtension$1(1)[1];
      if (extension === ".sass" || extension === ".scss" || extension === ".css") {
        t1 = A.fromImport() ? new A.resolveImportPath_closure(path, extension).call$0() : null;
        return t1 == null ? A._exactlyOne(A._tryPath(path)) : t1;
      }
      t1 = A.fromImport() ? new A.resolveImportPath_closure0(path).call$0() : null;
      if (t1 == null)
        t1 = A._exactlyOne(A._tryPathWithExtensions(path));
      return t1 == null ? A._tryPathAsDirectory(path) : t1;
    },
    _tryPathWithExtensions(path) {
      var result = A._tryPath(path + ".sass");
      B.JSArray_methods.addAll$1(result, A._tryPath(path + ".scss"));
      return result.length !== 0 ? result : A._tryPath(path + ".css");
    },
    _tryPath(path) {
      var t1 = $.$get$context(),
        partial = A.join(t1.dirname$1(path), "_" + A.ParsedPath_ParsedPath$parse(path, t1.style).get$basename(), null);
      t1 = A._setArrayType([], type$.JSArray_String);
      if (A.fileExists(partial))
        t1.push(partial);
      if (A.fileExists(path))
        t1.push(path);
      return t1;
    },
    _tryPathAsDirectory(path) {
      var t1;
      if (!A.dirExists(path))
        return null;
      t1 = A.fromImport() ? new A._tryPathAsDirectory_closure(path).call$0() : null;
      return t1 == null ? A._exactlyOne(A._tryPathWithExtensions(A.join(path, "index", null))) : t1;
    },
    _exactlyOne(paths) {
      var t1 = paths.length;
      if (t1 === 0)
        return null;
      if (t1 === 1)
        return B.JSArray_methods.get$first(paths);
      throw A.wrapException(string$.It_s_n + B.JSArray_methods.map$1$1(paths, new A._exactlyOne_closure(), type$.String).join$1(0, "\n"));
    },
    resolveImportPath_closure: function resolveImportPath_closure(t0, t1) {
      this.path = t0;
      this.extension = t1;
    },
    resolveImportPath_closure0: function resolveImportPath_closure0(t0) {
      this.path = t0;
    },
    _tryPathAsDirectory_closure: function _tryPathAsDirectory_closure(t0) {
      this.path = t0;
    },
    _exactlyOne_closure: function _exactlyOne_closure() {
    },
    InterpolationBuffer: function InterpolationBuffer(t0, t1) {
      this._interpolation_buffer$_text = t0;
      this._interpolation_buffer$_contents = t1;
    },
    _realCasePath(path) {
      var prefix, t1;
      if (!(J.$eq$(J.get$platform$x(self.process), "win32") || J.$eq$(J.get$platform$x(self.process), "darwin")))
        return path;
      if (J.$eq$(J.get$platform$x(self.process), "win32")) {
        prefix = B.JSString_methods.substring$2(path, 0, $.$get$context().style.rootLength$1(path));
        t1 = prefix.length;
        if (t1 !== 0 && A.isAlphabetic0(B.JSString_methods._codeUnitAt$1(prefix, 0)))
          path = prefix.toUpperCase() + B.JSString_methods.substring$1(path, t1);
      }
      return new A._realCasePath_helper().call$1(path);
    },
    _realCasePath_helper: function _realCasePath_helper() {
    },
    _realCasePath_helper_closure: function _realCasePath_helper_closure(t0, t1, t2) {
      this.helper = t0;
      this.dirname = t1;
      this.path = t2;
    },
    _realCasePath_helper__closure: function _realCasePath_helper__closure(t0) {
      this.basename = t0;
    },
    readFile(path) {
      var sourceFile, t1, i,
        contents = A._asString(A._readFile(path, "utf8"));
      if (!B.JSString_methods.contains$1(contents, "\ufffd"))
        return contents;
      sourceFile = A.SourceFile$fromString(contents, $.$get$context().toUri$1(path));
      for (t1 = contents.length, i = 0; i < t1; ++i) {
        if (B.JSString_methods._codeUnitAt$1(contents, i) !== 65533)
          continue;
        throw A.wrapException(A.SassException$("Invalid UTF-8.", A.FileLocation$_(sourceFile, i).pointSpan$0()));
      }
      return contents;
    },
    _readFile(path, encoding) {
      return A._systemErrorToFileSystemException(new A._readFile_closure(path, encoding));
    },
    writeFile(path, contents) {
      return A._systemErrorToFileSystemException(new A.writeFile_closure(path, contents));
    },
    deleteFile(path) {
      return A._systemErrorToFileSystemException(new A.deleteFile_closure(path));
    },
    readStdin() {
      return A.readStdin$body();
    },
    readStdin$body() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, sink, t1, t2, completer;
      var $async$readStdin = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = new A._Future($.Zone__current, type$._Future_String);
              completer = new A._AsyncCompleter(t2, type$._AsyncCompleter_String);
              t1.contents = null;
              sink = new A._StringCallbackSink(new A.readStdin_closure(t1, completer), new A.StringBuffer("")).asUtf8Sink$1(false);
              J.on$2$x(J.get$stdin$x(self.process), "data", A.allowInterop(new A.readStdin_closure0(sink)));
              J.on$2$x(J.get$stdin$x(self.process), "end", A.allowInterop(new A.readStdin_closure1(sink)));
              J.on$2$x(J.get$stdin$x(self.process), "error", A.allowInterop(new A.readStdin_closure2(completer)));
              $async$returnValue = t2;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$readStdin, $async$completer);
    },
    fileExists(path) {
      return A._systemErrorToFileSystemException(new A.fileExists_closure(path));
    },
    dirExists(path) {
      return A._systemErrorToFileSystemException(new A.dirExists_closure(path));
    },
    ensureDir(path) {
      return A._systemErrorToFileSystemException(new A.ensureDir_closure(path));
    },
    listDir(path, recursive) {
      return A._systemErrorToFileSystemException(new A.listDir_closure(recursive, path));
    },
    modificationTime(path) {
      return A._systemErrorToFileSystemException(new A.modificationTime_closure(path));
    },
    _systemErrorToFileSystemException(callback) {
      var error, t1, exception, t2;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        if (!type$.JsSystemError._is(error))
          throw exception;
        t1 = error;
        t2 = J.getInterceptor$x(t1);
        throw A.wrapException(new A.FileSystemException(J.substring$2$s(t2.get$message(t1), (A.S(t2.get$code(t1)) + ": ").length, J.get$length$asx(t2.get$message(t1)) - (", " + A.S(t2.get$syscall(t1)) + " '" + A.S(t2.get$path(t1)) + "'").length), J.get$path$x(error)));
      }
    },
    isWindows() {
      return J.$eq$(J.get$platform$x(self.process), "win32");
    },
    watchDir(path, poll) {
      var t2, t3, t1 = {},
        watcher = J.watch$2$x(self.chokidar, path, {disableGlobbing: true, usePolling: poll});
      t1.controller = null;
      t2 = J.getInterceptor$x(watcher);
      t2.on$2(watcher, "add", A.allowInterop(new A.watchDir_closure(t1)));
      t2.on$2(watcher, "change", A.allowInterop(new A.watchDir_closure0(t1)));
      t2.on$2(watcher, "unlink", A.allowInterop(new A.watchDir_closure1(t1)));
      t2.on$2(watcher, "error", A.allowInterop(new A.watchDir_closure2(t1)));
      t3 = new A._Future($.Zone__current, type$._Future_Stream_WatchEvent);
      t2.on$2(watcher, "ready", A.allowInterop(new A.watchDir_closure3(t1, watcher, new A._AsyncCompleter(t3, type$._AsyncCompleter_Stream_WatchEvent))));
      return t3;
    },
    FileSystemException: function FileSystemException(t0, t1) {
      this.message = t0;
      this.path = t1;
    },
    Stderr: function Stderr(t0) {
      this._stderr = t0;
    },
    _readFile_closure: function _readFile_closure(t0, t1) {
      this.path = t0;
      this.encoding = t1;
    },
    writeFile_closure: function writeFile_closure(t0, t1) {
      this.path = t0;
      this.contents = t1;
    },
    deleteFile_closure: function deleteFile_closure(t0) {
      this.path = t0;
    },
    readStdin_closure: function readStdin_closure(t0, t1) {
      this._box_0 = t0;
      this.completer = t1;
    },
    readStdin_closure0: function readStdin_closure0(t0) {
      this.sink = t0;
    },
    readStdin_closure1: function readStdin_closure1(t0) {
      this.sink = t0;
    },
    readStdin_closure2: function readStdin_closure2(t0) {
      this.completer = t0;
    },
    fileExists_closure: function fileExists_closure(t0) {
      this.path = t0;
    },
    dirExists_closure: function dirExists_closure(t0) {
      this.path = t0;
    },
    ensureDir_closure: function ensureDir_closure(t0) {
      this.path = t0;
    },
    listDir_closure: function listDir_closure(t0, t1) {
      this.recursive = t0;
      this.path = t1;
    },
    listDir__closure: function listDir__closure(t0) {
      this.path = t0;
    },
    listDir__closure0: function listDir__closure0() {
    },
    listDir_closure_list: function listDir_closure_list() {
    },
    listDir__list_closure: function listDir__list_closure(t0, t1) {
      this.parent = t0;
      this.list = t1;
    },
    modificationTime_closure: function modificationTime_closure(t0) {
      this.path = t0;
    },
    watchDir_closure: function watchDir_closure(t0) {
      this._box_0 = t0;
    },
    watchDir_closure0: function watchDir_closure0(t0) {
      this._box_0 = t0;
    },
    watchDir_closure1: function watchDir_closure1(t0) {
      this._box_0 = t0;
    },
    watchDir_closure2: function watchDir_closure2(t0) {
      this._box_0 = t0;
    },
    watchDir_closure3: function watchDir_closure3(t0, t1, t2) {
      this._box_0 = t0;
      this.watcher = t1;
      this.completer = t2;
    },
    watchDir__closure: function watchDir__closure(t0) {
      this.watcher = t0;
    },
    _QuietLogger: function _QuietLogger() {
    },
    StderrLogger: function StderrLogger(t0) {
      this.color = t0;
    },
    TerseLogger: function TerseLogger(t0, t1) {
      this._warningCounts = t0;
      this._inner = t1;
    },
    TerseLogger_summarize_closure: function TerseLogger_summarize_closure() {
    },
    TerseLogger_summarize_closure0: function TerseLogger_summarize_closure0() {
    },
    TrackingLogger: function TrackingLogger(t0) {
      this._tracking$_logger = t0;
      this._emittedDebug = this._emittedWarning = false;
    },
    BuiltInModule$($name, functions, mixins, variables, $T) {
      var t1 = A._Uri__Uri(null, $name, null, "sass"),
        t2 = A.BuiltInModule__callableMap(functions, $T),
        t3 = A.BuiltInModule__callableMap(mixins, $T),
        t4 = variables == null ? B.Map_empty1 : new A.UnmodifiableMapView(variables, type$.UnmodifiableMapView_String_Value);
      return new A.BuiltInModule(t1, t2, t3, t4, $T._eval$1("BuiltInModule<0>"));
    },
    BuiltInModule__callableMap(callables, $T) {
      var t2, _i, callable,
        t1 = type$.String;
      if (callables == null)
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, $T);
      else {
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, $T);
        for (t2 = callables.length, _i = 0; _i < callables.length; callables.length === t2 || (0, A.throwConcurrentModificationError)(callables), ++_i) {
          callable = callables[_i];
          t1.$indexSet(0, J.get$name$x(callable), callable);
        }
        t1 = new A.UnmodifiableMapView(t1, type$.$env_1_1_String._bind$1($T)._eval$1("UnmodifiableMapView<1,2>"));
      }
      return new A.UnmodifiableMapView(t1, type$.$env_1_1_String._bind$1($T)._eval$1("UnmodifiableMapView<1,2>"));
    },
    BuiltInModule: function BuiltInModule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.url = t0;
      _.functions = t1;
      _.mixins = t2;
      _.variables = t3;
      _.$ti = t4;
    },
    ForwardedModuleView_ifNecessary(inner, rule, $T) {
      var t1;
      if (rule.prefix == null)
        if (rule.shownMixinsAndFunctions == null)
          if (rule.shownVariables == null) {
            t1 = rule.hiddenMixinsAndFunctions;
            if (t1 == null)
              t1 = null;
            else {
              t1 = t1._base;
              t1 = t1.get$isEmpty(t1);
            }
            if (t1 === true) {
              t1 = rule.hiddenVariables;
              if (t1 == null)
                t1 = null;
              else {
                t1 = t1._base;
                t1 = t1.get$isEmpty(t1);
              }
              t1 = t1 === true;
            } else
              t1 = false;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        return inner;
      else
        return A.ForwardedModuleView$(inner, rule, $T);
    },
    ForwardedModuleView$(_inner, _rule, $T) {
      var t1 = _rule.prefix,
        t2 = _rule.shownVariables,
        t3 = _rule.hiddenVariables,
        t4 = _rule.shownMixinsAndFunctions,
        t5 = _rule.hiddenMixinsAndFunctions;
      return new A.ForwardedModuleView(_inner, _rule, A.ForwardedModuleView__forwardedMap(_inner.get$variables(), t1, t2, t3, type$.Value), A.ForwardedModuleView__forwardedMap(_inner.get$variableNodes(), t1, t2, t3, type$.AstNode), A.ForwardedModuleView__forwardedMap(_inner.get$functions(_inner), t1, t4, t5, $T), A.ForwardedModuleView__forwardedMap(_inner.get$mixins(), t1, t4, t5, $T), $T._eval$1("ForwardedModuleView<0>"));
    },
    ForwardedModuleView__forwardedMap(map, prefix, safelist, blocklist, $V) {
      var t2,
        t1 = prefix == null;
      if (t1)
        if (safelist == null)
          if (blocklist != null) {
            t2 = blocklist._base;
            t2 = t2.get$isEmpty(t2);
          } else
            t2 = true;
        else
          t2 = false;
      else
        t2 = false;
      if (t2)
        return map;
      if (!t1)
        map = new A.PrefixedMapView(map, prefix, $V._eval$1("PrefixedMapView<0>"));
      if (safelist != null)
        map = new A.LimitedMapView(map, safelist._base.intersection$1(new A.MapKeySet(map, type$.MapKeySet_nullable_Object)), type$.$env_1_1_String._bind$1($V)._eval$1("LimitedMapView<1,2>"));
      else {
        if (blocklist != null) {
          t1 = blocklist._base;
          t1 = t1.get$isNotEmpty(t1);
        } else
          t1 = false;
        if (t1)
          map = A.LimitedMapView$blocklist(map, blocklist, type$.String, $V);
      }
      return map;
    },
    ForwardedModuleView: function ForwardedModuleView(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._forwarded_view$_inner = t0;
      _._rule = t1;
      _.variables = t2;
      _.variableNodes = t3;
      _.functions = t4;
      _.mixins = t5;
      _.$ti = t6;
    },
    ShadowedModuleView_ifNecessary(inner, functions, mixins, variables, $T) {
      return A.ShadowedModuleView__needsBlocklist(inner.get$variables(), variables) || A.ShadowedModuleView__needsBlocklist(inner.get$functions(inner), functions) || A.ShadowedModuleView__needsBlocklist(inner.get$mixins(), mixins) ? new A.ShadowedModuleView(inner, A.ShadowedModuleView__shadowedMap(inner.get$variables(), variables, type$.Value), A.ShadowedModuleView__shadowedMap(inner.get$variableNodes(), variables, type$.AstNode), A.ShadowedModuleView__shadowedMap(inner.get$functions(inner), functions, $T), A.ShadowedModuleView__shadowedMap(inner.get$mixins(), mixins, $T), $T._eval$1("ShadowedModuleView<0>")) : null;
    },
    ShadowedModuleView__shadowedMap(map, blocklist, $V) {
      var t1 = A.ShadowedModuleView__needsBlocklist(map, blocklist);
      return !t1 ? map : A.LimitedMapView$blocklist(map, blocklist, type$.String, $V);
    },
    ShadowedModuleView__needsBlocklist(map, blocklist) {
      var t1 = map.get$isNotEmpty(map) && blocklist.any$1(0, map.get$containsKey());
      return t1;
    },
    ShadowedModuleView: function ShadowedModuleView(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._shadowed_view$_inner = t0;
      _.variables = t1;
      _.variableNodes = t2;
      _.functions = t3;
      _.mixins = t4;
      _.$ti = t5;
    },
    JSArray0: function JSArray0() {
    },
    Chokidar: function Chokidar() {
    },
    ChokidarOptions: function ChokidarOptions() {
    },
    ChokidarWatcher: function ChokidarWatcher() {
    },
    JSFunction: function JSFunction() {
    },
    NodeImporterResult: function NodeImporterResult() {
    },
    RenderContext: function RenderContext() {
    },
    RenderContextOptions: function RenderContextOptions() {
    },
    RenderContextResult: function RenderContextResult() {
    },
    RenderContextResultStats: function RenderContextResultStats() {
    },
    JSClass: function JSClass() {
    },
    JSUrl: function JSUrl() {
    },
    _PropertyDescriptor: function _PropertyDescriptor() {
    },
    AtRootQueryParser: function AtRootQueryParser(t0, t1) {
      this.scanner = t0;
      this.logger = t1;
    },
    AtRootQueryParser_parse_closure: function AtRootQueryParser_parse_closure(t0) {
      this.$this = t0;
    },
    _disallowedFunctionNames_closure: function _disallowedFunctionNames_closure() {
    },
    CssParser: function CssParser(t0, t1, t2) {
      var _ = this;
      _._isUseAllowed = true;
      _._inParentheses = _._inStyleRule = _._stylesheet$_inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._stylesheet$_inMixin = false;
      _._globalVariables = t0;
      _.lastSilentComment = null;
      _.scanner = t1;
      _.logger = t2;
    },
    KeyframeSelectorParser$(contents, logger) {
      var t1 = A.SpanScanner$(contents, null);
      return new A.KeyframeSelectorParser(t1, logger);
    },
    KeyframeSelectorParser: function KeyframeSelectorParser(t0, t1) {
      this.scanner = t0;
      this.logger = t1;
    },
    KeyframeSelectorParser_parse_closure: function KeyframeSelectorParser_parse_closure(t0) {
      this.$this = t0;
    },
    MediaQueryParser: function MediaQueryParser(t0, t1) {
      this.scanner = t0;
      this.logger = t1;
    },
    MediaQueryParser_parse_closure: function MediaQueryParser_parse_closure(t0) {
      this.$this = t0;
    },
    Parser_isIdentifier(text) {
      var t1, t2, exception, logger = null;
      try {
        t1 = logger;
        t2 = A.SpanScanner$(text, null);
        new A.Parser(t2, t1 == null ? B.StderrLogger_false : t1)._parseIdentifier$0();
        return true;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.SassFormatException)
          return false;
        else
          throw exception;
      }
    },
    Parser: function Parser(t0, t1) {
      this.scanner = t0;
      this.logger = t1;
    },
    Parser__parseIdentifier_closure: function Parser__parseIdentifier_closure(t0) {
      this.$this = t0;
    },
    Parser_scanIdentChar_matches: function Parser_scanIdentChar_matches(t0, t1) {
      this.caseSensitive = t0;
      this.char = t1;
    },
    SassParser: function SassParser(t0, t1, t2) {
      var _ = this;
      _._currentIndentation = 0;
      _._spaces = _._nextIndentationEnd = _._nextIndentation = null;
      _._isUseAllowed = true;
      _._inParentheses = _._inStyleRule = _._stylesheet$_inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._stylesheet$_inMixin = false;
      _._globalVariables = t0;
      _.lastSilentComment = null;
      _.scanner = t1;
      _.logger = t2;
    },
    SassParser_children_closure: function SassParser_children_closure(t0, t1, t2) {
      this.$this = t0;
      this.child = t1;
      this.children = t2;
    },
    ScssParser$(contents, logger, url) {
      var t1 = A.SpanScanner$(contents, url),
        t2 = logger == null ? B.StderrLogger_false : logger;
      return new A.ScssParser(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.VariableDeclaration), t1, t2);
    },
    ScssParser: function ScssParser(t0, t1, t2) {
      var _ = this;
      _._isUseAllowed = true;
      _._inParentheses = _._inStyleRule = _._stylesheet$_inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._stylesheet$_inMixin = false;
      _._globalVariables = t0;
      _.lastSilentComment = null;
      _.scanner = t1;
      _.logger = t2;
    },
    SelectorParser$(contents, allowParent, allowPlaceholder, logger, url) {
      var t1 = A.SpanScanner$(contents, url);
      return new A.SelectorParser(allowParent, allowPlaceholder, t1, logger == null ? B.StderrLogger_false : logger);
    },
    SelectorParser: function SelectorParser(t0, t1, t2, t3) {
      var _ = this;
      _._allowParent = t0;
      _._allowPlaceholder = t1;
      _.scanner = t2;
      _.logger = t3;
    },
    SelectorParser_parse_closure: function SelectorParser_parse_closure(t0) {
      this.$this = t0;
    },
    SelectorParser_parseCompoundSelector_closure: function SelectorParser_parseCompoundSelector_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser: function StylesheetParser() {
    },
    StylesheetParser_parse_closure: function StylesheetParser_parse_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_parse__closure: function StylesheetParser_parse__closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_parse__closure0: function StylesheetParser_parse__closure0() {
    },
    StylesheetParser_parseArgumentDeclaration_closure: function StylesheetParser_parseArgumentDeclaration_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_parseVariableDeclaration_closure: function StylesheetParser_parseVariableDeclaration_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_parseUseRule_closure: function StylesheetParser_parseUseRule_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__parseSingleProduction_closure: function StylesheetParser__parseSingleProduction_closure(t0, t1, t2) {
      this.$this = t0;
      this.production = t1;
      this.T = t2;
    },
    StylesheetParser__statement_closure: function StylesheetParser__statement_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_variableDeclarationWithoutNamespace_closure: function StylesheetParser_variableDeclarationWithoutNamespace_closure(t0, t1) {
      this.$this = t0;
      this.start = t1;
    },
    StylesheetParser_variableDeclarationWithoutNamespace_closure0: function StylesheetParser_variableDeclarationWithoutNamespace_closure0(t0) {
      this.declaration = t0;
    },
    StylesheetParser__declarationOrBuffer_closure: function StylesheetParser__declarationOrBuffer_closure(t0) {
      this.name = t0;
    },
    StylesheetParser__declarationOrBuffer_closure0: function StylesheetParser__declarationOrBuffer_closure0(t0, t1) {
      this._box_0 = t0;
      this.name = t1;
    },
    StylesheetParser__styleRule_closure: function StylesheetParser__styleRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.wasInStyleRule = t2;
      _.start = t3;
    },
    StylesheetParser__propertyOrVariableDeclaration_closure: function StylesheetParser__propertyOrVariableDeclaration_closure(t0) {
      this._box_0 = t0;
    },
    StylesheetParser__propertyOrVariableDeclaration_closure0: function StylesheetParser__propertyOrVariableDeclaration_closure0(t0, t1) {
      this._box_0 = t0;
      this.value = t1;
    },
    StylesheetParser__atRootRule_closure: function StylesheetParser__atRootRule_closure(t0) {
      this.query = t0;
    },
    StylesheetParser__atRootRule_closure0: function StylesheetParser__atRootRule_closure0() {
    },
    StylesheetParser__eachRule_closure: function StylesheetParser__eachRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.wasInControlDirective = t1;
      _.variables = t2;
      _.list = t3;
    },
    StylesheetParser__functionRule_closure: function StylesheetParser__functionRule_closure(t0, t1, t2) {
      this.name = t0;
      this.$arguments = t1;
      this.precedingComment = t2;
    },
    StylesheetParser__forRule_closure: function StylesheetParser__forRule_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    StylesheetParser__forRule_closure0: function StylesheetParser__forRule_closure0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.wasInControlDirective = t2;
      _.variable = t3;
      _.from = t4;
      _.to = t5;
    },
    StylesheetParser__memberList_closure: function StylesheetParser__memberList_closure(t0, t1, t2) {
      this.$this = t0;
      this.variables = t1;
      this.identifiers = t2;
    },
    StylesheetParser__includeRule_closure: function StylesheetParser__includeRule_closure(t0) {
      this.contentArguments_ = t0;
    },
    StylesheetParser_mediaRule_closure: function StylesheetParser_mediaRule_closure(t0) {
      this.query = t0;
    },
    StylesheetParser__mixinRule_closure: function StylesheetParser__mixinRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.name = t1;
      _.$arguments = t2;
      _.precedingComment = t3;
    },
    StylesheetParser_mozDocumentRule_closure: function StylesheetParser_mozDocumentRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.name = t2;
      _.value = t3;
    },
    StylesheetParser_supportsRule_closure: function StylesheetParser_supportsRule_closure(t0) {
      this.condition = t0;
    },
    StylesheetParser__whileRule_closure: function StylesheetParser__whileRule_closure(t0, t1, t2) {
      this.$this = t0;
      this.wasInControlDirective = t1;
      this.condition = t2;
    },
    StylesheetParser_unknownAtRule_closure: function StylesheetParser_unknownAtRule_closure(t0, t1) {
      this._box_0 = t0;
      this.name = t1;
    },
    StylesheetParser__expression_resetState: function StylesheetParser__expression_resetState(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.start = t2;
    },
    StylesheetParser__expression_resolveOneOperation: function StylesheetParser__expression_resolveOneOperation(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    StylesheetParser__expression_resolveOperations: function StylesheetParser__expression_resolveOperations(t0, t1) {
      this._box_0 = t0;
      this.resolveOneOperation = t1;
    },
    StylesheetParser__expression_addSingleExpression: function StylesheetParser__expression_addSingleExpression(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.resetState = t2;
      _.resolveOperations = t3;
    },
    StylesheetParser__expression_addOperator: function StylesheetParser__expression_addOperator(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.resolveOneOperation = t2;
    },
    StylesheetParser__expression_resolveSpaceExpressions: function StylesheetParser__expression_resolveSpaceExpressions(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.resolveOperations = t2;
    },
    StylesheetParser_expressionUntilComma_closure: function StylesheetParser_expressionUntilComma_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__unicodeRange_closure: function StylesheetParser__unicodeRange_closure() {
    },
    StylesheetParser__unicodeRange_closure0: function StylesheetParser__unicodeRange_closure0() {
    },
    StylesheetParser_namespacedExpression_closure: function StylesheetParser_namespacedExpression_closure(t0, t1) {
      this.$this = t0;
      this.start = t1;
    },
    StylesheetParser_trySpecialFunction_closure: function StylesheetParser_trySpecialFunction_closure() {
    },
    StylesheetParser__expressionUntilComparison_closure: function StylesheetParser__expressionUntilComparison_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__publicIdentifier_closure: function StylesheetParser__publicIdentifier_closure(t0, t1) {
      this.$this = t0;
      this.start = t1;
    },
    StylesheetNode$_(_stylesheet, importer, canonicalUrl, allUpstream) {
      var t1 = new A.StylesheetNode(_stylesheet, importer, canonicalUrl, allUpstream.item1, allUpstream.item2, A.LinkedHashSet_LinkedHashSet$_empty(type$.StylesheetNode));
      t1.StylesheetNode$_$4(_stylesheet, importer, canonicalUrl, allUpstream);
      return t1;
    },
    StylesheetGraph: function StylesheetGraph(t0, t1, t2) {
      this._nodes = t0;
      this.importCache = t1;
      this._transitiveModificationTimes = t2;
    },
    StylesheetGraph_modifiedSince_transitiveModificationTime: function StylesheetGraph_modifiedSince_transitiveModificationTime(t0) {
      this.$this = t0;
    },
    StylesheetGraph_modifiedSince_transitiveModificationTime_closure: function StylesheetGraph_modifiedSince_transitiveModificationTime_closure(t0, t1) {
      this.node = t0;
      this.transitiveModificationTime = t1;
    },
    StylesheetGraph__add_closure: function StylesheetGraph__add_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.url = t1;
      _.baseImporter = t2;
      _.baseUrl = t3;
    },
    StylesheetGraph_addCanonical_closure: function StylesheetGraph_addCanonical_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _.originalUrl = t3;
    },
    StylesheetGraph_reload_closure: function StylesheetGraph_reload_closure(t0, t1, t2) {
      this.$this = t0;
      this.node = t1;
      this.canonicalUrl = t2;
    },
    StylesheetGraph__recanonicalizeImportsForNode_closure: function StylesheetGraph__recanonicalizeImportsForNode_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _.node = t3;
      _.forImport = t4;
      _.newMap = t5;
    },
    StylesheetGraph__nodeFor_closure: function StylesheetGraph__nodeFor_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.url = t1;
      _.baseImporter = t2;
      _.baseUrl = t3;
      _.forImport = t4;
    },
    StylesheetGraph__nodeFor_closure0: function StylesheetGraph__nodeFor_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _.resolvedUrl = t3;
    },
    StylesheetNode: function StylesheetNode(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._stylesheet = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _._upstream = t3;
      _._upstreamImports = t4;
      _._downstream = t5;
    },
    Syntax_forPath(path) {
      switch (A.ParsedPath_ParsedPath$parse(path, $.$get$context().style)._splitExtension$1(1)[1]) {
        case ".sass":
          return B.Syntax_Sass;
        case ".css":
          return B.Syntax_CSS;
        default:
          return B.Syntax_SCSS;
      }
    },
    Syntax: function Syntax(t0) {
      this._syntax$_name = t0;
    },
    LimitedMapView$blocklist(_map, blocklist, $K, $V) {
      var t2, key,
        t1 = A.LinkedHashSet_LinkedHashSet$_empty($K);
      for (t2 = J.get$iterator$ax(_map.get$keys(_map)); t2.moveNext$0();) {
        key = t2.get$current(t2);
        if (!blocklist.contains$1(0, key))
          t1.add$1(0, key);
      }
      return new A.LimitedMapView(_map, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("LimitedMapView<1,2>"));
    },
    LimitedMapView: function LimitedMapView(t0, t1, t2) {
      this._limited_map_view$_map = t0;
      this._limited_map_view$_keys = t1;
      this.$ti = t2;
    },
    MergedMapView$(maps, $K, $V) {
      var t1 = $K._eval$1("@<0>")._bind$1($V);
      t1 = new A.MergedMapView(A.LinkedHashMap_LinkedHashMap$_empty($K, t1._eval$1("Map<1,2>")), t1._eval$1("MergedMapView<1,2>"));
      t1.MergedMapView$1(maps, $K, $V);
      return t1;
    },
    MergedMapView: function MergedMapView(t0, t1) {
      this._mapsByKey = t0;
      this.$ti = t1;
    },
    MultiDirWatcher: function MultiDirWatcher(t0, t1, t2) {
      this._watchers = t0;
      this._group = t1;
      this._poll = t2;
    },
    NoSourceMapBuffer: function NoSourceMapBuffer(t0) {
      this._no_source_map_buffer$_buffer = t0;
    },
    PrefixedMapView: function PrefixedMapView(t0, t1, t2) {
      this._prefixed_map_view$_map = t0;
      this._prefix = t1;
      this.$ti = t2;
    },
    _PrefixedKeys: function _PrefixedKeys(t0) {
      this._view = t0;
    },
    _PrefixedKeys_iterator_closure: function _PrefixedKeys_iterator_closure(t0) {
      this.$this = t0;
    },
    PublicMemberMapView: function PublicMemberMapView(t0, t1) {
      this._public_member_map_view$_inner = t0;
      this.$ti = t1;
    },
    SourceMapBuffer: function SourceMapBuffer(t0, t1) {
      var _ = this;
      _._source_map_buffer$_buffer = t0;
      _._entries = t1;
      _._column = _._line = 0;
      _._inSpan = false;
    },
    SourceMapBuffer_buildSourceMap_closure: function SourceMapBuffer_buildSourceMap_closure(t0, t1) {
      this._box_0 = t0;
      this.prefixLength = t1;
    },
    UnprefixedMapView: function UnprefixedMapView(t0, t1, t2) {
      this._unprefixed_map_view$_map = t0;
      this._unprefixed_map_view$_prefix = t1;
      this.$ti = t2;
    },
    _UnprefixedKeys: function _UnprefixedKeys(t0) {
      this._unprefixed_map_view$_view = t0;
    },
    _UnprefixedKeys_iterator_closure: function _UnprefixedKeys_iterator_closure(t0) {
      this.$this = t0;
    },
    _UnprefixedKeys_iterator_closure0: function _UnprefixedKeys_iterator_closure0(t0) {
      this.$this = t0;
    },
    toSentence(iter, conjunction) {
      var t1 = iter.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$length(t1) === 1)
        return J.toString$0$(iter._f.call$1(t2.get$first(t1)));
      return A.TakeIterable_TakeIterable(iter, t2.get$length(t1) - 1, A._instanceType(iter)._eval$1("Iterable.E")).join$1(0, ", ") + (" " + conjunction + " " + A.S(iter._f.call$1(t2.get$last(t1))));
    },
    indent(string, indentation) {
      return new A.MappedListIterable(A._setArrayType(string.split("\n"), type$.JSArray_String), new A.indent_closure(indentation), type$.MappedListIterable_String_String).join$1(0, "\n");
    },
    pluralize($name, number, plural) {
      if (number === 1)
        return $name;
      if (plural != null)
        return plural;
      return $name + "s";
    },
    trimAscii(string, excludeEscape) {
      var t1,
        start = A._firstNonWhitespace(string);
      if (start == null)
        t1 = "";
      else {
        t1 = A._lastNonWhitespace(string, true);
        t1.toString;
        t1 = B.JSString_methods.substring$2(string, start, t1 + 1);
      }
      return t1;
    },
    trimAsciiRight(string, excludeEscape) {
      var end = A._lastNonWhitespace(string, excludeEscape);
      return end == null ? "" : B.JSString_methods.substring$2(string, 0, end + 1);
    },
    _firstNonWhitespace(string) {
      var t1, i, t2;
      for (t1 = string.length, i = 0; i < t1; ++i) {
        t2 = B.JSString_methods._codeUnitAt$1(string, i);
        if (!(t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12))
          return i;
      }
      return null;
    },
    _lastNonWhite