") {
                        expect(() => t.isInstanceOf(value, C)).not.toThrow();
                    }
                    else {
                        expect(() => t.isInstanceOf(value, C)).toThrow();
                    }
                }
            });
            test("safeJsonParse", () => {
                const input = {
                    a: {
                        b: {
                            c: "d",
                        },
                        e: null,
                    },
                    f: "g",
                };
                function assertIsInput(input) {
                    t.isRecordWithKeys(input, ["a", "f"]);
                    t.isRecordWithKeys(input.a, ["b", "e"]);
                    t.isRecordWithKeys(input.a.b, ["c"]);
                    t.isExactly(input.a.b.c, "d");
                    t.isExactly(input.a.e, null);
                    t.isExactly(input.f, "g");
                }
                const json = JSON.stringify(input);
                const output = t.safeJsonParse(json);
                assertIsInput(output);
                const typedOutput = output;
                expect(typedOutput).toEqual(input);
            });
            test("check filter", () => {
                const a = entries
                    .map(([, value]) => value)
                    .filter(t.check(t.isNumber))
                    .map((value) => (value % 0 === 0 ? value : null))
                    .filter(t.check(t.isNotNull));
                for (const item 