 resolver.",
          "$default": {
            "$source": "argv",
            "index": 0
          }
        },
        "skipTests": {
          "type": "boolean",
          "description": "Do not create \"spec.ts\" test files for the new resolver.",
          "default": false
        },
        "flat": {
          "type": "boolean",
          "description": "When true (the default), creates the new files at the top level of the current project.",
          "default": true
        },
        "path": {
          "type": "string",
          "format": "path",
          "$default": {
            "$source": "workingDirectory"
          },
          "description": "The path at which to create the interface that defines the resolver, relative to the current workspace.",
          "visible": false
        },
        "project": {
          "type": "string",
          "description": "The name of the project.",
          "$default": {
            "$source": "projectName"
          }
        }
      }
    },
    "SchematicsAngularServiceSchema": {
      "title": "Angular Service Options Schema",
      "type": "object",
      "additionalProperties": false,
      "description": "Creates a new, generic service definition in the given or default project.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the service.",
          "$default": {
            "$source": "argv",
            "index": 0
          }
        },
        "path": {
          "type": "string",
          "$default": {
            "$source": "workingDirectory"
          },
          "description": "The path at which to create the service, relative to the workspace root.",
          "visible": false
        },
        "project": {
          "type": "string",
          "description": "The name of the project.",
          "$default": {
            "$source": "projectName"
          }
        },
        "flat": {
          "type": "boolean",
          "default": true,
          "description": "When true (the default), creates files at the top level of the project."
        },
        "skipTests": {
          "type": "boolean",
          "description": "Do not create \"spec.ts\" test files for the new service.",
          "default": false
        }
      }
    },
    "SchematicsAngularWebWorkerSchema": {
      "title": "Angular Web Worker Options Schema",
      "type": "object",
      "additionalProperties": false,
      "description": "Creates a new, generic web worker definition in the given or default project.",
      "properties": {
        "path": {
          "type": "string",
          "format": "path",
          "$default": {
            "$source": "workingDirectory"
          },
          "description": "The path at which to create the worker file, relative to the current workspace.",
          "visible": false
        },
        "project": {
          "type": "string",
          "description": "The name of the project.",
          "$default": {
            "$source": "projectName"
          }
        },
        "name": {
          "type": "string",
          "description": "The name of the worker.",
          "$default": {
            "$source": "argv",
            "index": 0
          }
        },
        "snippet": {
          "type": "boolean",
          "default": true,
          "description": "Add a worker creation snippet in a sibling file of the same name."
        }
      }
    },
    "AngularDevkitBuildAngularBuildersAppShellSchema": {
      "title": "App Shell Target",
      "description": "App Shell target options for Build Facade.",
      "type": "object",
      "properties": {
        "browserTarget": {
          "type": "string",
          "description": "A browser builder target use for rendering the application shell in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.",
          "pattern": "^[^:\\s]+:[^:\\s]+(:[^\\s]+)?$"
        },
        "serverTarget": {
          "type": "string",
          "description": "A server builder target use for rendering the application shell in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.",
          "pattern": "^[^:\\s]+:[^:\\s]+(:[^\\s]+)?$"
        },
        "appModuleBundle": {
          "type": "string",
          "description": "Script that exports the Server AppModule to render. This should be the main JavaScript outputted by the server target. By default we will resolve the outputPath of the serverTarget and find a bundle named 'main' in it (whether or not there's a hash tag)."
        },
        "route": {
          "type": "string",
          "description": "The route to render.",
          "default": "/"
        },
        "inputIndexPath": {
          "type": "string",
          "description": "The input path for the index.html file. By default uses the output index.html of the browser target."
        },
        "outputIndexPath": {
          "type": "string",
          "description": "The output path of the index.html file. By default will overwrite the input file."
        }
      },
      "additionalProperties": false
    },
    "AngularDevkitBuildAngularBuildersBrowserSchema": {
      "title": "Webpack browser schema for Build Facade.",
      "description": "Browser target options",
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "description": "List of static application assets.",
          "default": [],
          "items": {
            "$ref": "#/definitions/AngularDevkitBuildAngularBuildersBrowserSchema/definitions/assetPattern"
          }
        },
        "main": {
          "type": "string",
          "description": "The full path for the main entry point to the app, relative to the current workspace."
        },
        "polyfills": {
          "type": "string",
          "description": "The full path for the polyfills file, relative to the current workspace."
        },
        "tsConfig": {
          "type": "string",
          "description": "The full path for the TypeScript configuration file, relative to the current workspace."
        },
        "scripts": {
          "description": "Global scripts to be included in the build.",
          "type": "array",
          "default": [],
          "items": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "string",
                    "description": "The file to include.",
                    "pattern": "\\.[cm]?jsx?$"
                  },
                  "bundleName": {
                    "type": "string",
                    "pattern": "^[\\w\\-.]*$",
                    "description": "The bundle name for this extra entry point."
                  },
                  "inject": {
                    "type": "boolean",
                    "description": "If the bundle will be referenced in the HTML file.",
                    "default": true
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "string",
                "description": "The file to include.",
                "pattern": "\\.[cm]?jsx?$"
              }
            ]
          }
        },
        "styles": {
          "description": "Global styles to be included in the build.",
          "type": "array",
          "default": [],
          "items": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "string",
                    "description": "The file to include.",
                    "pattern": "\\.(?:css|scss|sass|less|styl)$"
                  },
                  "bundleName": {
                    "type": "string",
                    "pattern": "^[\\w\\-.]*$",
                    "description": "The bundle name for this extra entry point."
                  },
                  "inject": {
                    "type": "boolean",
                    "description": "If the bundle will be referenced in the HTML file.",
                    "default": true
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "string",
                "description": "The file to include.",
                "pattern": "\\.(?:css|scss|sass|less|styl)$"
              }
            ]
          }
        },
        "inlineStyleLanguage": {
          "description": "The stylesheet language to use for the application's inline component styles.",
          "type": "string",
          "default": "css",
          "enum": [
            "css",
            "less",
            "sass",
            "scss"
          ]
        },
        "stylePreprocessorOptions": {
          "description": "Options to pass to style preprocessors.",
          "type": "object",
          "properties": {
            "includePaths": {
              "description": "Paths to include. Paths will be resolved to workspace root.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            }
          },
          "additionalProperties": false
        },
        "optimization": {
          "description": "Enables optimization of the build output. Including minification of scripts and styles, tree-shaking, dead-code elimination, inlining of critical CSS and fonts inlining. For more information, see https://angular.io/guide/workspace-config#optimization-configuration.",
          "default": true,
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "scripts": {
                  "type": "boolean",
                  "description": "Enables optimization of the scripts output.",
                  "default": true
                },
                "styles": {
                  "description": "Enables optimization of the styles output.",
                  "default": true,
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "minify": {
                          "type": "boolean",
                          "description": "Minify CSS definitions by removing extraneous whitespace and comments, merging identifiers and minimizing values.",
                          "default": true
                        },
                        "inlineCritical": {
                          "type": "boolean",
                          "description": "Extract and inline critical CSS definitions to improve first paint time.",
                          "default": true
                        