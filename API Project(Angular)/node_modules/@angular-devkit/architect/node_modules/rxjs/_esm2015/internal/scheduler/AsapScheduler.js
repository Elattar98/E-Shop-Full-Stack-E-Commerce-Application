export declare type WeakAssert = (input: unknown, message?: string) => void;
export declare type SubType<Input, Output> = Output extends Input ? Output : never;
export declare type Assert<Input = unknown, Output = Input> = (input: Input, message?: string) => asserts input is SubType<Input, Output>;
export declare type Check<Input = unknown, Output = Input> = (input: Input) => input is SubType<Input, Output>;
export declare const defaultAssert: WeakAssert;
export declare const assert: Assert<boolean, true>;
export declare function setBaseAssert(assert?: WeakAssert): void;
export declare const safeJsonParse: (json: string) => unknown;
export declare function isUnknown(_input: unknown): _input is unknown;
export declare function isNever(_input: never, message?: string): never