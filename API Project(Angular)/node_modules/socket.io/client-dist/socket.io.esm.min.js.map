    // goto after for
                  $async$goto = 4;
                  break;
                }
                component = t1[_i];
                $async$goto = component instanceof A.CompoundSelector ? 5 : 6;
                break;
              case 5:
                // then
                t3 = component.components, t4 = t3.length, _i0 = 0;
              case 7:
                // for condition
                if (!(_i0 < t4)) {
                  // goto after for
                  $async$goto = 9;
                  break;
                }
                simple = t3[_i0];
                $async$goto = 10;
                return simple;
              case 10:
                // after yield
                if (!(simple instanceof A.PseudoSelector)) {
                  // goto for update
                  $async$goto = 8;
                  break;
                }
                selector = simple.selector;
                if (selector == null) {
                  // goto for update
                  $async$goto = 8;
                  break;
                }
                t5 = selector.components, t6 = t5.length, _i1 = 0;
              case 11:
                // for condition
                if (!(_i1 < t6)) {
                  // goto after for
                  $async$goto = 13;
                  break;
                }
                $async$goto = 14;
                return A._IterationMarker_yieldStar($async$self._simpleSelectors$1(t5[_i1]));
              case 14:
                // after yield
              case 12:
                // for update
                ++_i1;
                // goto for condition
                $async$goto = 11;
                break;
              case 13:
                // after for
              case 8:
                // for update
                ++_i0;
                // goto for condition
                $async$goto = 7;
                break;
              case 9:
                // after for
              case 6:
                // join
              case 3:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.SimpleSelector);
    },
    _extendExistingExtensions$2(extensions, newExtensions) {
      var extension, selectors, error, stackTrace, t1, t2, t3, t4, t5, t6, additionalExtensions, _i, t7, exception, t8, t9, containsExtension, first, _i0, complex, t10, t11, t12, t13, t14, withExtender, existingExtension, _i1, component, _i2;
      for (t1 = J.toList$0$ax(extensions), t2 = t1.length, t3 = this._extensionsByExtender, t4 = type$.SimpleSelector, t5 = type$.Map_ComplexSelector_Extension, t6 = this._extensions, additionalExtensions = null, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        extension = t1[_i];
        t7 = t6.$index(0, extension.target);
        t7.toString;
        selectors = null;
        try {
          selectors = this._extendComplex$4(extension.extender.selector, extension.extender.span, newExtensions, extension.mediaContext);
          if (selectors == null)
            continue;
        } catch (exception) {
          t8 = A.unwrapException(exception);
          if (t8 instanceof A.SassException) {
            error = t8;
            stackTrace = A.getTraceFromException(exception);
            t8 = error;
            t9 = J.getInterceptor$z(t8);
            A.throwWithTrace(new A.SassException("From " + extension.extender.span.message$1(0, "") + "\n" + error._span_exception$_message, A.SourceSpanException.prototype.get$span.call(t9, t8)), stackTrace);
          } else
            throw exception;
        }
        t8 = J.get$first$ax(selectors);
        t9 = extension.extender;
        containsExtension = B.C_ListEquality.equals$2(0, t8.components, t9.selector.components);
        for (t8 = selectors, t9 = t8.length, first = true, _i0 = 0; _i0 < t8.length; t8.length === t9 || (0, A.throwConcurrentModificationError)(t8), ++_i0) {
          complex = t8[_i0];
          if (containsExtension && first) {
            first = false;
            continue;
          }
          t10 = extension;
          t11 = t10.extender;
          t12 = t10.target;
          t13 = t10.span;
          t14 = t10.mediaContext;
          t10 = t10.isOptional;
          if (complex._complex$_maxSpecificity == null)
            complex._computeSpecificity$0();
          complex._complex$_maxSpecificity.toString;
          t11 = new A.Extender(complex, false, t11.span);
          withExtender = t11._extension = new A.Extension(t11, t12, t14, t10, t13);
          existingExtension = t7.$index(0, complex);
          if (existingExtension != null)
            t7.$indexSet(0, complex, A.MergedExtension_merge(existingExtension, withExtender));
          else {
            t7.$indexSet(0, complex, withExtender);
            for (t10 = complex.components, t11 = t10.length, _i1 = 0; _i1 < t11; ++_i1) {
              component = t10[_i1];
              if (component instanceof A.CompoundSelector)
                for (t12 = component.components, t13 = t12.length, _i2 = 0; _i2 < t13; ++_i2)
                  J.add$1$ax(t3.putIfAbsent$2(t12[_i2], new A.ExtensionStore__extendExistingExtensions_closure()), withExtender);
            }
            if (newExtensions.containsKey$1(extension.target)) {
              if (additionalExtensions == null)
                additionalExtensions = A.LinkedHashMap_LinkedHashMap$_empty(t4, t5);
              additionalExtensions.putIfAbsent$2(extension.target, new A.ExtensionStore__extendExistingExtensions_closure0()).$indexSet(0, complex, withExtender);
            }
          }
        }
        if (!containsExtension)
          t7.remove$1(0, extension.extender);
      }
      return additionalExtensions;
    },
    _extendExistingSelectors$2(selectors, newExtensions) {
      var selector, error, stackTrace, t1, t2, oldValue, exception, t3, t4;
      for (t1 = selectors.get$iterator(selectors), t2 = this._mediaContexts; t1.moveNext$0();) {
        selector = t1.get$current(t1);
        oldValue = selector.value;
        try {
          selector.value = this._extendList$4(selector.value, selector.span, newExtensions, t2.$index(0, selector));
        } catch (exception) {
          t3 = A.unwrapException(exception);
          if (t3 instanceof A.SassException) {
            error = t3;
            stackTrace = A.getTraceFromException(exception);
            t3 = error;
            t4 = J.getInterceptor$z(t3);
            A.throwWithTrace(new A.SassException("From " + selector.span.message$1(0, "") + "\n" + error._span_exception$_message, A.SourceSpanException.prototype.get$span.call(t4, t3)), stackTrace);
          } else
            throw exception;
        }
        if (oldValue === selector.value)
          continue;
        this._registerSelector$2(selector.value, selector);
      }
    },
    addExtensions$1(extensionStores) {
      var t1, t2, t3, _box_0 = {};
      _box_0.newExtensions = _box_0.selectorsToExtend = _box_0.extensionsToExtend = null;
      for (t1 = J.get$iterator$ax(extensionStores), t2 = this._sourceSpecificity; t1.moveNext$0();) {
        t3 = t1.get$current(t1);
        if (t3.get$isEmpty(t3))
          continue;
        t2.addAll$1(0, t3.get$_sourceSpecificity());
        t3.get$_extensions().forEach$1(0, new A.ExtensionStore_addExtensions_closure(_box_0, this));
      }
      A.NullableExtension_andThen(_box_0.newExtensions, new A.ExtensionStore_addExtensions_closure0(_box_0, this));
    },
    _extendList$4(list, listSpan, extensions, mediaQueryContext) {
      var t1, t2, t3, extended, i, complex, result, t4;
      for (t1 = list.components, t2 = t1.length, t3 = type$.JSArray_ComplexSelector, extended = null, i = 0; i < t2; ++i) {
        complex = t1[i];
        result = this._extendComplex$4(complex, listSpan, extensions, mediaQueryContext);
        if (result == null) {
          if (extended != null)
            extended.push(complex);
        } else {
          if (extended == null)
            if (i === 0)
              extended = A._setArrayType([], t3);
            else {
              t4 = B.JSArray_methods.sublist$2(t1, 0, i);
              extended = A._setArrayType(t4.slice(0), A._arrayInstanceType(t4));
            }
          B.JSArray_methods.addAll$1(extended, result);
        }
      }
      if (extended == null)
        return list;
      t1 = this._originals;
      return A.SelectorList$(this._trim$2(extended, t1.get$contains(t1)));
    },
    _extendList$3(list, listSpan, extensions) {
      return this._extendList$4(list, listSpan, extensions, null);
    },
    _extendComplex$4(complex, complexSpan, extensions, mediaQueryContext) {
      var t1, t2, t3, t4, t5, extendedNotExpanded, i, component, extended, result, t6, t7, t8, _null = null,
        _s28_ = "components may not be empty.",
        _box_0 = {},
        isOriginal = this._originals.contains$1(0, complex);
      for (t1 = complex.components, t2 = t1.length, t3 = type$.JSArray_ComplexSelector, t4 = type$.JSArray_ComplexSelectorComponent, t5 = type$.ComplexSelectorComponent, extendedNotExpanded = _null, i = 0; i < t2; ++i) {
        component = t1[i];
        if (component instanceof A.CompoundSelector) {
          extended = this._extendCompound$5$inOriginal(component, complexSpan, extensions, mediaQueryContext, isOriginal);
          if (extended == null) {
            if (extendedNotExpanded != null) {
              result = A.List_List$from(A._setArrayType([component], t4), false, t5);
              result.fixed$length = Array;
              result.immutable$list = Array;
              t6 = result;
              if (t6.length === 0)
                A.throwExpression(A.ArgumentError$(_s28_, _null));
              B.JSArray_methods.add$1(extendedNotExpanded, A._setArrayType([new A.ComplexSelector(t6, false)], t3));
            }
          } else {
            if (extendedNotExpanded == null) {
              t6 = A._arrayInstanceType(t1);
              t7 = t6._eval$1("SubListIterable<1>");
              t8 = new A.SubListIterable(t1, 0, i, t7);
              t8.SubListIterable$3(t1, 0, i, t6._precomputed1);
              t7 = t7._eval$1("MappedListIterable<ListIterable.E,List<ComplexSelector>>");
              extendedNotExpanded = A.List_List$of(new A.MappedListIterable(t8, new A.ExtensionStore__extendComplex_closure(complex), t7), true, t7._eval$1("ListIterable.E"));
            }
            B.JSArray_methods.add$1(extendedNotExpanded, extended);
          }
        } else if (extendedNotExpanded != null) {
          result = A.List_List$from(A._setArrayType([component], t4), false, t5);
          result.fixed$length = Array;
          result.immutable$list = Array;
          t6 = result;
          if (t6.length === 0)
            A.throwExpression(A.ArgumentError$(_s28_, _null));
          B.JSArray_methods.add$1(extendedNotExpanded, A._setArrayType([new A.ComplexSelector(t6, false)], t3));
        }
      }
      if (extendedNotExpanded == null)
        return _null;
      _box_0.first = true;
      t1 = type$.ComplexSelector;
      t1 = J.expand$1$1$ax(A.paths(extendedNotExpanded, t1), new A.ExtensionStore__extendComplex_closure0(_box_0, this, complex), t1);
      return A.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E"));
    },
    _extendCompound$5$inOriginal(compound, compoundSpan, extensions, mediaQueryContext, inOriginal) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, options, i, simple, extended, result, t11, t12, isOriginal, _this = this, _null = null,
        _s28_ = "components may not be empty.",
        _box_1 = {},
        t1 = _this._mode,
        targetsUsed = t1 === B.ExtendMode_normal || extensions.get$length(extensions) < 2 ? _null : A.LinkedHashSet_LinkedHashSet$_empty(type$.SimpleSelector);
      for (t2 = compound.components, t3 = t2.length, t4 = type$.JSArray_List_Extender, t5 = type$.JSArray_Extender, t6 = type$.JSArray_ComplexSelectorComponent, t7 = type$.ComplexSelectorComponent, t8 = type$.SimpleSelector, t9 = _this._sourceSpecificity, t10 = type$.JSArray_SimpleSelector, options = _null, i = 0; i < t3; ++i) {
        simple = t2[i];
        extended = _this._extendSimple$5(simple, compoundSpan, extensions, mediaQueryContext, targetsUsed);
        if (extended == null) {
          if (options != null) {
            result = A.List_List$from(A._setArrayType([simple], t10), false, t8);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t11 = result;
            if (t11.length === 0)
              A.throwExpression(A.ArgumentError$(_s28_, _null));
            result = A.List_List$from(A._setArrayType([new A.CompoundSelector(t11)], t6), false, t7);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t11 = result;
            if (t11.length === 0)
              A.throwExpression(A.ArgumentError$(_s28_, _null));
            t9.$index(0, simple);
            options.push(A._setArrayType([new A.Extender(new A.ComplexSelector(t11, false), true, compoundSpan)], t5));
          }
        } else {
          if (options == null) {
            options = A._setArrayType([], t4);
            if (i !== 0) {
              t11 = A._arrayInstanceType(t2);
              t12 = new A.SubListIterable(t2, 0, i, t11._eval$1("SubListIterable<1>"));
              t12.SubListIterable$3(t2, 0, i, t11._precomputed1);
              result = A.List_List$from(t12, false, t8);
              result.fixed$length = Array;
              result.immutable$list = Array;
              t12 = result;
              compound = new A.CompoundSelector(t12);
              if (t12.length === 0)
                A.throwExpression(A.ArgumentError$(_s28_, _null));
              result = A.List_List$from(A._setArrayType([compound], t6), false, t7);
              result.fixed$length = Array;
              result.immutable$list = Array;
              t11 = result;
              if (t11.length === 0)
                A.throwExpression(A.ArgumentError$(_s28_, _null));
              _this._sourceSpecificityFor$1(compound);
              options.push(A._setArrayType([new A.Extender(new A.ComplexSelector(t11, false), true, compoundSpan)], t5));
            }
          }
          B.JSArray_methods.addAll$1(options, extended);
        }
      }
      if (options == null)
        return _null;
      if (targetsUsed != null && targetsUsed._collection$_length !== extensions.get$length(extensions))
        return _null;
      if (options.length === 1)
        return J.map$1$1$ax(B.JSArray_methods.get$first(options), new A.ExtensionStore__extendCompound_closure(mediaQueryContext), type$.ComplexSelector).toList$0(0);
      t1 = _box_1.first = t1 !== B.ExtendMode_replace;
      t2 = A.IterableNullableExtension_whereNotNull(J.map$1$1$ax(A.paths(options, type$.Extender), new A.ExtensionStore__extendCompound_closure0(_box_1, mediaQueryContext), type$.nullable_List_ComplexSelector), type$.List_ComplexSelector);
      t3 = t2.$ti._eval$1("ExpandIterable<Iterable.E,ComplexSelector>");
      result = A.List_List$of(new A.ExpandIterable(t2, new A.ExtensionStore__extendCompound_closure1(), t3), true, t3._eval$1("Iterable.E"));
      isOriginal = new A.ExtensionStore__extendCompound_closure2();
      return _this._trim$2(result, inOriginal && t1 ? new A.ExtensionStore__extendCompound_closure3(B.JSArray_methods.get$first(result)) : isOriginal);
    },
    _extendSimple$5(simple, simpleSpan, extensions, mediaQueryContext, targetsUsed) {
      var extended,
        t1 = new A.ExtensionStore__extendSimple_withoutPseudo(this, extensions, targetsUsed, simpleSpan);
      if (simple instanceof A.PseudoSelector && simple.selector != null) {
        extended = this._extendPseudo$4(simple, simpleSpan, extensions, mediaQueryContext);
        if (extended != null)
          return new A.MappedListIterable(extended, new A.ExtensionStore__extendSimple_closure(this, t1, simpleSpan), A._arrayInstanceType(extended)._eval$1("MappedListIterable<1,List<Extender>>"));
      }
      return A.NullableExtension_andThen(t1.call$1(simple), new A.ExtensionStore__extendSimple_closure0());
    },
    _extenderForSimple$2(simple, span) {
      var t1 = A.ComplexSelector$(A._setArrayType([A.CompoundSelector$(A._setArrayType([simple], type$.JSArray_SimpleSelector))], type$.JSArray_ComplexSelectorComponent), false);
      this._sourceSpecificity.$index(0, simple);
      return new A.Extender(t1, true, span);
    },
    _extendPseudo$4(pseudo, pseudoSpan, extensions, mediaQueryContext) {
      var extended, complexes, t1, result,
        selector = pseudo.selector;
      if (selector == null)
        throw A.wrapException(A.ArgumentError$("Selector " + pseudo.toString$0(0) + " must have a selector argument.", null));
      extended = this._extendList$4(selector, pseudoSpan, extensions, mediaQueryContext);
      if (extended === selector)
        return null;
      complexes = extended.components;
      t1 = pseudo.normalizedName === "not";
      if (t1 && !B.JSArray_methods.any$1(selector.components, new A.ExtensionStore__extendPseudo_closure()) && B.JSArray_methods.any$1(complexes, new A.ExtensionStore__extendPseudo_closure0()))
        complexes = new A.WhereIterable(complexes, new A.ExtensionStore__extendPseudo_closure1(), A._arrayInstanceType(complexes)._eval$1("WhereIterable<1>"));
      complexes = J.expand$1$1$ax(complexes, new A.ExtensionStore__extendPseudo_closure2(pseudo), type$.ComplexSelector);
      if (t1 && selector.components.length === 1) {
        t1 = A.MappedIterable_MappedIterable(complexes, new A.ExtensionStore__extendPseudo_closure3(pseudo), complexes.$ti._eval$1("Iterable.E"), type$.PseudoSelector);
        result = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("Iterable.E"));
        return result.length === 0 ? null : result;
      } else
        return A._setArrayType([A.PseudoSelector$(pseudo.name, pseudo.argument, !pseudo.isClass, A.SelectorList$(complexes))], type$.JSArray_PseudoSelector);
    },
    _trim$2(selectors, isOriginal) {
      var result, i, t1, t2, numOriginals, _box_0, complex1, j, t3, t4, _i, component;
      if (selectors.length > 100)
        return selectors;
      result = A.QueueList$(null, type$.ComplexSelector);
      $label0$0:
        for (i = selectors.length - 1, t1 = A._arrayInstanceType(selectors), t2 = t1._precomputed1, t1 = t1._eval$1("SubListIterable<1>"), numOriginals = 0; i >= 0; --i) {
          _box_0 = {};
          complex1 = selectors[i];
          if (isOriginal.call$1(complex1)) {
            for (j = 0; j < numOriginals; ++j)
              if (J.$eq$(result.$index(0, j), complex1)) {
                A.rotateSlice(result, 0, j + 1);
                continue $label0$0;
              }
            ++numOriginals;
            result.addFirst$1(complex1);
            continue $label0$0;
          }
          _box_0.maxSpecificity = 0;
          for (t3 = complex1.components, t4 = t3.length, _i = 0; _i < t4; ++_i) {
            component = t3[_i];
            if (component instanceof A.CompoundSelector)
              _box_0.maxSpecificity = Math.max(_box_0.maxSpecificity, this._sourceSpecificityFor$1(component));
          }
          if (result.any$1(result, new A.ExtensionStore__trim_closure(_box_0, complex1)))
            continue $label0$0;
          t3 = new A.SubListIterable(selectors, 0, i, t1);
          t3.SubListIterable$3(selectors, 0, i, t2);
          if (t3.any$1(0, new A.ExtensionStore__trim_closure0(_box_0, complex1)))
            continue $label0$0;
          result.addFirst$1(complex1);
        }
      return result;
    },
    _sourceSpecificityFor$1(compound) {
      var t1, t2, t3, specificity, _i, t4;
      for (t1 = compound.components, t2 = t1.length, t3 = this._sourceSpecificity, specificity = 0, _i = 0; _i < t2; ++_i) {
        t4 = t3.$index(0, t1[_i]);
        specificity = Math.max(specificity, A.checkNum(t4 == null ? 0 : t4));
      }
      return specificity;
    },
    clone$0() {
      var t3, t4, _this = this,
        t1 = type$.SimpleSelector,
        newSelectors = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Set_ModifiableCssValue_SelectorList),
        t2 = type$.ModifiableCssValue_SelectorList,
        newMediaContexts = A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.List_CssMediaQuery),
        oldToNewSelectors = A.LinkedHashMap_LinkedHashMap$_empty(type$.CssValue_SelectorList, t2);
      _this._selectors.forEach$1(0, new A.ExtensionStore_clone_closure(_this, newSelectors, oldToNewSelectors, newMediaContexts));
      t2 = type$.Extension;
      t3 = A.copyMapOfMap(_this._extensions, t1, type$.ComplexSelector, t2);
      t2 = A.copyMapOfList(_this._extensionsByExtender, t1, t2);
      t1 = new A._LinkedIdentityHashMap(type$._LinkedIdentityHashMap_SimpleSelector_int);
      t1.addAll$1(0, _this._sourceSpecificity);
      t4 = new A._LinkedIdentityHashSet(type$._LinkedIdentityHashSet_ComplexSelector);
      t4.addAll$1(0, _this._originals);
      return new A.Tuple2(new A.ExtensionStore(newSelectors, t3, t2, newMediaContexts, t1, t4, B.ExtendMode_normal), oldToNewSelectors, type$.Tuple2_of_ExtensionStore_and_Map_of_CssValue_SelectorList_and_ModifiableCssValue_SelectorList);
    },
    get$_extensions() {
      return this._extensions;
    },
    get$_sourceSpecificity() {
      return this._sourceSpecificity;
    }
  };
  A.ExtensionStore_extensionsWhereTarget_closure.prototype = {
    call$1(extension) {
      return !extension.isOptional;
    },
    $signature: 600
  };
  A.ExtensionStore__registerSelector_closure.prototype = {
    call$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.ModifiableCssValue_SelectorList);
    },
    $signature: 349
  };
  A.ExtensionStore_addExtension_closure.prototype = {
    call$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.ComplexSelector, type$.Extension);
    },
    $signature: 130
  };
  A.ExtensionStore_addExtension_closure0.prototype = {
    call$0() {
      return A._setArrayType([], type$.JSArray_Extension);
    },
    $signature: 200
  };
  A.ExtensionStore_addExtension_closure1.prototype = {
    call$0() {
      return this.complex.get$maxSpecificity();
    },
    $signature: 12
  };
  A.ExtensionStore__extendExistingExtensions_closure.prototype = {
    call$0() {
      return A._setArrayType([], type$.JSArray_Extension);
    },
    $signature: 200
  };
  A.ExtensionStore__extendExistingExtensions_closure0.prototype = {
    call$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.ComplexSelector, type$.Extension);
    },
    $signature: 130
  };
  A.ExtensionStore_addExtensions_closure.prototype = {
    call$2(target, newSources) {
      var first, t1, extensionsForTarget, t2, t3, t4, selectorsForTarget, t5, existingSources, _this = this;
      if (target instanceof A.PlaceholderSelector) {
        first = B.JSString_methods._codeUnitAt$1(target.name, 0);
        t1 = first === 45 || first === 95;
      } else
        t1 = false;
      if (t1)
        return;
      t1 = _this.$this;
      extensionsForTarget = t1._extensionsByExtender.$index(0, target);
      t2 = extensionsForTarget == null;
      if (!t2) {
        t3 = _this._box_0;
        t4 = t3.extensionsToExtend;
        B.JSArray_methods.addAll$1(t4 == null ? t3.extensionsToExtend = A._setArrayType([], type$.JSArray_Extension) : t4, extensionsForTarget);
      }
      selectorsForTarget = t1._selectors.$index(0, target);
      t3 = selectorsForTarget != null;
      if (t3) {
        t4 = _this._box_0;
        t5 = t4.selectorsToExtend;
        (t5 == null ? t4.selectorsToExtend = A.LinkedHashSet_LinkedHashSet$_empty(type$.ModifiableCssValue_SelectorList) : t5).addAll$1(0, selectorsForTarget);
      }
      t1 = t1._extensions;
      existingSources = t1.$index(0, target);
      if (existingSources == null) {
        t4 = type$.ComplexSelector;
        t5 = type$.Extension;
        t1.$indexSet(0, target, A.LinkedHashMap_LinkedHashMap$of(newSources, t4, t5));
        if (!t2 || t3) {
          t1 = _this._box_0;
          t2 = t1.newExtensions;
          t1 = t2 == null ? t1.newExtensions = A.LinkedHashMap_LinkedHashMap$_empty(type$.SimpleSelector, type$.Map_ComplexSelector_Extension) : t2;
          t1.$indexSet(0, target, A.LinkedHashMap_LinkedHashMap$of(newSources, t4, t5));
        }
      } else
        newSources.forEach$1(0, new A.ExtensionStore_addExtensions__closure1(_this._box_0, existingSources, extensionsForTarget, selectorsForTarget, target));
    },
    $signature: 359
  };
  A.ExtensionStore_addExtensions__closure1.prototype = {
    call$2(extender, extension) {
      var t2, _this = this,
        t1 = _this.existingSources;
      if (t1.containsKey$1(extender)) {
        t2 = t1.$index(0, extender);
        t2.toString;
        extension = A.MergedExtension_merge(t2, extension);
        t1.$indexSet(0, extender, extension);
      } else
        t1.$indexSet(0, extender, extension);
      if (_this.extensionsForTarget != null || _this.selectorsForTarget != null) {
        t1 = _this._box_0;
        t2 = t1.newExtensions;
        t1 = t2 == null ? t1.newExtensions = A.LinkedHashMap_LinkedHashMap$_empty(type$.SimpleSelector, type$.Map_ComplexSelector_Extension) : t2;
        J.$indexSet$ax(t1.putIfAbsent$2(_this.target, new A.ExtensionStore_addExtensions___closure()), extender, extension);
      }
    },
    $signature: 365
  };
  A.ExtensionStore_addExtensions___closure.prototype = {
    call$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.ComplexSelector, type$.Extension);
    },
    $signature: 130
  };
  A.ExtensionStore_addExtensions_closure0.prototype = {
    call$1(newExtensions) {
      var t1 = this._box_0,
        t2 = this.$this;
      A.NullableExtension_andThen(t1.extensionsToExtend, new A.ExtensionStore_addExtensions__closure(t2, newExtensions));
      A.NullableExtension_andThen(t1.selectorsToExtend, new A.ExtensionStore_addExtensions__closure0(t2, newExtensions));
    },
    $signature: 369
  };
  A.ExtensionStore_addExtensions__closure.prototype = {
    call$1(extensionsToExtend) {
      return this.$this._extendExistingExtensions$2(extensionsToExtend, this.newExtensions);
    },
    $signature: 378
  };
  A.ExtensionStore_addExtensions__closure0.prototype = {
    call$1(selectorsToExtend) {
      return this.$this._extendExistingSelectors$2(selectorsToExtend, this.newExtensions);
    },
    $signature: 386
  };
  A.ExtensionStore__extendComplex_closure.prototype = {
    call$1(component) {
      return A._setArrayType([A.ComplexSelector$(A._setArrayType([component], type$.JSArray_ComplexSelectorComponent), this.complex.lineBreak)], type$.JSArray_ComplexSelector);
    },
    $signature: 387
  };
  A.ExtensionStore__extendComplex_closure0.prototype = {
    call$1(path) {
      var t1 = A.weave(J.map$1$1$ax(path, new A.ExtensionStore__extendComplex__closure(), type$.List_ComplexSelectorComponent).toList$0(0));
      return new A.MappedListIterable(t1, new A.ExtensionStore__extendComplex__closure0(this._box_0, this.$this, this.complex, path), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,ComplexSelector>"));
    },
    $signature: 391
  };
  A.ExtensionStore__extendComplex__closure.prototype = {
    call$1(complex) {
      return complex.components;
    },
    $signature: 394
  };
  A.ExtensionStore__extendComplex__closure0.prototype = {
    call$1(components) {
      var _this = this,
        t1 = _this.complex,
        outputComplex = A.ComplexSelector$(components, t1.lineBreak || J.any$1$ax(_this.path, new A.ExtensionStore__extendComplex___closure())),
        t2 = _this._box_0;
      if (t2.first && _this.$this._originals.contains$1(0, t1))
        _this.$this._originals.add$1(0, outputComplex);
      t2.first = false;
      return outputComplex;
    },
    $signature: 75
  };
  A.ExtensionStore__extendComplex___closure.prototype = {
    call$1(inputComplex) {
      return inputComplex.lineBreak;
    },
    $signature: 19
  };
  A.ExtensionStore__extendCompound_closure.prototype = {
    call$1(extender) {
      extender.assertCompatibleMediaContext$1(this.mediaQueryContext);
      return extender.selector;
    },
    $signature: 403
  };
  A.ExtensionStore__extendCompound_closure0.prototype = {
    call$1(path) {
      var complexes, toUnify, t2, t3, originals, t4, _box_0 = {},
        t1 = this._box_1;
      if (t1.first) {
        t1.first = false;
        complexes = A._setArrayType([A._setArrayType([A.CompoundSelector$(J.expand$1$1$ax(path, new A.ExtensionStore__extendCompound__closure(), type$.SimpleSelector))], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent);
      } else {
        toUnify = A.QueueList$(null, type$.List_ComplexSelectorComponent);
        for (t1 = J.get$iterator$ax(path), t2 = type$.CompoundSelector, t3 = type$.JSArray_SimpleSelector, originals = null; t1.moveNext$0();) {
          t4 = t1.get$current(t1);
          if (t4.isOriginal) {
            if (originals == null)
              originals = A._setArrayType([], t3);
            B.JSArray_methods.addAll$1(originals, t2._as(B.JSArray_methods.get$last(t4.selector.components)).components);
          } else
            toUnify._queue_list$_add$1(t4.selector.components);
        }
        if (originals != null)
          toUnify.addFirst$1(A._setArrayType([A.CompoundSelector$(originals)], type$.JSArray_ComplexSelectorComponent));
        complexes = A.unifyComplex(toUnify);
        if (complexes == null)
          return null;
      }
      _box_0.lineBreak = false;
      for (t1 = J.get$iterator$ax(path), t2 = this.mediaQueryContext; t1.moveNext$0();) {
        t3 = t1.get$current(t1);
        t3.assertCompatibleMediaContext$1(t2);
        _box_0.lineBreak = _box_0.lineBreak || t3.selector.lineBreak;
      }
      t1 = J.map$1$1$ax(complexes, new A.ExtensionStore__extendCompound__closure0(_box_0), type$.ComplexSelector);
      return A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
    },
    $signature: 406
  };
  A.ExtensionStore__extendCompound__closure.prototype = {
    call$1(extender) {
      return type$.CompoundSelector._as(B.JSArray_methods.get$last(extender.selector.components)).components;
    },
    $signature: 410
  };
  A.ExtensionStore__extendCompound__closure0.prototype = {
    call$1(components) {
      return A.ComplexSelector$(components, this._box_0.lineBreak);
    },
    $signature: 75
  };
  A.ExtensionStore__extendCompound_closure1.prototype = {
    call$1(l) {
      return l;
    },
    $signature: 420
  };
  A.ExtensionStore__extendCompound_closure2.prototype = {
    call$1(_) {
      return false;
    },
    $signature: 19
  };
  A.ExtensionStore__extendCompound_closure3.prototype = {
    call$1(complex) {
      var t1 = B.C_ListEquality.equals$2(0, complex.components, this.original.components);
      return t1;
    },
    $signature: 19
  };
  A.ExtensionStore__extendSimple_withoutPseudo.prototype = {
    call$1(simple) {
      var t1, t2, _this = this,
        extensionsForSimple = _this.extensions.$index(0, simple);
      if (extensionsForSimple == null)
        return null;
      t1 = _this.targetsUsed;
      if (t1 != null)
        t1.add$1(0, simple);
      t1 = A._setArrayType([], type$.JSArray_Extender);
      t2 = _this.$this;
      if (t2._mode !== B.ExtendMode_replace)
        t1.push(t2._extenderForSimple$2(simple, _this.simpleSpan));
      for (t2 = extensionsForSimple.get$values(extensionsForSimple), t2 = t2.get$iterator(t2); t2.moveNext$0();)
        t1.push(t2.get$current(t2).extender);
      return t1;
    },
    $signature: 433
  };
  A.ExtensionStore__extendSimple_closure.prototype = {
    call$1(pseudo) {
      var t1 = this.withoutPseudo.call$1(pseudo);
      return t1 == null ? A._setArrayType([this.$this._extenderForSimple$2(pseudo, this.simpleSpan)], type$.JSArray_Extender) : t1;
    },
    $signature: 440
  };
  A.ExtensionStore__extendSimple_closure0.prototype = {
    call$1(result) {
      return A._setArrayType([result], type$.JSArray_List_Extender);
    },
    $signature: 444
  };
  A.ExtensionStore__extendPseudo_closure.prototype = {
    call$1(complex) {
      return complex.components.length > 1;
    },
    $signature: 19
  };
  A.ExtensionStore__extendPseudo_closure0.prototype = {
    call$1(complex) {
      return complex.components.length === 1;
    },
    $signature: 19
  };
  A.ExtensionStore__extendPseudo_closure1.prototype = {
    call$1(complex) {
      return complex.components.length <= 1;
    },
    $signature: 19
  };
  A.ExtensionStore__extendPseudo_closure2.prototype = {
    call$1(complex) {
      var innerPseudo, innerSelector,
        t1 = complex.components;
      if (t1.length !== 1)
        return A._setArrayType([complex], type$.JSArray_ComplexSelector);
      if (!(B.JSArray_methods.get$first(t1) instanceof A.CompoundSelector))
        return A._setArrayType([complex], type$.JSArray_ComplexSelector);
      t1 = type$.CompoundSelector._as(B.JSArray_methods.get$first(t1)).components;
      if (t1.length !== 1)
        return A._setArrayType([complex], type$.JSArray_ComplexSelector);
      if (!(B.JSArray_methods.get$first(t1) instanceof A.PseudoSelector))
        return A._setArrayType([complex], type$.JSArray_ComplexSelector);
      innerPseudo = type$.PseudoSelector._as(B.JSArray_methods.get$first(t1));
      innerSelector = innerPseudo.selector;
      if (innerSelector == null)
        return A._setArrayType([complex], type$.JSArray_ComplexSelector);
      t1 = this.pseudo;
      switch (t1.normalizedName) {
        case "not":
          if (!B.Set_YEQji._map.containsKey$1(innerPseudo.normalizedName))
            return A._setArrayType([], type$.JSArray_ComplexSelector);
          return innerSelector.components;
        case "is":
        case "matches":
        case "where":
        case "any":
        case "current":
        case "nth-child":
        case "nth-last-child":
          if (innerPseudo.name !== t1.name)
            return A._setArrayType([], type$.JSArray_ComplexSelector);
          if (innerPseudo.argument != t1.argument)
            return A._setArrayType([], type$.JSArray_ComplexSelector);
          return innerSelector.components;
        case "has":
        case "host":
        case "host-context":
        case "slotted":
          return A._setArrayType([complex], type$.JSArray_ComplexSelector);
        default:
          return A._setArrayType([], type$.JSArray_ComplexSelector);
      }
    },
    $signature: 445
  };
  A.ExtensionStore__extendPseudo_closure3.prototype = {
    call$1(complex) {
      var t1 = this.pseudo;
      return A.PseudoSelector$(t1.name, t1.argument, !t1.isClass, A.SelectorList$(A._setArrayType([complex], type$.JSArray_ComplexSelector)));
    },
    $signature: 456
  };
  A.ExtensionStore__trim_closure.prototype = {
    call$1(complex2) {
      return complex2.get$minSpecificity() >= this._box_0.maxSpecificity && A.complexIsSuperselector(complex2.components, this.complex1.components);
    },
    $signature: 19
  };
  A.ExtensionStore__trim_closure0.prototype = {
    call$1(complex2) {
      return complex2.get$minSpecificity() >= this._box_0.maxSpecificity && A.complexIsSuperselector(complex2.components, this.complex1.components);
    },
    $signature: 19
  };
  A.ExtensionStore_clone_closure.prototype = {
    call$2(simple, selectors) {
      var t2, t3, t4, t5, t6, newSelector, mediaContext, _this = this,
        t1 = type$.ModifiableCssValue_SelectorList,
        newSelectorSet = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      _this.newSelectors.$indexSet(0, simple, newSelectorSet);
      for (t2 = selectors.get$iterator(selectors), t3 = _this.oldToNewSelectors, t4 = _this.$this._mediaContexts, t5 = _this.newMediaContexts; t2.moveNext$0();) {
        t6 = t2.get$current(t2);
        newSelector = new A.ModifiableCssValue(t6.value, t6.span, t1);
        newSelectorSet.add$1(0, newSelector);
        t3.$indexSet(0, t6, newSelector);
        mediaContext = t4.$index(0, t6);
        if (mediaContext != null)
          t5.$indexSet(0, newSelector, mediaContext);
      }
    },
    $signature: 461
  };
  A.unifyComplex_closure.prototype = {
    call$1(complex) {
      var t1 = J.getInterceptor$asx(complex);
      return t1.sublist$2(complex, 0, t1.get$length(complex) - 1);
    },
    $signature: 133
  };
  A._weaveParents_closure.prototype = {
    call$2(group1, group2) {
      var unified, t1, _null = null;
      if (B.C_ListEquality.equals$2(0, group1, group2))
        return group1;
      if (!(J.get$first$ax(group1) instanceof A.CompoundSelector) || !(J.get$first$ax(group2) instanceof A.CompoundSelector))
        return _null;
      if (A.complexIsParentSuperselector(group1, group2))
        return group2;
      if (A.complexIsParentSuperselector(group2, group1))
        return group1;
      if (!A._mustUnify(group1, group2))
        return _null;
      unified = A.unifyComplex(A._setArrayType([group1, group2], type$.JSArray_List_ComplexSelectorComponent));
      if (unified == null)
        return _null;
      t1 = J.getInterceptor$asx(unified);
      if (t1.get$length(unified) > 1)
        return _null;
      return t1.get$first(unified);
    },
    $signature: 478
  };
  A._weaveParents_closure0.prototype = {
    call$1(sequence) {
      return A.complexIsParentSuperselector(sequence.get$first(sequence), this.group);
    },
    $signature: 480
  };
  A._weaveParents_closure1.prototype = {
    call$1(chunk) {
      return J.expand$1$1$ax(chunk, new A._weaveParents__closure1(), type$.ComplexSelectorComponent);
    },
    $signature: 198
  };
  A._weaveParents__closure1.prototype = {
    call$1(group) {
      return group;
    },
    $signature: 133
  };
  A._weaveParents_closure2.prototype = {
    call$1(sequence) {
      return sequence.get$length(sequence) === 0;
    },
    $signature: 197
  };
  A._weaveParents_closure3.prototype = {
    call$1(chunk) {
      return J.expand$1$1$ax(chunk, new A._weaveParents__closure0(), type$.ComplexSelectorComponent);
    },
    $signature: 198
  };
  A._weaveParents__closure0.prototype = {
    call$1(group) {
      return group;
    },
    $signature: 133
  };
  A._weaveParents_closure4.prototype = {
    call$1(choice) {
      return J.get$isNotEmpty$asx(choice);
    },
    $signature: 503
  };
  A._weaveParents_closure5.prototype = {
    call$1(path) {
      var t1 = J.expand$1$1$ax(path, new A._weaveParents__closure(), type$.ComplexSelectorComponent);
      return A.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E"));
    },
    $signature: 504
  };
  A._weaveParents__closure.prototype = {
    call$1(group) {
      return group;
    },
    $signature: 505
  };
  A._mustUnify_closure.prototype = {
    call$1(component) {
      return component instanceof A.CompoundSelector && B.JSArray_methods.any$1(component.components, new A._mustUnify__closure(this.uniqueSelectors));
    },
    $signature: 137
  };
  A._mustUnify__closure.prototype = {
    call$1(simple) {
      var t1;
      if (!(simple instanceof A.IDSelector))
        t1 = simple instanceof A.PseudoSelector && !simple.isClass;
      else
        t1 = true;
      return t1 && this.uniqueSelectors.contains$1(0, simple);
    },
    $signature: 16
  };
  A.paths_closure.prototype = {
    call$2(paths, choice) {
      var t1 = this.T;
      t1 = J.expand$1$1$ax(choice, new A.paths__closure(paths, t1), t1._eval$1("List<0>"));
      return A.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E"));
    },
    $signature() {
      return this.T._eval$1("List<List<0>>(List<List<0>>,List<0>)");
    }
  };
  A.paths__closure.prototype = {
    call$1(option) {
      var t1 = this.T;
      return J.map$1$1$ax(this.paths, new A.paths___closure(option, t1), t1._eval$1("List<0>"));
    },
    $signature() {
      return this.T._eval$1("Iterable<List<0>>(0)");
    }
  };
  A.paths___closure.prototype = {
    call$1(path) {
      var t1 = A.List_List$of(path, true, this.T);
      t1.push(this.option);
      return t1;
    },
    $signature() {
      return this.T._eval$1("List<0>(List<0>)");
    }
  };
  A._hasRoot_closure.prototype = {
    call$1(simple) {
      return simple instanceof A.PseudoSelector && simple.isClass && simple.normalizedName === "root";
    },
    $signature: 16
  };
  A.listIsSuperselector_closure.prototype = {
    call$1(complex1) {
      return B.JSArray_methods.any$1(this.list1, new A.listIsSuperselector__closure(complex1));
    },
    $signature: 19
  };
  A.listIsSuperselector__closure.prototype = {
    call$1(complex2) {
      return A.complexIsSuperselector(complex2.components, this.complex1.components);
    },
    $signature: 19
  };
  A._simpleIsSuperselectorOfCompound_closure.prototype = {
    call$1(theirSimple) {
      var selector,
        t1 = this.simple;
      if (t1.$eq(0, theirSimple))
        return true;
      if (!(theirSimple instanceof A.PseudoSelector))
        return false;
      selector = theirSimple.selector;
      if (selector == null)
        return false;
      if (!$._subselectorPseudos.contains$1(0, theirSimple.normalizedName))
        return false;
      return B.JSArray_methods.every$1(selector.components, new A._simpleIsSuperselectorOfCompound__closure(t1));
    },
    $signature: 16
  };
  A._simpleIsSuperselectorOfCompound__closure.prototype = {
    call$1(complex) {
      var t1 = complex.components;
      if (t1.length !== 1)
        return false;
      return B.JSArray_methods.contains$1(type$.CompoundSelector._as(B.JSArray_methods.get$single(t1)).components, this.simple);
    },
    $signature: 19
  };
  A._selectorPseudoIsSuperselector_closure.prototype = {
    call$1(selector2) {
      return A.listIsSuperselector(this.selector1.components, selector2.components);
    },
    $signature: 78
  };
  A._selectorPseudoIsSuperselector_closure0.prototype = {
    call$1(complex1) {
      var t1 = complex1.components,
        t2 = A._setArrayType([], type$.JSArray_ComplexSelectorComponent),
        t3 = this.parents;
      if (t3 != null)
        B.JSArray_methods.addAll$1(t2, t3);
      t2.push(this.compound2);
      return A.complexIsSuperselector(t1, t2);
    },
    $signature: 19
  };
  A._selectorPseudoIsSuperselector_closure1.prototype = {
    call$1(selector2) {
      return A.listIsSuperselector(this.selector1.components, selector2.components);
    },
    $signature: 78
  };
  A._selectorPseudoIsSuperselector_closure2.prototype = {
    call$1(selector2) {
      return A.listIsSuperselector(this.selector1.components, selector2.components);
    },
    $signature: 78
  };
  A._selectorPseudoIsSuperselector_closure3.prototype = {
    call$1(complex) {
      return B.JSArray_methods.any$1(this.compound2.components, new A._selectorPseudoIsSuperselector__closure(complex, this.pseudo1));
    },
    $signature: 19
  };
  A._selectorPseudoIsSuperselector__closure.prototype = {
    call$1(simple2) {
      var compound1, selector2, _this = this;
      if (simple2 instanceof A.TypeSelector) {
        compound1 = B.JSArray_methods.get$last(_this.complex.components);
        return compound1 instanceof A.CompoundSelector && B.JSArray_methods.any$1(compound1.components, new A._selectorPseudoIsSuperselector___closure(simple2));
      } else if (simple2 instanceof A.IDSelector) {
        compound1 = B.JSArray_methods.get$last(_this.complex.components);
        return compound1 instanceof A.CompoundSelector && B.JSArray_methods.any$1(compound1.components, new A._selectorPseudoIsSuperselector___closure0(simple2));
      } else if (simple2 instanceof A.PseudoSelector && simple2.name === _this.pseudo1.name) {
        selector2 = simple2.selector;
        if (selector2 == null)
          return false;
        return A.listIsSuperselector(selector2.components, A._setArrayType([_this.complex], type$.JSArray_ComplexSelector));
      } else
        return false;
    },
    $signature: 16
  };
  A._selectorPseudoIsSuperselector___closure.prototype = {
    call$1(simple1) {
      var t1;
      if (simple1 instanceof A.TypeSelector) {
        t1 = this.simple2.name.$eq(0, simple1.name);
        t1 = !t1;
      } else
        t1 = false;
      return t1;
    },
    $signature: 16
  };
  A._selectorPseudoIsSuperselector___closure0.prototype = {
    call$1(simple1) {
      var t1;
      if (simple1 instanceof A.IDSelector) {
        t1 = simple1.name;
        t1 = this.simple2.name !== t1;
      } else
        t1 = false;
      return t1;
    },
    $signature: 16
  };
  A._selectorPseudoIsSuperselector_closure4.prototype = {
    call$1(selector2) {
      var t1 = B.C_ListEquality.equals$2(0, this.selector1.components, selector2.components);
      return t1;
    },
    $signature: 78
  };
  A._selectorPseudoIsSuperselector_closure5.prototype = {
    call$1(pseudo2) {
      var t1, selector2;
      if (!(pseudo2 instanceof A.PseudoSelector))
        return false;
      t1 = this.pseudo1;
      if (pseudo2.name !== t1.name)
        return false;
      if (pseudo2.argument != t1.argument)
        return false;
      selector2 = pseudo2.selector;
      if (selector2 == null)
        return false;
      return A.listIsSuperselector(this.selector1.components, selector2.components);
    },
    $signature: 16
  };
  A._selectorPseudoArgs_closure.prototype = {
    call$1(pseudo) {
      return pseudo.isClass === this.isClass && pseudo.name === this.name;
    },
    $signature: 509
  };
  A._selectorPseudoArgs_closure0.prototype = {
    call$1(pseudo) {
      return pseudo.selector;
    },
    $signature: 512
  };
  A.MergedExtension.prototype = {
    unmerge$0() {
      var $async$self = this;
      return A._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, right, left;
        return function $async$unmerge$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                left = $async$self.left;
                $async$goto = left instanceof A.MergedExtension ? 2 : 4;
                break;
              case 2:
                // then
                $async$goto = 5;
                return A._IterationMarker_yieldStar(left.unmerge$0());
              case 5:
                // after yield
                // goto join
                $async$goto = 3;
                break;
              case 4:
                // else
                $async$goto = 6;
                return left;
              case 6:
                // after yield
              case 3:
                // join
                right = $async$self.right;
                $async$goto = right instanceof A.MergedExtension ? 7 : 9;
                break;
              case 7:
                // then
                $async$goto = 10;
                return A._IterationMarker_yieldStar(right.unmerge$0());
              case 10:
                // after yield
                // goto join
                $async$goto = 8;
                break;
              case 9:
                // else
                $async$goto = 11;
                return right;
              case 11:
                // after yield
              case 8:
                // join
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, type$.Extension);
    }
  };
  A.ExtendMode.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.globalFunctions_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return t1.$index($arguments, 0).get$isTruthy() ? t1.$index($arguments, 1) : t1.$index($arguments, 2);
    },
    $signature: 4
  };
  A.global_closure.prototype = {
    call$1($arguments) {
      return A._rgb("rgb", $arguments);
    },
    $signature: 4
  };
  A.global_closure0.prototype = {
    call$1($arguments) {
      return A._rgb("rgb", $arguments);
    },
    $signature: 4
  };
  A.global_closure1.prototype = {
    call$1($arguments) {
      return A._rgbTwoArg("rgb", $arguments);
    },
    $signature: 4
  };
  A.global_closure2.prototype = {
    call$1($arguments) {
      var parsed = A._parseChannels("rgb", A._setArrayType(["$red", "$green", "$blue"], type$.JSArray_String), J.get$first$ax($arguments));
      return parsed instanceof A.SassString ? parsed : A._rgb("rgb", type$.List_Value._as(parsed));
    },
    $signature: 4
  };
  A.global_closure3.prototype = {
    call$1($arguments) {
      return A._rgb("rgba", $arguments);
    },
    $signature: 4
  };
  A.global_closure4.prototype = {
    call$1($arguments) {
      return A._rgb("rgba", $arguments);
    },
    $signature: 4
  };
  A.global_closure5.prototype = {
    call$1($arguments) {
      return A._rgbTwoArg("rgba", $arguments);
    },
    $signature: 4
  };
  A.global_closure6.prototype = {
    call$1($arguments) {
      var parsed = A._parseChannels("rgba", A._setArrayType(["$red", "$green", "$blue"], type$.JSArray_String), J.get$first$ax($arguments));
      return parsed instanceof A.SassString ? parsed : A._rgb("rgba", type$.List_Value._as(parsed));
    },
    $signature: 4
  };
  A.global_closure7.prototype = {
    call$1($arguments) {
      var color, t2,
        t1 = J.getInterceptor$asx($arguments),
        weight = t1.$index($arguments, 1).assertNumber$1("weight");
      if (t1.$index($arguments, 0) instanceof A.SassNumber) {
        if (weight._number$_value !== 100 || !weight.hasUnit$1("%"))
          throw A.wrapException(string$.Only_oa);
        return A._functionString("invert", t1.take$1($arguments, 1));
      }
      color = t1.$index($arguments, 0).assertColor$1("color");
      t1 = color.get$red(color);
      t2 = color.get$green(color);
      return A._mixColors(color.changeRgb$3$blue$green$red(255 - color.get$blue(color), 255 - t2, 255 - t1), color, weight);
    },
    $signature: 4
  };
  A.global_closure8.prototype = {
    call$1($arguments) {
      return A._hsl("hsl", $arguments);
    },
    $signature: 4
  };
  A.global_closure9.prototype = {
    call$1($arguments) {
      return A._hsl("hsl", $arguments);
    },
    $signature: 4
  };
  A.global_closure10.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0).get$isVar() || t1.$index($arguments, 1).get$isVar())
        return A._functionString("hsl", $arguments);
      else
        throw A.wrapException(A.SassScriptException$("Missing argument $lightness."));
    },
    $signature: 14
  };
  A.global_closure11.prototype = {
    call$1($arguments) {
      var parsed = A._parseChannels("hsl", A._setArrayType(["$hue", "$saturation", "$lightness"], type$.JSArray_String), J.get$first$ax($arguments));
      return parsed instanceof A.SassString ? parsed : A._hsl("hsl", type$.List_Value._as(parsed));
    },
    $signature: 4
  };
  A.global_closure12.prototype = {
    call$1($arguments) {
      return A._hsl("hsla", $arguments);
    },
    $signature: 4
  };
  A.global_closure13.prototype = {
    call$1($arguments) {
      return A._hsl("hsla", $arguments);
    },
    $signature: 4
  };
  A.global_closure14.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0).get$isVar() || t1.$index($arguments, 1).get$isVar())
        return A._functionString("hsla", $arguments);
      else
        throw A.wrapException(A.SassScriptException$("Missing argument $lightness."));
    },
    $signature: 14
  };
  A.global_closure15.prototype = {
    call$1($arguments) {
      var parsed = A._parseChannels("hsla", A._setArrayType(["$hue", "$saturation", "$lightness"], type$.JSArray_String), J.get$first$ax($arguments));
      return parsed instanceof A.SassString ? parsed : A._hsl("hsla", type$.List_Value._as(parsed));
    },
    $signature: 4
  };
  A.global_closure16.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof A.SassNumber)
        return A._functionString("grayscale", $arguments);
      return t1.$index($arguments, 0).assertColor$1("color").changeHsl$1$saturation(0);
    },
    $signature: 4
  };
  A.global_closure17.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        degrees = t1.$index($arguments, 1).assertNumber$1("degrees");
      A._checkAngle(degrees, null);
      return color.changeHsl$1$hue(color.get$hue(color) + degrees._number$_value);
    },
    $signature: 24
  };
  A.global_closure18.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        amount = t1.$index($arguments, 1).assertNumber$1("amount");
      return color.changeHsl$1$lightness(B.JSNumber_methods.clamp$2(color.get$lightness(color) + amount.valueInRange$3(0, 100, "amount"), 0, 100));
    },
    $signature: 24
  };
  A.global_closure19.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        amount = t1.$index($arguments, 1).assertNumber$1("amount");
      return color.changeHsl$1$lightness(B.JSNumber_methods.clamp$2(color.get$lightness(color) - amount.valueInRange$3(0, 100, "amount"), 0, 100));
    },
    $signature: 24
  };
  A.global_closure20.prototype = {
    call$1($arguments) {
      return new A.SassString("saturate(" + A.serializeValue(J.$index$asx($arguments, 0).assertNumber$1("amount"), false, true) + ")", false);
    },
    $signature: 14
  };
  A.global_closure21.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        amount = t1.$index($arguments, 1).assertNumber$1("amount");
      return color.changeHsl$1$saturation(B.JSNumber_methods.clamp$2(color.get$saturation(color) + amount.valueInRange$3(0, 100, "amount"), 0, 100));
    },
    $signature: 24
  };
  A.global_closure22.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        amount = t1.$index($arguments, 1).assertNumber$1("amount");
      return color.changeHsl$1$saturation(B.JSNumber_methods.clamp$2(color.get$saturation(color) - amount.valueInRange$3(0, 100, "amount"), 0, 100));
    },
    $signature: 24
  };
  A.global_closure23.prototype = {
    call$1($arguments) {
      var color,
        argument = J.$index$asx($arguments, 0);
      if (argument instanceof A.SassString && !argument._hasQuotes && B.JSString_methods.contains$1(argument._string$_text, $.$get$_microsoftFilterStart()))
        return A._functionString("alpha", $arguments);
      color = argument.assertColor$1("color");
      return new A.UnitlessSassNumber(color._alpha, null);
    },
    $signature: 4
  };
  A.global_closure24.prototype = {
    call$1($arguments) {
      var t1,
        argList = J.$index$asx($arguments, 0).get$asList();
      if (argList.length !== 0 && B.JSArray_methods.every$1(argList, new A.global__closure()))
        return A._functionString("alpha", $arguments);
      t1 = argList.length;
      if (t1 === 0)
        throw A.wrapException(A.SassScriptException$("Missing argument $color."));
      else
        throw A.wrapException(A.SassScriptException$("Only 1 argument allowed, but " + t1 + " were passed."));
    },
    $signature: 14
  };
  A.global__closure.prototype = {
    call$1(argument) {
      return argument instanceof A.SassString && !argument._hasQuotes && B.JSString_methods.contains$1(argument._string$_text, $.$get$_microsoftFilterStart());
    },
    $signature: 62
  };
  A.global_closure25.prototype = {
    call$1($arguments) {
      var color,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof A.SassNumber)
        return A._functionString("opacity", $arguments);
      color = t1.$index($arguments, 0).assertColor$1("color");
      return new A.UnitlessSassNumber(color._alpha, null);
    },
    $signature: 4
  };
  A.module_closure.prototype = {
    call$1($arguments) {
      var result, t2, color,
        t1 = J.getInterceptor$asx($arguments),
        weight = t1.$index($arguments, 1).assertNumber$1("weight");
      if (t1.$index($arguments, 0) instanceof A.SassNumber) {
        if (weight._number$_value !== 100 || !weight.hasUnit$1("%"))
          throw A.wrapException(string$.Only_oa);
        result = A._functionString("invert", t1.take$1($arguments, 1));
        t1 = A.S(t1.$index($arguments, 0));
        t2 = result.toString$0(0);
        A.EvaluationContext_current().warn$2$deprecation(0, "Passing a number (" + t1 + string$.x29x20to_ci + t2, true);
        return result;
      }
      color = t1.$index($arguments, 0).assertColor$1("color");
      t1 = color.get$red(color);
      t2 = color.get$green(color);
      return A._mixColors(color.changeRgb$3$blue$green$red(255 - color.get$blue(color), 255 - t2, 255 - t1), color, weight);
    },
    $signature: 4
  };
  A.module_closure0.prototype = {
    call$1($arguments) {
      var result, t2,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof A.SassNumber) {
        result = A._functionString("grayscale", t1.take$1($arguments, 1));
        t1 = A.S(t1.$index($arguments, 0));
        t2 = result.toString$0(0);
        A.EvaluationContext_current().warn$2$deprecation(0, "Passing a number (" + t1 + string$.x29x20to_cg + t2, true);
        return result;
      }
      return t1.$index($arguments, 0).assertColor$1("color").changeHsl$1$saturation(0);
    },
    $signature: 4
  };
  A.module_closure1.prototype = {
    call$1($arguments) {
      return A._hwb($arguments);
    },
    $signature: 4
  };
  A.module_closure2.prototype = {
    call$1($arguments) {
      var parsed = A._parseChannels("hwb", A._setArrayType(["$hue", "$whiteness", "$blackness"], type$.JSArray_String), J.get$first$ax($arguments));
      if (parsed instanceof A.SassString)
        throw A.wrapException(A.SassScriptException$('Expected numeric channels, got "' + parsed.toString$0(0) + '".'));
      else
        return A._hwb(type$.List_Value._as(parsed));
    },
    $signature: 4
  };
  A.module_closure3.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color");
      t1 = t1.get$whiteness(t1);
      return new A.SingleUnitSassNumber("%", t1, null);
    },
    $signature: 9
  };
  A.module_closure4.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color");
      t1 = t1.get$blackness(t1);
      return new A.SingleUnitSassNumber("%", t1, null);
    },
    $signature: 9
  };
  A.module_closure5.prototype = {
    call$1($arguments) {
      var result, t1, color,
        argument = J.$index$asx($arguments, 0);
      if (argument instanceof A.SassString && !argument._hasQuotes && B.JSString_methods.contains$1(argument._string$_text, $.$get$_microsoftFilterStart())) {
        result = A._functionString("alpha", $arguments);
        t1 = result.toString$0(0);
        A.EvaluationContext_current().warn$2$deprecation(0, string$.Using_c + t1, true);
        return result;
      }
      color = argument.assertColor$1("color");
      return new A.UnitlessSassNumber(color._alpha, null);
    },
    $signature: 4
  };
  A.module_closure6.prototype = {
    call$1($arguments) {
      var result,
        t1 = J.getInterceptor$asx($arguments);
      if (B.JSArray_methods.every$1(t1.$index($arguments, 0).get$asList(), new A.module__closure())) {
        result = A._functionString("alpha", $arguments);
        t1 = result.toString$0(0);
        A.EvaluationContext_current().warn$2$deprecation(0, string$.Using_c + t1, true);
        return result;
      }
      throw A.wrapException(A.SassScriptException$("Only 1 argument allowed, but " + t1.get$length($arguments) + " were passed."));
    },
    $signature: 14
  };
  A.module__closure.prototype = {
    call$1(argument) {
      return argument instanceof A.SassString && !argument._hasQuotes && B.JSString_methods.contains$1(argument._string$_text, $.$get$_microsoftFilterStart());
    },
    $signature: 62
  };
  A.module_closure7.prototype = {
    call$1($arguments) {
      var result, t2, color,
        t1 = J.getInterceptor$asx($arguments);
      if (t1.$index($arguments, 0) instanceof A.SassNumber) {
        result = A._functionString("opacity", $arguments);
        t1 = A.S(t1.$index($arguments, 0));
        t2 = result.toString$0(0);
        A.EvaluationContext_current().warn$2$deprecation(0, "Passing a number (" + t1 + string$.x20to_co + t2, true);
        return result;
      }
      color = t1.$index($arguments, 0).assertColor$1("color");
      return new A.UnitlessSassNumber(color._alpha, null);
    },
    $signature: 4
  };
  A._red_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color");
      t1 = t1.get$red(t1);
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 9
  };
  A._green_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color");
      t1 = t1.get$green(t1);
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 9
  };
  A._blue_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color");
      t1 = t1.get$blue(t1);
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 9
  };
  A._mix_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return A._mixColors(t1.$index($arguments, 0).assertColor$1("color1"), t1.$index($arguments, 1).assertColor$1("color2"), t1.$index($arguments, 2).assertNumber$1("weight"));
    },
    $signature: 24
  };
  A._hue_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color");
      t1 = t1.get$hue(t1);
      return new A.SingleUnitSassNumber("deg", t1, null);
    },
    $signature: 9
  };
  A._saturation_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color");
      t1 = t1.get$saturation(t1);
      return new A.SingleUnitSassNumber("%", t1, null);
    },
    $signature: 9
  };
  A._lightness_closure.prototype = {
    call$1($arguments) {
      var t1 = J.get$first$ax($arguments).assertColor$1("color");
      t1 = t1.get$lightness(t1);
      return new A.SingleUnitSassNumber("%", t1, null);
    },
    $signature: 9
  };
  A._complement_closure.prototype = {
    call$1($arguments) {
      var color = J.$index$asx($arguments, 0).assertColor$1("color");
      return color.changeHsl$1$hue(color.get$hue(color) + 180);
    },
    $signature: 24
  };
  A._adjust_closure.prototype = {
    call$1($arguments) {
      return A._updateComponents($arguments, true, false, false);
    },
    $signature: 24
  };
  A._scale_closure.prototype = {
    call$1($arguments) {
      return A._updateComponents($arguments, false, false, true);
    },
    $signature: 24
  };
  A._change_closure.prototype = {
    call$1($arguments) {
      return A._updateComponents($arguments, false, true, false);
    },
    $signature: 24
  };
  A._ieHexStr_closure.prototype = {
    call$1($arguments) {
      var color = J.$index$asx($arguments, 0).assertColor$1("color"),
        t1 = new A._ieHexStr_closure_hexString();
      return new A.SassString("#" + A.S(t1.call$1(A.fuzzyRound(color._alpha * 255))) + A.S(t1.call$1(color.get$red(color))) + A.S(t1.call$1(color.get$green(color))) + A.S(t1.call$1(color.get$blue(color))), false);
    },
    $signature: 14
  };
  A._ieHexStr_closure_hexString.prototype = {
    call$1(component) {
      return B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(component, 16), 2, "0").toUpperCase();
    },
    $signature: 196
  };
  A._updateComponents_getParam.prototype = {
    call$4$assertPercent$checkPercent($name, max, assertPercent, checkPercent) {
      var t2,
        t1 = this.keywords.remove$1(0, $name),
        number = t1 == null ? null : t1.assertNumber$1($name);
      if (number == null)
        return null;
      t1 = this.scale;
      t2 = !t1;
      if (t2 && checkPercent)
        A._checkPercent(number, $name);
      if (!t2 || assertPercent)
        number.assertUnit$2("%", $name);
      if (t1)
        max = 100;
      return number.valueInRange$3(this.change ? 0 : -max, max, $name);
    },
    call$2($name, max) {
      return this.call$4$assertPercent$checkPercent($name, max, false, false);
    },
    call$3$checkPercent($name, max, checkPercent) {
      return this.call$4$assertPercent$checkPercent($name, max, false, checkPercent);
    },
    call$3$assertPercent($name, max, assertPercent) {
      return this.call$4$assertPercent$checkPercent($name, max, assertPercent, false);
    },
    $signature: 195
  };
  A._updateComponents_closure.prototype = {
    call$1($name) {
      return "$" + $name;
    },
    $signature: 5
  };
  A._updateComponents_updateValue.prototype = {
    call$3(current, param, max) {
      var t1;
      if (param == null)
        return current;
      if (this.change)
        return param;
      if (this.adjust)
        return B.JSNumber_methods.clamp$2(current + param, 0, max);
      t1 = param > 0 ? max - current : current;
      return current + t1 * (param / 100);
    },
    $signature: 194
  };
  A._updateComponents_updateRgb.prototype = {
    call$2(current, param) {
      return A.fuzzyRound(this.updateValue.call$3(current, param, 255));
    },
    $signature: 188
  };
  A._functionString_closure.prototype = {
    call$1(argument) {
      return A.serializeValue(argument, false, true);
    },
    $signature: 261
  };
  A._removedColorFunction_closure.prototype = {
    call$1($arguments) {
      var t1 = this.name,
        t2 = J.getInterceptor$asx($arguments),
        t3 = A.S(t2.$index($arguments, 0)),
        t4 = this.negative ? "-" : "";
      throw A.wrapException(A.SassScriptException$("The function " + t1 + string$.x28__isn + t3 + ", $" + this.argument + ": " + t4 + A.S(t2.$index($arguments, 1)) + string$.x29x0a_Morx3a + t1));
    },
    $signature: 263
  };
  A._rgb_closure.prototype = {
    call$1(alpha) {
      return A._percentageOrUnitless(alpha.assertNumber$1("alpha"), 1, "alpha");
    },
    $signature: 140
  };
  A._hsl_closure.prototype = {
    call$1(alpha) {
      return A._percentageOrUnitless(alpha.assertNumber$1("alpha"), 1, "alpha");
    },
    $signature: 140
  };
  A._removeUnits_closure.prototype = {
    call$1(unit) {
      return " * 1" + unit;
    },
    $signature: 5
  };
  A._removeUnits_closure0.prototype = {
    call$1(unit) {
      return " / 1" + unit;
    },
    $signature: 5
  };
  A._hwb_closure.prototype = {
    call$1(alpha) {
      return A._percentageOrUnitless(alpha.assertNumber$1("alpha"), 1, "alpha");
    },
    $signature: 140
  };
  A._parseChannels_closure.prototype = {
    call$1(value) {
      return value.get$isVar();
    },
    $signature: 62
  };
  A._length_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).get$asList().length;
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 9
  };
  A._nth_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        index = t1.$index($arguments, 1);
      return list.get$asList()[list.sassIndexToListIndex$2(index, "n")];
    },
    $signature: 4
  };
  A._setNth_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        index = t1.$index($arguments, 1),
        value = t1.$index($arguments, 2),
        t2 = list.get$asList(),
        newList = A._setArrayType(t2.slice(0), A._arrayInstanceType(t2));
      newList[list.sassIndexToListIndex$2(index, "n")] = value;
      return t1.$index($arguments, 0).withListContents$1(newList);
    },
    $signature: 21
  };
  A._join_closure.prototype = {
    call$1($arguments) {
      var separator, bracketed,
        t1 = J.getInterceptor$asx($arguments),
        list1 = t1.$index($arguments, 0),
        list2 = t1.$index($arguments, 1),
        separatorParam = t1.$index($arguments, 2).assertString$1("separator"),
        bracketedParam = t1.$index($arguments, 3);
      t1 = separatorParam._string$_text;
      if (t1 === "auto")
        if (list1.get$separator(list1) !== B.ListSeparator_undecided_null)
          separator = list1.get$separator(list1);
        else
          separator = list2.get$separator(list2) !== B.ListSeparator_undecided_null ? list2.get$separator(list2) : B.ListSeparator_woc;
      else if (t1 === "space")
        separator = B.ListSeparator_woc;
      else if (t1 === "comma")
        separator = B.ListSeparator_kWM;
      else {
        if (t1 !== "slash")
          throw A.wrapException(A.SassScriptException$(string$.x24separ));
        separator = B.ListSeparator_1gm;
      }
      bracketed = bracketedParam instanceof A.SassString && bracketedParam._string$_text === "auto" ? list1.get$hasBrackets() : bracketedParam.get$isTruthy();
      t1 = A.List_List$of(list1.get$asList(), true, type$.Value);
      B.JSArray_methods.addAll$1(t1, list2.get$asList());
      return A.SassList$(t1, separator, bracketed);
    },
    $signature: 21
  };
  A._append_closure0.prototype = {
    call$1($arguments) {
      var separator,
        t1 = J.getInterceptor$asx($arguments),
        list = t1.$index($arguments, 0),
        value = t1.$index($arguments, 1);
      t1 = t1.$index($arguments, 2).assertString$1("separator")._string$_text;
      if (t1 === "auto")
        separator = list.get$separator(list) === B.ListSeparator_undecided_null ? B.ListSeparator_woc : list.get$separator(list);
      else if (t1 === "space")
        separator = B.ListSeparator_woc;
      else if (t1 === "comma")
        separator = B.ListSeparator_kWM;
      else {
        if (t1 !== "slash")
          throw A.wrapException(A.SassScriptException$(string$.x24separ));
        separator = B.ListSeparator_1gm;
      }
      t1 = A.List_List$of(list.get$asList(), true, type$.Value);
      t1.push(value);
      return list.withListContents$2$separator(t1, separator);
    },
    $signature: 21
  };
  A._zip_closure.prototype = {
    call$1($arguments) {
      var results, result, _box_0 = {},
        t1 = J.$index$asx($arguments, 0).get$asList(),
        t2 = A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,List<Value>>"),
        lists = A.List_List$of(new A.MappedListIterable(t1, new A._zip__closure(), t2), true, t2._eval$1("ListIterable.E"));
      if (lists.length === 0)
        return B.SassList_yfz;
      _box_0.i = 0;
      results = A._setArrayType([], type$.JSArray_SassList);
      for (t1 = A._arrayInstanceType(lists)._eval$1("MappedListIterable<1,Value>"), t2 = type$.Value; B.JSArray_methods.every$1(lists, new A._zip__closure0(_box_0));) {
        result = A.List_List$from(new A.MappedListIterable(lists, new A._zip__closure1(_box_0), t1), false, t2);
        result.fixed$length = Array;
        result.immutable$list = Array;
        results.push(new A.SassList(result, B.ListSeparator_woc, false));
        ++_box_0.i;
      }
      return A.SassList$(results, B.ListSeparator_kWM, false);
    },
    $signature: 21
  };
  A._zip__closure.prototype = {
    call$1(list) {
      return list.get$asList();
    },
    $signature: 282
  };
  A._zip__closure0.prototype = {
    call$1(list) {
      return this._box_0.i !== J.get$length$asx(list);
    },
    $signature: 285
  };
  A._zip__closure1.prototype = {
    call$1(list) {
      return J.$index$asx(list, this._box_0.i);
    },
    $signature: 4
  };
  A._index_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        index = B.JSArray_methods.indexOf$1(t1.$index($arguments, 0).get$asList(), t1.$index($arguments, 1));
      if (index === -1)
        t1 = B.C__SassNull;
      else
        t1 = new A.UnitlessSassNumber(index + 1, null);
      return t1;
    },
    $signature: 4
  };
  A._separator_closure.prototype = {
    call$1($arguments) {
      switch (J.get$separator$x(J.$index$asx($arguments, 0))) {
        case B.ListSeparator_kWM:
          return new A.SassString("comma", false);
        case B.ListSeparator_1gm:
          return new A.SassString("slash", false);
        default:
          return new A.SassString("space", false);
      }
    },
    $signature: 14
  };
  A._isBracketed_closure.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0).get$hasBrackets() ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 17
  };
  A._slash_closure.prototype = {
    call$1($arguments) {
      var list = J.$index$asx($arguments, 0).get$asList();
      if (list.length < 2)
        throw A.wrapException(A.SassScriptException$("At least two elements are required."));
      return A.SassList$(list, B.ListSeparator_1gm, false);
    },
    $signature: 21
  };
  A._get_closure.prototype = {
    call$1($arguments) {
      var t3, t4, value,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1("map"),
        t2 = A._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      B.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      for (t1 = A.SubListIterable$(t2, 0, A.checkNotNullable(t2.length - 1, "count", type$.int), type$.Value), t1 = new A.ListIterator(t1, t1.get$length(t1)), t3 = A._instanceType(t1)._precomputed1; t1.moveNext$0(); map = value) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        value = map._map$_contents.$index(0, t4);
        if (!(value instanceof A.SassMap))
          return B.C__SassNull;
      }
      t1 = map._map$_contents.$index(0, B.JSArray_methods.get$last(t2));
      return t1 == null ? B.C__SassNull : t1;
    },
    $signature: 4
  };
  A._set_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return A._modify(t1.$index($arguments, 0).assertMap$1("map"), A._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value), new A._set__closure0($arguments), true);
    },
    $signature: 4
  };
  A._set__closure0.prototype = {
    call$1(_) {
      return J.$index$asx(this.$arguments, 2);
    },
    $signature: 36
  };
  A._set_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1("map"),
        args = t1.$index($arguments, 1).get$asList();
      t1 = args.length;
      if (t1 === 0)
        throw A.wrapException(A.SassScriptException$("Expected $args to contain a key."));
      else if (t1 === 1)
        throw A.wrapException(A.SassScriptException$("Expected $args to contain a value."));
      return A._modify(map, B.JSArray_methods.sublist$2(args, 0, t1 - 1), new A._set__closure(args), true);
    },
    $signature: 4
  };
  A._set__closure.prototype = {
    call$1(_) {
      return B.JSArray_methods.get$last(this.args);
    },
    $signature: 36
  };
  A._merge_closure.prototype = {
    call$1($arguments) {
      var t2, t3, t4,
        t1 = J.getInterceptor$asx($arguments),
        map1 = t1.$index($arguments, 0).assertMap$1("map1"),
        map2 = t1.$index($arguments, 1).assertMap$1("map2");
      t1 = type$.Value;
      t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t3 = map1._map$_contents, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
        t4 = t3.get$current(t3);
        t2.$indexSet(0, t4.key, t4.value);
      }
      for (t3 = map2._map$_contents, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
        t4 = t3.get$current(t3);
        t2.$indexSet(0, t4.key, t4.value);
      }
      return new A.SassMap(A.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 37
  };
  A._merge_closure0.prototype = {
    call$1($arguments) {
      var map2,
        t1 = J.getInterceptor$asx($arguments),
        map1 = t1.$index($arguments, 0).assertMap$1("map1"),
        args = t1.$index($arguments, 1).get$asList();
      t1 = args.length;
      if (t1 === 0)
        throw A.wrapException(A.SassScriptException$("Expected $args to contain a key."));
      else if (t1 === 1)
        throw A.wrapException(A.SassScriptException$("Expected $args to contain a map."));
      map2 = B.JSArray_methods.get$last(args).assertMap$1("map2");
      return A._modify(map1, A.SubListIterable$(args, 0, A.checkNotNullable(args.length - 1, "count", type$.int), A._arrayInstanceType(args)._precomputed1), new A._merge__closure(map2), true);
    },
    $signature: 4
  };
  A._merge__closure.prototype = {
    call$1(oldValue) {
      var t1, t2, t3, t4,
        nestedMap = oldValue.tryMap$0();
      if (nestedMap == null)
        return this.map2;
      t1 = type$.Value;
      t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t3 = nestedMap._map$_contents, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
        t4 = t3.get$current(t3);
        t2.$indexSet(0, t4.key, t4.value);
      }
      for (t3 = this.map2._map$_contents, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
        t4 = t3.get$current(t3);
        t2.$indexSet(0, t4.key, t4.value);
      }
      return new A.SassMap(A.ConstantMap_ConstantMap$from(t2, t1, t1));
    },
    $signature: 291
  };
  A._deepMerge_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return A._deepMergeImpl(t1.$index($arguments, 0).assertMap$1("map1"), t1.$index($arguments, 1).assertMap$1("map2"));
    },
    $signature: 37
  };
  A._deepRemove_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1("map"),
        t2 = A._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      B.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      return A._modify(map, A.SubListIterable$(t2, 0, A.checkNotNullable(t2.length - 1, "count", type$.int), type$.Value), new A._deepRemove__closure(t2), false);
    },
    $signature: 4
  };
  A._deepRemove__closure.prototype = {
    call$1(value) {
      var t1, t2,
        nestedMap = value.tryMap$0();
      if (nestedMap != null && nestedMap._map$_contents.containsKey$1(B.JSArray_methods.get$last(this.keys))) {
        t1 = type$.Value;
        t2 = A.LinkedHashMap_LinkedHashMap$of(nestedMap._map$_contents, t1, t1);
        t2.remove$1(0, B.JSArray_methods.get$last(this.keys));
        return new A.SassMap(A.ConstantMap_ConstantMap$from(t2, t1, t1));
      }
      return value;
    },
    $signature: 36
  };
  A._remove_closure.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0).assertMap$1("map");
    },
    $signature: 37
  };
  A._remove_closure0.prototype = {
    call$1($arguments) {
      var mutableMap, t3, _i,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1("map"),
        t2 = A._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      B.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      t1 = type$.Value;
      mutableMap = A.LinkedHashMap_LinkedHashMap$of(map._map$_contents, t1, t1);
      for (t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i)
        mutableMap.remove$1(0, t2[_i]);
      return new A.SassMap(A.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
    },
    $signature: 37
  };
  A._keys_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertMap$1("map")._map$_contents;
      return A.SassList$(t1.get$keys(t1), B.ListSeparator_kWM, false);
    },
    $signature: 21
  };
  A._values_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertMap$1("map")._map$_contents;
      return A.SassList$(t1.get$values(t1), B.ListSeparator_kWM, false);
    },
    $signature: 21
  };
  A._hasKey_closure.prototype = {
    call$1($arguments) {
      var t3, t4, value,
        t1 = J.getInterceptor$asx($arguments),
        map = t1.$index($arguments, 0).assertMap$1("map"),
        t2 = A._setArrayType([t1.$index($arguments, 1)], type$.JSArray_Value);
      B.JSArray_methods.addAll$1(t2, t1.$index($arguments, 2).get$asList());
      for (t1 = A.SubListIterable$(t2, 0, A.checkNotNullable(t2.length - 1, "count", type$.int), type$.Value), t1 = new A.ListIterator(t1, t1.get$length(t1)), t3 = A._instanceType(t1)._precomputed1; t1.moveNext$0(); map = value) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        value = map._map$_contents.$index(0, t4);
        if (!(value instanceof A.SassMap))
          return B.SassBoolean_false;
      }
      return map._map$_contents.containsKey$1(B.JSArray_methods.get$last(t2)) ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 17
  };
  A._modify__modifyNestedMap.prototype = {
    call$1(map) {
      var nestedMap, _this = this,
        t1 = type$.Value,
        mutableMap = A.LinkedHashMap_LinkedHashMap$of(map._map$_contents, t1, t1),
        t2 = _this.keyIterator,
        key = t2.get$current(t2);
      if (!t2.moveNext$0()) {
        t2 = mutableMap.$index(0, key);
        if (t2 == null)
          t2 = B.C__SassNull;
        mutableMap.$indexSet(0, key, _this.modify.call$1(t2));
        return new A.SassMap(A.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
      }
      t2 = mutableMap.$index(0, key);
      nestedMap = t2 == null ? null : t2.tryMap$0();
      t2 = nestedMap == null;
      if (t2 && !_this.addNesting)
        return new A.SassMap(A.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
      mutableMap.$indexSet(0, key, _this.call$1(t2 ? B.SassMap_Map_empty : nestedMap));
      return new A.SassMap(A.ConstantMap_ConstantMap$from(mutableMap, t1, t1));
    },
    $signature: 292
  };
  A._deepMergeImpl_closure.prototype = {
    call$2(key, value) {
      var valueMap, merged,
        t1 = this.result,
        t2 = t1.$index(0, key),
        resultMap = t2 == null ? null : t2.tryMap$0();
      if (resultMap == null)
        t1.$indexSet(0, key, value);
      else {
        valueMap = value.tryMap$0();
        if (valueMap != null) {
          merged = A._deepMergeImpl(resultMap, valueMap);
          if (merged === resultMap)
            return;
          t1.$indexSet(0, key, merged);
        } else
          t1.$indexSet(0, key, value);
      }
    },
    $signature: 52
  };
  A._ceil_closure.prototype = {
    call$1(value) {
      return B.JSNumber_methods.ceil$0(value);
    },
    $signature: 42
  };
  A._clamp_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        min = t1.$index($arguments, 0).assertNumber$1("min"),
        number = t1.$index($arguments, 1).assertNumber$1("number"),
        max = t1.$index($arguments, 2).assertNumber$1("max");
      number.convertValueToMatch$3(min, "number", "min");
      max.convertValueToMatch$3(min, "max", "min");
      if (min.greaterThanOrEquals$1(max).value)
        return min;
      if (min.greaterThanOrEquals$1(number).value)
        return min;
      if (number.greaterThanOrEquals$1(max).value)
        return max;
      return number;
    },
    $signature: 9
  };
  A._floor_closure.prototype = {
    call$1(value) {
      return B.JSNumber_methods.floor$0(value);
    },
    $signature: 42
  };
  A._max_closure.prototype = {
    call$1($arguments) {
      var t1, t2, max, _i, number;
      for (t1 = J.$index$asx($arguments, 0).get$asList(), t2 = t1.length, max = null, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        number = t1[_i].assertNumber$0();
        if (max == null || max.lessThan$1(number).value)
          max = number;
      }
      if (max != null)
        return max;
      throw A.wrapException(A.SassScriptException$("At least one argument must be passed."));
    },
    $signature: 9
  };
  A._min_closure.prototype = {
    call$1($arguments) {
      var t1, t2, min, _i, number;
      for (t1 = J.$index$asx($arguments, 0).get$asList(), t2 = t1.length, min = null, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        number = t1[_i].assertNumber$0();
        if (min == null || min.greaterThan$1(number).value)
          min = number;
      }
      if (min != null)
        return min;
      throw A.wrapException(A.SassScriptException$("At least one argument must be passed."));
    },
    $signature: 9
  };
  A._abs_closure.prototype = {
    call$1(value) {
      return Math.abs(value);
    },
    $signature: 73
  };
  A._hypot_closure.prototype = {
    call$1($arguments) {
      var subtotal, i, i0, t3, t4,
        t1 = J.$index$asx($arguments, 0).get$asList(),
        t2 = A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,SassNumber>"),
        numbers = A.List_List$of(new A.MappedListIterable(t1, new A._hypot__closure(), t2), true, t2._eval$1("ListIterable.E"));
      t1 = numbers.length;
      if (t1 === 0)
        throw A.wrapException(A.SassScriptException$("At least one argument must be passed."));
      for (subtotal = 0, i = 0; i < t1; i = i0) {
        i0 = i + 1;
        subtotal += Math.pow(numbers[i].convertValueToMatch$3(numbers[0], "numbers[" + i0 + "]", "numbers[1]"), 2);
      }
      t1 = Math.sqrt(subtotal);
      t2 = numbers[0];
      t3 = J.getInterceptor$x(t2);
      t4 = t3.get$numeratorUnits(t2);
      return A.SassNumber_SassNumber$withUnits(t1, t3.get$denominatorUnits(t2), t4);
    },
    $signature: 9
  };
  A._hypot__closure.prototype = {
    call$1(argument) {
      return argument.assertNumber$0();
    },
    $signature: 302
  };
  A._log_closure.prototype = {
    call$1($arguments) {
      var numberValue, base, baseValue, t2,
        _s18_ = " to have no units.",
        t1 = J.getInterceptor$asx($arguments),
        number = t1.$index($arguments, 0).assertNumber$1("number");
      if (number.get$hasUnits())
        throw A.wrapException(A.SassScriptException$("$number: Expected " + number.toString$0(0) + _s18_));
      numberValue = A._fuzzyRoundIfZero(number._number$_value);
      if (J.$eq$(t1.$index($arguments, 1), B.C__SassNull)) {
        t1 = Math.log(numberValue);
        return new A.UnitlessSassNumber(t1, null);
      }
      base = t1.$index($arguments, 1).assertNumber$1("base");
      if (base.get$hasUnits())
        throw A.wrapException(A.SassScriptException$("$base: Expected " + base.toString$0(0) + _s18_));
      t1 = base._number$_value;
      baseValue = Math.abs(t1 - 1) < $.$get$epsilon() ? A.fuzzyRound(t1) : A._fuzzyRoundIfZero(t1);
      t1 = Math.log(numberValue);
      t2 = Math.log(baseValue);
      return new A.UnitlessSassNumber(t1 / t2, null);
    },
    $signature: 9
  };
  A._pow_closure.prototype = {
    call$1($arguments) {
      var baseValue, exponentValue, t2, intExponent, t3,
        _s18_ = " to have no units.",
        _null = null,
        t1 = J.getInterceptor$asx($arguments),
        base = t1.$index($arguments, 0).assertNumber$1("base"),
        exponent = t1.$index($arguments, 1).assertNumber$1("exponent");
      if (base.get$hasUnits())
        throw A.wrapException(A.SassScriptException$("$base: Expected " + base.toString$0(0) + _s18_));
      else if (exponent.get$hasUnits())
        throw A.wrapException(A.SassScriptException$("$exponent: Expected " + exponent.toString$0(0) + _s18_));
      baseValue = A._fuzzyRoundIfZero(base._number$_value);
      exponentValue = A._fuzzyRoundIfZero(exponent._number$_value);
      t1 = $.$get$epsilon();
      if (Math.abs(Math.abs(baseValue) - 1) < t1)
        t2 = exponentValue == 1 / 0 || exponentValue == -1 / 0;
      else
        t2 = false;
      if (t2)
        return new A.UnitlessSassNumber(0 / 0, _null);
      else {
        t2 = Math.abs(baseValue - 0);
        if (t2 < t1) {
          if (isFinite(exponentValue)) {
            intExponent = A.fuzzyIsInt(exponentValue) ? B.JSNumber_methods.round$0(exponentValue) : _null;
            if (intExponent != null && B.JSInt_methods.$mod(intExponent, 2) === 1)
              exponentValue = A.fuzzyRound(exponentValue);
          }
        } else {
          if (isFinite(baseValue))
            t3 = baseValue < 0 && !(t2 < t1) && isFinite(exponentValue) && A.fuzzyIsInt(exponentValue);
          else
            t3 = false;
          if (t3)
            exponentValue = A.fuzzyRound(exponentValue);
          else {
            if (baseValue == 1 / 0 || baseValue == -1 / 0)
              t1 = baseValue < 0 && !(t2 < t1) && isFinite(exponentValue);
            else
              t1 = false;
            if (t1) {
              intExponent = A.fuzzyIsInt(exponentValue) ? B.JSNumber_methods.round$0(exponentValue) : _null;
              if (intExponent != null && B.JSInt_methods.$mod(intExponent, 2) === 1)
                exponentValue = A.fuzzyRound(exponentValue);
            }
          }
        }
      }
      t1 = Math.pow(baseValue, exponentValue);
      return new A.UnitlessSassNumber(t1, _null);
    },
    $signature: 9
  };
  A._sqrt_closure.prototype = {
    call$1($arguments) {
      var t1,
        number = J.$index$asx($arguments, 0).assertNumber$1("number");
      if (number.get$hasUnits())
        throw A.wrapException(A.SassScriptException$("$number: Expected " + number.toString$0(0) + " to have no units."));
      t1 = Math.sqrt(A._fuzzyRoundIfZero(number._number$_value));
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 9
  };
  A._acos_closure.prototype = {
    call$1($arguments) {
      var numberValue,
        number = J.$index$asx($arguments, 0).assertNumber$1("number");
      if (number.get$hasUnits())
        throw A.wrapException(A.SassScriptException$("$number: Expected " + number.toString$0(0) + " to have no units."));
      numberValue = number._number$_value;
      if (Math.abs(Math.abs(numberValue) - 1) < $.$get$epsilon())
        numberValue = A.fuzzyRound(numberValue);
      return A.SassNumber_SassNumber$withUnits(Math.acos(numberValue) * 180 / 3.141592653589793, null, A._setArrayType(["deg"], type$.JSArray_String));
    },
    $signature: 9
  };
  A._asin_closure.prototype = {
    call$1($arguments) {
      var t1, numberValue,
        number = J.$index$asx($arguments, 0).assertNumber$1("number");
      if (number.get$hasUnits())
        throw A.wrapException(A.SassScriptException$("$number: Expected " + number.toString$0(0) + " to have no units."));
      t1 = number._number$_value;
      numberValue = Math.abs(Math.abs(t1) - 1) < $.$get$epsilon() ? A.fuzzyRound(t1) : A._fuzzyRoundIfZero(t1);
      return A.SassNumber_SassNumber$withUnits(Math.asin(numberValue) * 180 / 3.141592653589793, null, A._setArrayType(["deg"], type$.JSArray_String));
    },
    $signature: 9
  };
  A._atan_closure.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1("number");
      if (number.get$hasUnits())
        throw A.wrapException(A.SassScriptException$("$number: Expected " + number.toString$0(0) + " to have no units."));
      return A.SassNumber_SassNumber$withUnits(Math.atan(A._fuzzyRoundIfZero(number._number$_value)) * 180 / 3.141592653589793, null, A._setArrayType(["deg"], type$.JSArray_String));
    },
    $signature: 9
  };
  A._atan2_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        y = t1.$index($arguments, 0).assertNumber$1("y"),
        xValue = A._fuzzyRoundIfZero(t1.$index($arguments, 1).assertNumber$1("x").convertValueToMatch$3(y, "x", "y"));
      return A.SassNumber_SassNumber$withUnits(Math.atan2(A._fuzzyRoundIfZero(y._number$_value), xValue) * 180 / 3.141592653589793, null, A._setArrayType(["deg"], type$.JSArray_String));
    },
    $signature: 9
  };
  A._cos_closure.prototype = {
    call$1($arguments) {
      var t1 = Math.cos(J.$index$asx($arguments, 0).assertNumber$1("number").coerceValueToUnit$2("rad", "number"));
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 9
  };
  A._sin_closure.prototype = {
    call$1($arguments) {
      var t1 = Math.sin(A._fuzzyRoundIfZero(J.$index$asx($arguments, 0).assertNumber$1("number").coerceValueToUnit$2("rad", "number")));
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 9
  };
  A._tan_closure.prototype = {
    call$1($arguments) {
      var value = J.$index$asx($arguments, 0).assertNumber$1("number").coerceValueToUnit$2("rad", "number"),
        t1 = B.JSNumber_methods.$mod(value - 1.5707963267948966, 6.283185307179586),
        t2 = $.$get$epsilon();
      if (Math.abs(t1 - 0) < t2)
        return new A.UnitlessSassNumber(1 / 0, null);
      else if (Math.abs(B.JSNumber_methods.$mod(value + 1.5707963267948966, 6.283185307179586) - 0) < t2)
        return new A.UnitlessSassNumber(-1 / 0, null);
      else {
        t1 = Math.tan(A._fuzzyRoundIfZero(value));
        return new A.UnitlessSassNumber(t1, null);
      }
    },
    $signature: 9
  };
  A._compatible_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments);
      return t1.$index($arguments, 0).assertNumber$1("number1").isComparableTo$1(t1.$index($arguments, 1).assertNumber$1("number2")) ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 17
  };
  A._isUnitless_closure.prototype = {
    call$1($arguments) {
      return !J.$index$asx($arguments, 0).assertNumber$1("number").get$hasUnits() ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 17
  };
  A._unit_closure.prototype = {
    call$1($arguments) {
      return new A.SassString(J.$index$asx($arguments, 0).assertNumber$1("number").get$unitString(), true);
    },
    $signature: 14
  };
  A._percentage_closure.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1("number");
      number.assertNoUnits$1("number");
      return new A.SingleUnitSassNumber("%", number._number$_value * 100, null);
    },
    $signature: 9
  };
  A._randomFunction_closure.prototype = {
    call$1($arguments) {
      var limit,
        t1 = J.getInterceptor$asx($arguments);
      if (J.$eq$(t1.$index($arguments, 0), B.C__SassNull)) {
        t1 = $.$get$_random0().nextDouble$0();
        return new A.UnitlessSassNumber(t1, null);
      }
      limit = t1.$index($arguments, 0).assertNumber$1("limit").assertInt$1("limit");
      if (limit < 1)
        throw A.wrapException(A.SassScriptException$("$limit: Must be greater than 0, was " + limit + "."));
      t1 = $.$get$_random0().nextInt$1(limit);
      return new A.UnitlessSassNumber(t1 + 1, null);
    },
    $signature: 9
  };
  A._div_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        number1 = t1.$index($arguments, 0),
        number2 = t1.$index($arguments, 1);
      if (!(number1 instanceof A.SassNumber) || !(number2 instanceof A.SassNumber))
        A.EvaluationContext_current().warn$2$deprecation(0, string$.math_d, false);
      return number1.dividedBy$1(number2);
    },
    $signature: 4
  };
  A._numberFunction_closure.prototype = {
    call$1($arguments) {
      var number = J.$index$asx($arguments, 0).assertNumber$1("number"),
        t1 = this.transform.call$1(number._number$_value),
        t2 = number.get$numeratorUnits(number);
      return A.SassNumber_SassNumber$withUnits(t1, number.get$denominatorUnits(number), t2);
    },
    $signature: 9
  };
  A.global_closure26.prototype = {
    call$1($arguments) {
      return $._features.contains$1(0, J.$index$asx($arguments, 0).assertString$1("feature")._string$_text) ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 17
  };
  A.global_closure27.prototype = {
    call$1($arguments) {
      return new A.SassString(A.serializeValue(J.get$first$ax($arguments), true, true), false);
    },
    $signature: 14
  };
  A.global_closure28.prototype = {
    call$1($arguments) {
      var value = J.$index$asx($arguments, 0);
      if (value instanceof A.SassArgumentList)
        return new A.SassString("arglist", false);
      if (value instanceof A.SassBoolean)
        return new A.SassString("bool", false);
      if (value instanceof A.SassColor)
        return new A.SassString("color", false);
      if (value instanceof A.SassList)
        return new A.SassString("list", false);
      if (value instanceof A.SassMap)
        return new A.SassString("map", false);
      if (value.$eq(0, B.C__SassNull))
        return new A.SassString("null", false);
      if (value instanceof A.SassNumber)
        return new A.SassString("number", false);
      if (value instanceof A.SassFunction)
        return new A.SassString("function", false);
      if (value instanceof A.SassCalculation)
        return new A.SassString("calculation", false);
      return new A.SassString("string", false);
    },
    $signature: 14
  };
  A.global_closure29.prototype = {
    call$1($arguments) {
      var t1, t2, t3, t4,
        argumentList = J.$index$asx($arguments, 0);
      if (argumentList instanceof A.SassArgumentList) {
        t1 = type$.Value;
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        for (argumentList._wereKeywordsAccessed = true, t3 = argumentList._keywords, t3 = t3.get$entries(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
          t4 = t3.get$current(t3);
          t2.$indexSet(0, new A.SassString(t4.key, false), t4.value);
        }
        return new A.SassMap(A.ConstantMap_ConstantMap$from(t2, t1, t1));
      } else
        throw A.wrapException("$args: " + argumentList.toString$0(0) + " is not an argument list.");
    },
    $signature: 37
  };
  A.local_closure.prototype = {
    call$1($arguments) {
      return new A.SassString(J.$index$asx($arguments, 0).assertCalculation$1("calc").name, true);
    },
    $signature: 14
  };
  A.local_closure0.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertCalculation$1("calc").$arguments;
      return A.SassList$(new A.MappedListIterable(t1, new A.local__closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,Value>")), B.ListSeparator_kWM, false);
    },
    $signature: 21
  };
  A.local__closure.prototype = {
    call$1(argument) {
      if (argument instanceof A.Value)
        return argument;
      return new A.SassString(J.toString$0$(argument), false);
    },
    $signature: 303
  };
  A._nest_closure.prototype = {
    call$1($arguments) {
      var t1 = {},
        selectors = J.$index$asx($arguments, 0).get$asList();
      if (selectors.length === 0)
        throw A.wrapException(A.SassScriptException$(string$.x24selec));
      t1.first = true;
      return new A.MappedListIterable(selectors, new A._nest__closure(t1), A._arrayInstanceType(selectors)._eval$1("MappedListIterable<1,SelectorList>")).reduce$1(0, new A._nest__closure0()).get$asSassList();
    },
    $signature: 21
  };
  A._nest__closure.prototype = {
    call$1(selector) {
      var t1 = this._box_0,
        result = selector.assertSelector$1$allowParent(!t1.first);
      t1.first = false;
      return result;
    },
    $signature: 187
  };
  A._nest__closure0.prototype = {
    call$2($parent, child) {
      return child.resolveParentSelectors$1($parent);
    },
    $signature: 186
  };
  A._append_closure.prototype = {
    call$1($arguments) {
      var selectors = J.$index$asx($arguments, 0).get$asList();
      if (selectors.length === 0)
        throw A.wrapException(A.SassScriptException$(string$.x24selec));
      return new A.MappedListIterable(selectors, new A._append__closure(), A._arrayInstanceType(selectors)._eval$1("MappedListIterable<1,SelectorList>")).reduce$1(0, new A._append__closure0()).get$asSassList();
    },
    $signature: 21
  };
  A._append__closure.prototype = {
    call$1(selector) {
      return selector.assertSelector$0();
    },
    $signature: 187
  };
  A._append__closure0.prototype = {
    call$2($parent, child) {
      var t1 = child.components;
      return A.SelectorList$(new A.MappedListIterable(t1, new A._append___closure($parent), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,ComplexSelector>"))).resolveParentSelectors$1($parent);
    },
    $signature: 186
  };
  A._append___closure.prototype = {
    call$1(complex) {
      var newCompound, t2,
        t1 = complex.components,
        compound = B.JSArray_methods.get$first(t1);
      if (compound instanceof A.CompoundSelector) {
        newCompound = A._prependParent(compound);
        if (newCompound == null)
          throw A.wrapException(A.SassScriptException$("Can't append " + complex.toString$0(0) + " to " + this.parent.toString$0(0) + "."));
        t2 = A._setArrayType([newCompound], type$.JSArray_ComplexSelectorComponent);
        B.JSArray_methods.addAll$1(t2, A.SubListIterable$(t1, 1, null, A._arrayInstanceType(t1)._precomputed1));
        return A.ComplexSelector$(t2, false);
      } else
        throw A.wrapException(A.SassScriptException$("Can't append " + complex.toString$0(0) + " to " + this.parent.toString$0(0) + "."));
    },
    $signature: 126
  };
  A._extend_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        selector = t1.$index($arguments, 0).assertSelector$1$name("selector"),
        target = t1.$index($arguments, 1).assertSelector$1$name("extendee");
      return A.ExtensionStore__extendOrReplace(selector, t1.$index($arguments, 2).assertSelector$1$name("extender"), target, B.ExtendMode_allTargets, A.EvaluationContext_current().get$currentCallableSpan()).get$asSassList();
    },
    $signature: 21
  };
  A._replace_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        selector = t1.$index($arguments, 0).assertSelector$1$name("selector"),
        target = t1.$index($arguments, 1).assertSelector$1$name("original");
      return A.ExtensionStore__extendOrReplace(selector, t1.$index($arguments, 2).assertSelector$1$name("replacement"), target, B.ExtendMode_replace, A.EvaluationContext_current().get$currentCallableSpan()).get$asSassList();
    },
    $signature: 21
  };
  A._unify_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        result = t1.$index($arguments, 0).assertSelector$1$name("selector1").unify$1(t1.$index($arguments, 1).assertSelector$1$name("selector2"));
      return result == null ? B.C__SassNull : result.get$asSassList();
    },
    $signature: 4
  };
  A._isSuperselector_closure.prototype = {
    call$1($arguments) {
      var t1 = J.getInterceptor$asx($arguments),
        selector1 = t1.$index($arguments, 0).assertSelector$1$name("super"),
        selector2 = t1.$index($arguments, 1).assertSelector$1$name("sub");
      return A.listIsSuperselector(selector1.components, selector2.components) ? B.SassBoolean_true : B.SassBoolean_false;
    },
    $signature: 17
  };
  A._simpleSelectors_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertCompoundSelector$1$name("selector").components;
      return A.SassList$(new A.MappedListIterable(t1, new A._simpleSelectors__closure(), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,Value>")), B.ListSeparator_kWM, false);
    },
    $signature: 21
  };
  A._simpleSelectors__closure.prototype = {
    call$1(simple) {
      return new A.SassString(A.serializeSelector(simple, true), false);
    },
    $signature: 310
  };
  A._parse_closure.prototype = {
    call$1($arguments) {
      return J.$index$asx($arguments, 0).assertSelector$1$name("selector").get$asSassList();
    },
    $signature: 21
  };
  A._unquote_closure.prototype = {
    call$1($arguments) {
      var string = J.$index$asx($arguments, 0).assertString$1("string");
      if (!string._hasQuotes)
        return string;
      return new A.SassString(string._string$_text, false);
    },
    $signature: 14
  };
  A._quote_closure.prototype = {
    call$1($arguments) {
      var string = J.$index$asx($arguments, 0).assertString$1("string");
      if (string._hasQuotes)
        return string;
      return new A.SassString(string._string$_text, true);
    },
    $signature: 14
  };
  A._length_closure.prototype = {
    call$1($arguments) {
      var t1 = J.$index$asx($arguments, 0).assertString$1("string").get$_sassLength();
      return new A.UnitlessSassNumber(t1, null);
    },
    $signature: 9
  };
  A._insert_closure.prototype = {
    call$1($arguments) {
      var indexInt, codeUnitIndex, _s5_ = "index",
        t1 = J.getInterceptor$asx($arguments),
        string = t1.$index($arguments, 0).assertString$1("string"),
        insert = t1.$index($arguments, 1).assertString$1("insert"),
        index = t1.$index($arguments, 2).assertNumber$1(_s5_);
      index.assertNoUnits$1(_s5_);
      indexInt = index.assertInt$1(_s5_);
      if (indexInt < 0)
        indexInt = Math.max(string.get$_sassLength() + indexInt + 2, 0);
      t1 = string._string$_text;
      codeUnitIndex = A.codepointIndexToCodeUnitIndex(t1, A._codepointForIndex(indexInt, string.get$_sassLength(), false));
      return new A.SassString(B.JSString_methods.replaceRange$3(t1, codeUnitIndex, codeUnitIndex, insert._string$_text), string._hasQuotes);
    },
    $signature: 14
  };
  A._index_closure.prototype = {
    call$1($arguments) {
      var codepointIndex,
        t1 = J.getInterceptor$asx($arguments),
        t2 = t1.$index($arguments, 0).assertString$1("string")._string$_text,
        codeUnitIndex = B.JSString_methods.indexOf$1(t2, t1.$index($arguments, 1).assertString$1("substring")._string$_text);
      if (codeUnitIndex === -1)
        return B.C__SassNull;
      codepointIndex = A.codeUnitIndexToCodepointIndex(t2, codeUnitIndex);
      return new A.UnitlessSassNumber(codepointIndex + 1, null);
    },
    $signature: 4
  };
  A._slice_closure.prototype = {
    call$1($arguments) {
      var lengthInCodepoints, endInt, startCodepoint, endCodepoint,
        _s8_ = "start-at",
        t1 = J.getInterceptor$asx($arguments),
        string = t1.$index($arguments, 0).assertString$1("string"),
        start = t1.$index($arguments, 1).assertNumber$1(_s8_),
        end = t1.$index($arguments, 2).assertNumber$1("end-at");
      start.assertNoUnits$1(_s8_);
      end.assertNoUnits$1("end-at");
      lengthInCodepoints = string.get$_sassLength();
      endInt = end.assertInt$0();
      if (endInt === 0)
        return string._hasQuotes ? $.$get$_emptyQuoted() : $.$get$_emptyUnquoted();
      startCodepoint = A._codepointForIndex(start.assertInt$0(), lengthInCodepoints, false);
      endCodepoint = A._codepointForIndex(endInt, lengthInCodepoints, true);
      if (endCodepoint === lengthInCodepoints)
        --endCodepoint;
      if (endCodepoint < startCodepoint)
        return string._hasQuotes ? $.$get$_emptyQuoted() : $.$get$_emptyUnquoted();
      t1 = string._string$_text;
      return new A.SassString(B.JSString_methods.substring$2(t1, A.codepointIndexToCodeUnitIndex(t1, startCodepoint), A.codepointIndexToCodeUnitIndex(t1, endCodepoint + 1)), string._hasQuotes);
    },
    $signature: 14
  };
  A._toUpperCase_closure.prototype = {
    call$1($arguments) {
      var t1, t2, i, t3, t4,
        string = J.$index$asx($arguments, 0).assertString$1("string");
      for (t1 = string._string$_text, t2 = t1.length, i = 0, t3 = ""; i < t2; ++i) {
        t4 = B.JSString_methods._codeUnitAt$1(t1, i);
        t3 += A.Primitives_stringFromCharCode(t4 >= 97 && t4 <= 122 ? t4 & 4294967263 : t4);
      }
      return new A.SassString(t3.charCodeAt(0) == 0 ? t3 : t3, string._hasQuotes);
    },
    $signature: 14
  };
  A._toLowerCase_closure.prototype = {
    call$1($arguments) {
      var t1, t2, i, t3, t4,
        string = J.$index$asx($arguments, 0).assertString$1("string");
      for (t1 = string._string$_text, t2 = t1.length, i = 0, t3 = ""; i < t2; ++i) {
        t4 = B.JSString_methods._codeUnitAt$1(t1, i);
        t3 += A.Primitives_stringFromCharCode(t4 >= 65 && t4 <= 90 ? t4 | 32 : t4);
      }
      return new A.SassString(t3.charCodeAt(0) == 0 ? t3 : t3, string._hasQuotes);
    },
    $signature: 14
  };
  A._uniqueId_closure.prototype = {
    call$1($arguments) {
      var t1 = $.$get$_previousUniqueId() + ($.$get$_random().nextInt$1(36) + 1);
      $._previousUniqueId = t1;
      if (t1 > Math.pow(36, 6))
        $._previousUniqueId = B.JSInt_methods.$mod($.$get$_previousUniqueId(), A._asInt(Math.pow(36, 6)));
      return new A.SassString("u" + B.JSString_methods.padLeft$2(J.toRadixString$1$n($.$get$_previousUniqueId(), 36), 6, "0"), false);
    },
    $signature: 14
  };
  A.ImportCache.prototype = {
    canonicalize$4$baseImporter$baseUrl$forImport(_, url, baseImporter, baseUrl, forImport) {
      var relativeResult, _this = this;
      if (baseImporter != null) {
        relativeResult = _this._relativeCanonicalizeCache.putIfAbsent$2(new A.Tuple4(url, forImport, baseImporter, baseUrl, type$.Tuple4_of_Uri_and_bool_and_Importer_and_nullable_Uri), new A.ImportCache_canonicalize_closure(_this, baseUrl, url, baseImporter, forImport));
        if (relativeResult != null)
          return relativeResult;
      }
      return _this._canonicalizeCache.putIfAbsent$2(new A.Tuple2(url, forImport, type$.Tuple2_Uri_bool), new A.ImportCache_canonicalize_closure0(_this, url, forImport));
    },
    canonicalize$3$baseImporter$baseUrl($receiver, url, baseImporter, baseUrl) {
      return this.canonicalize$4$baseImporter$baseUrl$forImport($receiver, url, baseImporter, baseUrl, false);
    },
    _canonicalize$3(importer, url, forImport) {
      var t1, result;
      if (forImport) {
        t1 = type$.nullable_Object;
        result = A.runZoned(new A.ImportCache__canonicalize_closure(importer, url), A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol__inImportRule, true], t1, t1), type$.nullable_Uri);
      } else
        result = importer.canonicalize$1(0, url);
      if ((result == null ? null : result.get$scheme()) === "")
        this._logger.warn$2$deprecation(0, "Importer " + importer.toString$0(0) + " canonicalized " + url.toString$0(0) + " to " + A.S(result) + string$.x2e_Rela, true);
      return result;
    },
    importCanonical$4$originalUrl$quiet(importer, canonicalUrl, originalUrl, quiet) {
      return this._importCache.putIfAbsent$2(canonicalUrl, new A.ImportCache_importCanonical_closure(this, importer, canonicalUrl, originalUrl, quiet));
    },
    importCanonical$3$originalUrl(importer, canonicalUrl, originalUrl) {
      return this.importCanonical$4$originalUrl$quiet(importer, canonicalUrl, originalUrl, false);
    },
    importCanonical$2(importer, canonicalUrl) {
      return this.importCanonical$4$originalUrl$quiet(importer, canonicalUrl, null, false);
    },
    humanize$1(canonicalUrl) {
      var t2, url,
        t1 = this._canonicalizeCache;
      t1 = A.IterableNullableExtension_whereNotNull(t1.get$values(t1), type$.Tuple3_Importer_Uri_Uri);
      t2 = t1.$ti;
      url = A.minBy(new A.MappedIterable(new A.WhereIterable(t1, new A.ImportCache_humanize_closure(canonicalUrl), t2._eval$1("WhereIterable<Iterable.E>")), new A.ImportCache_humanize_closure0(), t2._eval$1("MappedIterable<Iterable.E,Uri>")), new A.ImportCache_humanize_closure1());
      if (url == null)
        return canonicalUrl;
      t1 = $.$get$url();
      return url.resolve$1(A.ParsedPath_ParsedPath$parse(canonicalUrl.get$path(canonicalUrl), t1.style).get$basename());
    },
    sourceMapUrl$1(_, canonicalUrl) {
      var t1 = this._resultsCache.$index(0, canonicalUrl);
      t1 = t1 == null ? null : t1.get$sourceMapUrl(t1);
      return t1 == null ? canonicalUrl : t1;
    },
    clearCanonicalize$1(url) {
      var t3, t4, _i,
        t1 = this._canonicalizeCache,
        t2 = type$.Tuple2_Uri_bool;
      t1.remove$1(0, new A.Tuple2(url, false, t2));
      t1.remove$1(0, new A.Tuple2(url, true, t2));
      t2 = A._setArrayType([], type$.JSArray_Tuple4_of_Uri_and_bool_and_Importer_and_nullable_Uri);
      for (t1 = this._relativeCanonicalizeCache, t3 = A.LinkedHashMapKeyIterator$(t1, t1._modifications); t3.moveNext$0();) {
        t4 = t3.__js_helper$_current;
        if (t4.item1.$eq(0, url))
          t2.push(t4);
      }
      for (t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i)
        t1.remove$1(0, t2[_i]);
    },
    clearImport$1(canonicalUrl) {
      this._resultsCache.remove$1(0, canonicalUrl);
      this._importCache.remove$1(0, canonicalUrl);
    }
  };
  A.ImportCache_canonicalize_closure.prototype = {
    call$0() {
      var canonicalUrl, _this = this,
        t1 = _this.baseUrl,
        resolvedUrl = t1 == null ? null : t1.resolveUri$1(_this.url);
      if (resolvedUrl == null)
        resolvedUrl = _this.url;
      t1 = _this.baseImporter;
      canonicalUrl = _this.$this._canonicalize$3(t1, resolvedUrl, _this.forImport);
      if (canonicalUrl == null)
        return null;
      return new A.Tuple3(t1, canonicalUrl, resolvedUrl, type$.Tuple3_Importer_Uri_Uri);
    },
    $signature: 76
  };
  A.ImportCache_canonicalize_closure0.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, _i, importer, canonicalUrl;
      for (t1 = this.$this, t2 = t1._importers, t3 = t2.length, t4 = this.url, t5 = this.forImport, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        importer = t2[_i];
        canonicalUrl = t1._canonicalize$3(importer, t4, t5);
        if (canonicalUrl != null)
          return new A.Tuple3(importer, canonicalUrl, t4, type$.Tuple3_Importer_Uri_Uri);
      }
      return null;
    },
    $signature: 76
  };
  A.ImportCache__canonicalize_closure.prototype = {
    call$0() {
      return this.importer.canonicalize$1(0, this.url);
    },
    $signature: 185
  };
  A.ImportCache_importCanonical_closure.prototype = {
    call$0() {
      var t3, _this = this,
        t1 = _this.canonicalUrl,
        result = _this.importer.load$1(0, t1),
        t2 = _this.$this;
      t2._resultsCache.$indexSet(0, t1, result);
      t3 = _this.originalUrl;
      t1 = t3 == null ? t1 : t3.resolveUri$1(t1);
      t2 = _this.quiet ? $.$get$Logger_quiet() : t2._logger;
      return A.Stylesheet_Stylesheet$parse(result.contents, result.syntax, t2, t1);
    },
    $signature: 77
  };
  A.ImportCache_humanize_closure.prototype = {
    call$1(tuple) {
      return tuple.item2.$eq(0, this.canonicalUrl);
    },
    $signature: 314
  };
  A.ImportCache_humanize_closure0.prototype = {
    call$1(tuple) {
      return tuple.item3;
    },
    $signature: 316
  };
  A.ImportCache_humanize_closure1.prototype = {
    call$1(url) {
      return url.get$path(url).length;
    },
    $signature: 96
  };
  A.Importer.prototype = {
    modificationTime$1(url) {
      return new A.DateTime(Date.now(), false);
    },
    couldCanonicalize$2(url, canonicalUrl) {
      return true;
    }
  };
  A.AsyncImporter.prototype = {};
  A.FilesystemImporter.prototype = {
    canonicalize$1(_, url) {
      if (url.get$scheme() !== "file" && url.get$scheme() !== "")
        return null;
      return A.NullableExtension_andThen(A.resolveImportPath(A.join(this._loadPath, $.$get$context().style.pathFromUri$1(A._parseUri(url)), null)), new A.FilesystemImporter_canonicalize_closure());
    },
    load$1(_, url) {
      var path = $.$get$context().style.pathFromUri$1(A._parseUri(url)),
        t1 = A.readFile(path),
        t2 = A.Syntax_forPath(path),
        t3 = url.get$scheme();
      if (t3 === "")
        A.throwExpression(A.ArgumentError$value(url, "sourceMapUrl", "must be absolute"));
      return new A.ImporterResult(t1, url, t2);
    },
    modificationTime$1(url) {
      return A.modificationTime($.$get$context().style.pathFromUri$1(A._parseUri(url)));
    },
    couldCanonicalize$2(url, canonicalUrl) {
      var t1, t2, t3, basename, canonicalBasename;
      if (url.get$scheme() !== "file" && url.get$scheme() !== "")
        return false;
      if (canonicalUrl.get$scheme() !== "file")
        return false;
      t1 = $.$get$url();
      t2 = url.get$path(url);
      t3 = t1.style;
      basename = A.ParsedPath_ParsedPath$parse(t2, t3).get$basename();
      canonicalBasename = A.ParsedPath_ParsedPath$parse(canonicalUrl.get$path(canonicalUrl), t3).get$basename();
      if (!B.JSString_methods.startsWith$1(basename, "_") && B.JSString_methods.startsWith$1(canonicalBasename, "_"))
        canonicalBasename = B.JSString_methods.substring$1(canonicalBasename, 1);
      return basename === canonicalBasename || basename === t1.withoutExtension$1(canonicalBasename);
    },
    toString$0(_) {
      return this._loadPath;
    }
  };
  A.FilesystemImporter_canonicalize_closure.prototype = {
    call$1(resolved) {
      var t1, t2, t0, _null = null;
      if (J.$eq$(J.get$platform$x(self.process), "win32") || J.$eq$(J.get$platform$x(self.process), "darwin")) {
        t1 = $.$get$context();
        t2 = A._realCasePath(t1.absolute$7(t1.normalize$1(resolved), _null, _null, _null, _null, _null, _null));
        t0 = t2;
        t2 = t1;
        t1 = t0;
      } else {
        t1 = $.$get$context();
        t2 = t1.canonicalize$1(0, resolved);
        t0 = t2;
        t2 = t1;
        t1 = t0;
      }
      return t2.toUri$1(t1);
    },
    $signature: 184
  };
  A.ImporterResult.prototype = {
    get$sourceMapUrl(_) {
      return this._sourceMapUrl;
    }
  };
  A.resolveImportPath_closure.prototype = {
    call$0() {
      return A._exactlyOne(A._tryPath($.$get$context().withoutExtension$1(this.path) + ".import" + this.extension));
    },
    $signature: 41
  };
  A.resolveImportPath_closure0.prototype = {
    call$0() {
      return A._exactlyOne(A._tryPathWithExtensions(this.path + ".import"));
    },
    $signature: 41
  };
  A._tryPathAsDirectory_closure.prototype = {
    call$0() {
      return A._exactlyOne(A._tryPathWithExtensions(A.join(this.path, "index.import", null)));
    },
    $signature: 41
  };
  A._exactlyOne_closure.prototype = {
    call$1(path) {
      var t1 = $.$get$context();
      return "  " + t1.prettyUri$1(t1.toUri$1(path));
    },
    $signature: 5
  };
  A.InterpolationBuffer.prototype = {
    writeCharCode$1(character) {
      this._interpolation_buffer$_text._contents += A.Primitives_stringFromCharCode(character);
      return null;
    },
    add$1(_, expression) {
      this._flushText$0();
      this._interpolation_buffer$_contents.push(expression);
    },
    addInterpolation$1(interpolation) {
      var first, t1, _this = this,
        toAdd = interpolation.contents;
      if (toAdd.length === 0)
        return;
      first = B.JSArray_methods.get$first(toAdd);
      if (typeof first == "string") {
        _this._interpolation_buffer$_text._contents += first;
        toAdd = A.SubListIterable$(toAdd, 1, null, A._arrayInstanceType(toAdd)._precomputed1);
      }
      _this._flushText$0();
      t1 = _this._interpolation_buffer$_contents;
      B.JSArray_methods.addAll$1(t1, toAdd);
      if (typeof B.JSArray_methods.get$last(t1) == "string")
        _this._interpolation_buffer$_text._contents += A.S(t1.pop());
    },
    _flushText$0() {
      var t1 = this._interpolation_buffer$_text,
        t2 = t1._contents;
      if (t2.length === 0)
        return;
      this._interpolation_buffer$_contents.push(t2.charCodeAt(0) == 0 ? t2 : t2);
      t1._contents = "";
    },
    interpolation$1(span) {
      var t1 = A.List_List$of(this._interpolation_buffer$_contents, true, type$.Object),
        t2 = this._interpolation_buffer$_text._contents;
      if (t2.length !== 0)
        t1.push(t2.charCodeAt(0) == 0 ? t2 : t2);
      return A.Interpolation$(t1, span);
    },
    toString$0(_) {
      var t1, t2, _i, t3, element;
      for (t1 = this._interpolation_buffer$_contents, t2 = t1.length, _i = 0, t3 = ""; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        element = t1[_i];
        t3 = typeof element == "string" ? t3 + element : t3 + "#{" + A.S(element) + A.Primitives_stringFromCharCode(125);
      }
      t1 = t3 + this._interpolation_buffer$_text.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._realCasePath_helper.prototype = {
    call$1(path) {
      var dirname = $.$get$context().dirname$1(path);
      if (dirname === path)
        return path;
      return $._realCaseCache.putIfAbsent$2(path, new A._realCasePath_helper_closure(this, dirname, path));
    },
    $signature: 5
  };
  A._realCasePath_helper_closure.prototype = {
    call$0() {
      var matches, t2, exception,
        realDirname = this.helper.call$1(this.dirname),
        t1 = this.path,
        basename = A.ParsedPath_ParsedPath$parse(t1, $.$get$context().style).get$basename();
      try {
        matches = J.where$1$ax(A.listDir(realDirname, false), new A._realCasePath_helper__closure(basename)).toList$0(0);
        t2 = J.get$length$asx(matches) !== 1 ? A.join(realDirname, basename, null) : J.$index$asx(matches, 0);
        return t2;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.FileSystemException)
          return t1;
        else
          throw exception;
      }
    },
    $signature: 29
  };
  A._realCasePath_helper__closure.prototype = {
    call$1(realPath) {
      return A.equalsIgnoreCase(A.ParsedPath_ParsedPath$parse(realPath, $.$get$context().style).get$basename(), this.basename);
    },
    $signature: 6
  };
  A.FileSystemException.prototype = {
    toString$0(_) {
      var t1 = $.$get$context();
      return t1.prettyUri$1(t1.toUri$1(this.path)) + ": " + this.message;
    },
    get$message(receiver) {
      return this.message;
    }
  };
  A.Stderr.prototype = {
    writeln$1(object) {
      J.write$1$x(this._stderr, A.S(object == null ? "" : object) + "\n");
    },
    writeln$0() {
      return this.writeln$1(null);
    }
  };
  A._readFile_closure.prototype = {
    call$0() {
      return J.readFileSync$2$x(A.fs(), this.path, this.encoding);
    },
    $signature: 94
  };
  A.writeFile_closure.prototype = {
    call$0() {
      return J.writeFileSync$2$x(A.fs(), this.path, this.contents);
    },
    $signature: 0
  };
  A.deleteFile_closure.prototype = {
    call$0() {
      return J.unlinkSync$1$x(A.fs(), this.path);
    },
    $signature: 0
  };
  A.readStdin_closure.prototype = {
    call$1(result) {
      this._box_0.contents = result;
      this.completer.complete$1(result);
    },
    $signature: 116
  };
  A.readStdin_closure0.prototype = {
    call$1(chunk) {
      this.sink.add$1(0, type$.List_int._as(chunk));
    },
    call$0() {
      return this.call$1(null);
    },
    "call*": "call$1",
    $requiredArgCount: 0,
    $defaultValues() {
      return [null];
    },
    $signature: 71
  };
  A.readStdin_closure1.prototype = {
    call$1(_) {
      this.sink.close$0(0);
    },
    call$0() {
      return this.call$1(null);
    },
    "call*": "call$1",
    $requiredArgCount: 0,
    $defaultValues() {
      return [null];
    },
    $signature: 71
  };
  A.readStdin_closure2.prototype = {
    call$1(e) {
      var t1 = $.$get$stderr();
      t1.writeln$1("Failed to read from stdin");
      t1.writeln$1(e);
      e.toString;
      this.completer.completeError$1(e);
    },
    call$0() {
      return this.call$1(null);
    },
    "call*": "call$1",
    $requiredArgCount: 0,
    $defaultValues() {
      return [null];
    },
    $signature: 71
  };
  A.fileExists_closure.prototype = {
    call$0() {
      var error, systemError, exception,
        t1 = this.path;
      if (!J.existsSync$1$x(A.fs(), t1))
        return false;
      try {
        t1 = J.isFile$0$x(J.statSync$1$x(A.fs(), t1));
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        systemError = type$.JsSystemError._as(error);
        if (J.$eq$(J.get$code$x(systemError), "ENOENT"))
          return false;
        throw exception;
      }
    },
    $signature: 26
  };
  A.dirExists_closure.prototype = {
    call$0() {
      var error, systemError, exception,
        t1 = this.path;
      if (!J.existsSync$1$x(A.fs(), t1))
        return false;
      try {
        t1 = J.isDirectory$0$x(J.statSync$1$x(A.fs(), t1));
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        systemError = type$.JsSystemError._as(error);
        if (J.$eq$(J.get$code$x(systemError), "ENOENT"))
          return false;
        throw exception;
      }
    },
    $signature: 26
  };
  A.ensureDir_closure.prototype = {
    call$0() {
      var error, systemError, exception, t1;
      try {
        J.mkdirSync$1$x(A.fs(), this.path);
      } catch (exception) {
        error = A.unwrapException(exception);
        systemError = type$.JsSystemError._as(error);
        if (J.$eq$(J.get$code$x(systemError), "EEXIST"))
          return;
        if (!J.$eq$(J.get$code$x(systemError), "ENOENT"))
          throw exception;
        t1 = this.path;
        A.ensureDir($.$get$context().dirname$1(t1));
        J.mkdirSync$1$x(A.fs(), t1);
      }
    },
    $signature: 0
  };
  A.listDir_closure.prototype = {
    call$0() {
      var t1 = this.path;
      if (!this.recursive)
        return J.map$1$1$ax(J.readdirSync$1$x(A.fs(), t1), new A.listDir__closure(t1), type$.String).where$1(0, new A.listDir__closure0());
      else
        return new A.listDir_closure_list().call$1(t1);
    },
    $signature: 183
  };
  A.listDir__closure.prototype = {
    call$1(child) {
      return A.join(this.path, A._asString(child), null);
    },
    $signature: 91
  };
  A.listDir__closure0.prototype = {
    call$1(child) {
      return !A.dirExists(child);
    },
    $signature: 6
  };
  A.listDir_closure_list.prototype = {
    call$1($parent) {
      return J.expand$1$1$ax(J.readdirSync$1$x(A.fs(), $parent), new A.listDir__list_closure($parent, this), type$.String);
    },
    $signature: 144
  };
  A.listDir__list_closure.prototype = {
    call$1(child) {
      var path = A.join(this.parent, A._asString(child), null);
      return A.dirExists(path) ? this.list.call$1(path) : A._setArrayType([path], type$.JSArray_String);
    },
    $signature: 181
  };
  A.modificationTime_closure.prototype = {
    call$0() {
      var t2,
        t1 = J.getTime$0$x(J.get$mtime$x(J.statSync$1$x(A.fs(), this.path)));
      if (Math.abs(t1) <= 864e13)
        t2 = false;
      else
        t2 = true;
      if (t2)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + A.S(t1), null));
      A.checkNotNullable(false, "isUtc", type$.bool);
      return new A.DateTime(t1, false);
    },
    $signature: 180
  };
  A.watchDir_closure.prototype = {
    call$2(path, _) {
      var t1 = this._box_0.controller;
      return t1 == null ? null : t1.add$1(0, new A.WatchEvent(B.ChangeType_add, path));
    },
    call$1(path) {
      return this.call$2(path, null);
    },
    "call*": "call$2",
    $requiredArgCount: 1,
    $defaultValues() {
      return [null];
    },
    $signature: 177
  };
  A.watchDir_closure0.prototype = {
    call$2(path, _) {
      var t1 = this._box_0.controller;
      return t1 == null ? null : t1.add$1(0, new A.WatchEvent(B.ChangeType_modify, path));
    },
    call$1(path) {
      return this.call$2(path, null);
    },
    "call*": "call$2",
    $requiredArgCount: 1,
    $defaultValues() {
      return [null];
    },
    $signature: 177
  };
  A.watchDir_closure1.prototype = {
    call$1(path) {
      var t1 = this._box_0.controller;
      return t1 == null ? null : t1.add$1(0, new A.WatchEvent(B.ChangeType_remove, path));
    },
    $signature: 116
  };
  A.watchDir_closure2.prototype = {
    call$1(error) {
      var t1 = this._box_0.controller;
      return t1 == null ? null : t1.addError$1(error);
    },
    $signature: 107
  };
  A.watchDir_closure3.prototype = {
    call$0() {
      var controller = A.StreamController_StreamController(new A.watchDir__closure(this.watcher), null, null, null, false, type$.WatchEvent);
      this._box_0.controller = controller;
      this.completer.complete$1(new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>")));
    },
    $signature: 1
  };
  A.watchDir__closure.prototype = {
    call$0() {
      J.close$0$x(this.watcher);
    },
    $signature: 1
  };
  A._QuietLogger.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {
    },
    warn$1($receiver, message) {
      return this.warn$4$deprecation$span$trace($receiver, message, false, null, null);
    },
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace($receiver, message, false, span, null);
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$4$deprecation$span$trace($receiver, message, deprecation, null, null);
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace($receiver, message, deprecation, span, null);
    },
    warn$2$trace($receiver, message, trace) {
      return this.warn$4$deprecation$span$trace($receiver, message, false, null, trace);
    },
    debug$2(_, message, span) {
    }
  };
  A.StderrLogger.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {
      var t2, t3, t4,
        t1 = this.color;
      if (t1) {
        t2 = $.$get$stderr();
        t3 = t2._stderr;
        t4 = J.getInterceptor$x(t3);
        t4.write$1(t3, "\x1b[33m\x1b[1m");
        if (deprecation)
          t4.write$1(t3, "Deprecation ");
        t4.write$1(t3, "Warning\x1b[0m");
      } else {
        if (deprecation)
          J.write$1$x($.$get$stderr()._stderr, "DEPRECATION ");
        t2 = $.$get$stderr();
        J.write$1$x(t2._stderr, "WARNING");
      }
      if (span == null)
        t2.writeln$1(": " + message);
      else if (trace != null)
        t2.writeln$1(": " + message + "\n\n" + span.highlight$1$color(t1));
      else
        t2.writeln$1(" on " + span.message$2$color(0, "\n" + message, t1));
      if (trace != null)
        t2.writeln$1(A.indent(B.JSString_methods.trimRight$0(trace.toString$0(0)), 4));
      t2.writeln$0();
    },
    warn$1($receiver, message) {
      return this.warn$4$deprecation$span$trace($receiver, message, false, null, null);
    },
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace($receiver, message, false, span, null);
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$4$deprecation$span$trace($receiver, message, deprecation, null, null);
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace($receiver, message, deprecation, span, null);
    },
    warn$2$trace($receiver, message, trace) {
      return this.warn$4$deprecation$span$trace($receiver, message, false, null, trace);
    },
    debug$2(_, message, span) {
      var url, t3, t4,
        t1 = span.file,
        t2 = span._file$_start;
      if (A.FileLocation$_(t1, t2).file.url == null)
        url = "-";
      else {
        t3 = A.FileLocation$_(t1, t2);
        url = $.$get$context().prettyUri$1(t3.file.url);
      }
      t3 = $.$get$stderr();
      t2 = A.FileLocation$_(t1, t2);
      t2 = t2.file.getLine$1(t2.offset);
      t1 = t3._stderr;
      t4 = J.getInterceptor$x(t1);
      t4.write$1(t1, url + ":" + (t2 + 1) + " ");
      t4.write$1(t1, this.color ? "\x1b[1mDebug\x1b[0m" : "DEBUG");
      t3.writeln$1(": " + message);
    }
  };
  A.TerseLogger.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {
      var firstParagraph, t1, t2, count;
      if (deprecation) {
        firstParagraph = B.JSArray_methods.get$first(message.split("\n\n"));
        t1 = this._warningCounts;
        t2 = t1.$index(0, firstParagraph);
        count = (t2 == null ? 0 : t2) + 1;
        t1.$indexSet(0, firstParagraph, count);
        if (count > 5)
          return;
      }
      this._inner.warn$4$deprecation$span$trace(0, message, deprecation, span, trace);
    },
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace($receiver, message, false, span, null);
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$4$deprecation$span$trace($receiver, message, deprecation, null, null);
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace($receiver, message, deprecation, span, null);
    },
    warn$2$trace($receiver, message, trace) {
      return this.warn$4$deprecation$span$trace($receiver, message, false, null, trace);
    },
    debug$2(_, message, span) {
      return this._inner.debug$2(0, message, span);
    },
    summarize$1$node(node) {
      var t2, total,
        t1 = this._warningCounts;
      t1 = t1.get$values(t1);
      t2 = A._instanceType(t1);
      total = A.IterableIntegerExtension_get_sum(new A.MappedIterable(new A.WhereIterable(t1, new A.TerseLogger_summarize_closure(), t2._eval$1("WhereIterable<Iterable.E>")), new A.TerseLogger_summarize_closure0(), t2._eval$1("MappedIterable<Iterable.E,int>")));
      if (total > 0) {
        t1 = node ? "" : string$.x0aRun_i;
        this._inner.warn$1(0, "" + total + string$.x20repet + t1);
      }
    }
  };
  A.TerseLogger_summarize_closure.prototype = {
    call$1(count) {
      return count > 5;
    },
    $signature: 57
  };
  A.TerseLogger_summarize_closure0.prototype = {
    call$1(count) {
      return count - 5;
    },
    $signature: 175
  };
  A.TrackingLogger.prototype = {
    warn$4$deprecation$span$trace(_, message, deprecation, span, trace) {
      this._emittedWarning = true;
      this._tracking$_logger.warn$4$deprecation$span$trace(0, message, deprecation, span, trace);
    },
    warn$2$span($receiver, message, span) {
      return this.warn$4$deprecation$span$trace($receiver, message, false, span, null);
    },
    warn$2$deprecation($receiver, message, deprecation) {
      return this.warn$4$deprecation$span$trace($receiver, message, deprecation, null, null);
    },
    warn$3$deprecation$span($receiver, message, deprecation, span) {
      return this.warn$4$deprecation$span$trace($receiver, message, deprecation, span, null);
    },
    warn$2$trace($receiver, message, trace) {
      return this.warn$4$deprecation$span$trace($receiver, message, false, null, trace);
    },
    debug$2(_, message, span) {
      this._emittedDebug = true;
      this._tracking$_logger.debug$2(0, message, span);
    }
  };
  A.BuiltInModule.prototype = {
    get$upstream() {
      return B.List_empty3;
    },
    get$variableNodes() {
      return B.Map_empty0;
    },
    get$extensionStore() {
      return B.C_EmptyExtensionStore;
    },
    get$css(_) {
      return new A.CssStylesheet(B.List_empty0, A.SourceFile$decoded(B.List_empty1, this.url).span$2(0, 0, 0));
    },
    get$transitivelyContainsCss() {
      return false;
    },
    get$transitivelyContainsExtensions() {
      return false;
    },
    setVariable$3($name, value, nodeWithSpan) {
      if (!this.variables.containsKey$1($name))
        throw A.wrapException(A.SassScriptException$("Undefined variable."));
      throw A.wrapException(A.SassScriptException$("Cannot modify built-in variable."));
    },
    variableIdentity$1($name) {
      return this;
    },
    cloneCss$0() {
      return this;
    },
    $isModule: 1,
    get$url(receiver) {
      return this.url;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    },
    get$variables() {
      return this.variables;
    }
  };
  A.ForwardedModuleView.prototype = {
    get$url(_) {
      var t1 = this._forwarded_view$_inner;
      return t1.get$url(t1);
    },
    get$upstream() {
      return this._forwarded_view$_inner.get$upstream();
    },
    get$extensionStore() {
      return this._forwarded_view$_inner.get$extensionStore();
    },
    get$css(_) {
      var t1 = this._forwarded_view$_inner;
      return t1.get$css(t1);
    },
    get$transitivelyContainsCss() {
      return this._forwarded_view$_inner.get$transitivelyContainsCss();
    },
    get$transitivelyContainsExtensions() {
      return this._forwarded_view$_inner.get$transitivelyContainsExtensions();
    },
    setVariable$3($name, value, nodeWithSpan) {
      var prefix,
        _s19_ = "Undefined variable.",
        t1 = this._rule,
        shownVariables = t1.shownVariables,
        hiddenVariables = t1.hiddenVariables;
      if (shownVariables != null && !shownVariables._base.contains$1(0, $name))
        throw A.wrapException(A.SassScriptException$(_s19_));
      else if (hiddenVariables != null && hiddenVariables._base.contains$1(0, $name))
        throw A.wrapException(A.SassScriptException$(_s19_));
      prefix = t1.prefix;
      if (prefix != null) {
        if (!B.JSString_methods.startsWith$1($name, prefix))
          throw A.wrapException(A.SassScriptException$(_s19_));
        $name = B.JSString_methods.substring$1($name, prefix.length);
      }
      return this._forwarded_view$_inner.setVariable$3($name, value, nodeWithSpan);
    },
    variableIdentity$1($name) {
      var prefix = this._rule.prefix;
      if (prefix != null)
        $name = B.JSString_methods.substring$1($name, prefix.length);
      return this._forwarded_view$_inner.variableIdentity$1($name);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ForwardedModuleView && this._forwarded_view$_inner.$eq(0, other._forwarded_view$_inner) && this._rule === other._rule;
    },
    get$hashCode(_) {
      var t1 = this._forwarded_view$_inner;
      return (t1.get$hashCode(t1) ^ A.Primitives_objectHashCode(this._rule)) >>> 0;
    },
    cloneCss$0() {
      return A.ForwardedModuleView$(this._forwarded_view$_inner.cloneCss$0(), this._rule, this.$ti._precomputed1);
    },
    toString$0(_) {
      return "forwarded " + this._forwarded_view$_inner.toString$0(0);
    },
    $isModule: 1,
    get$variables() {
      return this.variables;
    },
    get$variableNodes() {
      return this.variableNodes;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    }
  };
  A.ShadowedModuleView.prototype = {
    get$url(_) {
      var t1 = this._shadowed_view$_inner;
      return t1.get$url(t1);
    },
    get$upstream() {
      return this._shadowed_view$_inner.get$upstream();
    },
    get$extensionStore() {
      return this._shadowed_view$_inner.get$extensionStore();
    },
    get$css(_) {
      var t1 = this._shadowed_view$_inner;
      return t1.get$css(t1);
    },
    get$transitivelyContainsCss() {
      return this._shadowed_view$_inner.get$transitivelyContainsCss();
    },
    get$transitivelyContainsExtensions() {
      return this._shadowed_view$_inner.get$transitivelyContainsExtensions();
    },
    setVariable$3($name, value, nodeWithSpan) {
      if (!this.variables.containsKey$1($name))
        throw A.wrapException(A.SassScriptException$("Undefined variable."));
      else
        return this._shadowed_view$_inner.setVariable$3($name, value, nodeWithSpan);
    },
    variableIdentity$1($name) {
      return this._shadowed_view$_inner.variableIdentity$1($name);
    },
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (other instanceof A.ShadowedModuleView)
        if (_this._shadowed_view$_inner.$eq(0, other._shadowed_view$_inner)) {
          t1 = _this.variables;
          t1 = t1.get$keys(t1);
          t2 = other.variables;
          if (B.C_IterableEquality.equals$2(0, t1, t2.get$keys(t2))) {
            t1 = _this.functions;
            t1 = t1.get$keys(t1);
            t2 = other.functions;
            if (B.C_IterableEquality.equals$2(0, t1, t2.get$keys(t2))) {
              t1 = _this.mixins;
              t1 = t1.get$keys(t1);
              t2 = other.mixins;
              t2 = B.C_IterableEquality.equals$2(0, t1, t2.get$keys(t2));
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._shadowed_view$_inner;
      return t1.get$hashCode(t1);
    },
    cloneCss$0() {
      var _this = this;
      return new A.ShadowedModuleView(_this._shadowed_view$_inner.cloneCss$0(), _this.variables, _this.variableNodes, _this.functions, _this.mixins, _this.$ti);
    },
    toString$0(_) {
      return "shadowed " + this._shadowed_view$_inner.toString$0(0);
    },
    $isModule: 1,
    get$variables() {
      return this.variables;
    },
    get$variableNodes() {
      return this.variableNodes;
    },
    get$functions(receiver) {
      return this.functions;
    },
    get$mixins() {
      return this.mixins;
    }
  };
  A.JSArray0.prototype = {};
  A.Chokidar.prototype = {};
  A.ChokidarOptions.prototype = {};
  A.ChokidarWatcher.prototype = {};
  A.JSFunction.prototype = {};
  A.NodeImporterResult.prototype = {};
  A.RenderContext.prototype = {};
  A.RenderContextOptions.prototype = {};
  A.RenderContextResult.prototype = {};
  A.RenderContextResultStats.prototype = {};
  A.JSClass.prototype = {};
  A.JSUrl.prototype = {};
  A._PropertyDescriptor.prototype = {};
  A.AtRootQueryParser.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(new A.AtRootQueryParser_parse_closure(this));
    }
  };
  A.AtRootQueryParser_parse_closure.prototype = {
    call$0() {
      var include, atRules,
        t1 = this.$this,
        t2 = t1.scanner;
      t2.expectChar$1(40);
      t1.whitespace$0();
      include = t1.scanIdentifier$1("with");
      if (!include)
        t1.expectIdentifier$2$name("without", '"with" or "without"');
      t1.whitespace$0();
      t2.expectChar$1(58);
      t1.whitespace$0();
      atRules = A.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      do {
        atRules.add$1(0, t1.identifier$0().toLowerCase());
        t1.whitespace$0();
      } while (t1.lookingAtIdentifier$0());
      t2.expectChar$1(41);
      t2.expectDone$0();
      return new A.AtRootQuery(include, atRules, atRules.contains$1(0, "all"), atRules.contains$1(0, "rule"));
    },
    $signature: 104
  };
  A._disallowedFunctionNames_closure.prototype = {
    call$1($function) {
      return $function.name;
    },
    $signature: 336
  };
  A.CssParser.prototype = {
    get$plainCss() {
      return true;
    },
    silentComment$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      this.super$Parser$silentComment();
      this.error$2(0, string$.Silent, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    atRule$2$root(child, root) {
      var $name, urlStart, next, url, urlSpan, modifiers, t2, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$1(64);
      $name = _this.interpolatedIdentifier$0();
      _this.whitespace$0();
      switch ($name.get$asPlain()) {
        case "at-root":
        case "content":
        case "debug":
        case "each":
        case "error":
        case "extend":
        case "for":
        case "function":
        case "if":
        case "include":
        case "mixin":
        case "return":
        case "warn":
        case "while":
          _this.almostAnyValue$0();
          _this.error$2(0, "This at-rule isn't allowed in plain CSS.", t1.spanFrom$1(start));
          break;
        case "import":
          urlStart = new A._SpanScannerState(t1, t1._string_scanner$_position);
          next = t1.peekChar$0();
          url = next === 117 || next === 85 ? _this.dynamicUrl$0() : new A.StringExpression(_this.interpolatedString$0().asInterpolation$1$static(true), false);
          urlSpan = t1.spanFrom$1(urlStart);
          _this.whitespace$0();
          modifiers = _this.tryImportModifiers$0();
          _this.expectStatementSeparator$1("@import rule");
          t2 = A._setArrayType([new A.StaticImport(A.Interpolation$(A._setArrayType([url], type$.JSArray_Object), urlSpan), modifiers, t1.spanFrom$1(urlStart))], type$.JSArray_Import);
          t1 = t1.spanFrom$1(start);
          return new A.ImportRule(A.List_List$unmodifiable(t2, type$.Import), t1);
        case "media":
          return _this.mediaRule$1(start);
        case "-moz-document":
          return _this.mozDocumentRule$2(start, $name);
        case "supports":
          return _this.supportsRule$1(start);
        default:
          return _this.unknownAtRule$2(start, $name);
      }
    },
    identifierLike$0() {
      var t2, allowEmptySecondArg, $arguments, t3, t4, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position),
        identifier = _this.interpolatedIdentifier$0(),
        plain = identifier.get$asPlain(),
        lower = plain.toLowerCase(),
        specialFunction = _this.trySpecialFunction$2(lower, start);
      if (specialFunction != null)
        return specialFunction;
      t2 = t1._string_scanner$_position;
      if (!t1.scanChar$1(40))
        return new A.StringExpression(identifier, false);
      allowEmptySecondArg = lower === "var";
      $arguments = A._setArrayType([], type$.JSArray_Expression);
      if (!t1.scanChar$1(41)) {
        do {
          _this.whitespace$0();
          if (allowEmptySecondArg && $arguments.length === 1 && t1.peekChar$0() === 41) {
            t3 = A.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
            t4 = t3.offset;
            t4 = A._FileSpan$(t3.file, t4, t4);
            $arguments.push(new A.StringExpression(A.Interpolation$(A._setArrayType([""], type$.JSArray_Object), t4), false));
            break;
          }
          $arguments.push(_this.expressionUntilComma$1$singleEquals(true));
          _this.whitespace$0();
        } while (t1.scanChar$1(44));
        t1.expectChar$1(41);
      }
      if ($.$get$_disallowedFunctionNames().contains$1(0, plain))
        _this.error$2(0, string$.This_f, t1.spanFrom$1(start));
      t3 = A.Interpolation$(A._setArrayType([new A.StringExpression(identifier, false)], type$.JSArray_Object), identifier.span);
      t2 = t1.spanFrom$1(new A._SpanScannerState(t1, t2));
      t4 = type$.Expression;
      return new A.InterpolatedFunctionExpression(t3, new A.ArgumentInvocation(A.List_List$unmodifiable($arguments, t4), A.ConstantMap_ConstantMap$from(B.Map_empty2, type$.String, t4), null, null, t2), t1.spanFrom$1(start));
    },
    namespacedExpression$2(namespace, start) {
      var expression = this.super$StylesheetParser$namespacedExpression(namespace, start);
      this.error$2(0, string$.Modulen, expression.get$span(expression));
    }
  };
  A.KeyframeSelectorParser.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(new A.KeyframeSelectorParser_parse_closure(this));
    },
    _percentage$0() {
      var t3, next,
        t1 = this.scanner,
        t2 = t1.scanChar$1(43) ? "" + A.Primitives_stringFromCharCode(43) : "",
        second = t1.peekChar$0();
      if (!A.isDigit(second) && second !== 46)
        t1.error$1(0, "Expected number.");
      while (true) {
        t3 = t1.peekChar$0();
        if (!(t3 != null && t3 >= 48 && t3 <= 57))
          break;
        t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
      }
      if (t1.peekChar$0() === 46) {
        t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
        while (true) {
          t3 = t1.peekChar$0();
          if (!(t3 != null && t3 >= 48 && t3 <= 57))
            break;
          t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
        }
      }
      if (this.scanIdentChar$1(101)) {
        t2 += A.Primitives_stringFromCharCode(101);
        next = t1.peekChar$0();
        if (next === 43 || next === 45)
          t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
        if (!A.isDigit(t1.peekChar$0()))
          t1.error$1(0, "Expected digit.");
        while (true) {
          t3 = t1.peekChar$0();
          if (!(t3 != null && t3 >= 48 && t3 <= 57))
            break;
          t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
        }
      }
      t1.expectChar$1(37);
      t2 += A.Primitives_stringFromCharCode(37);
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    }
  };
  A.KeyframeSelectorParser_parse_closure.prototype = {
    call$0() {
      var selectors = A._setArrayType([], type$.JSArray_String),
        t1 = this.$this,
        t2 = t1.scanner;
      do {
        t1.whitespace$0();
        if (t1.lookingAtIdentifier$0())
          if (t1.scanIdentifier$1("from"))
            selectors.push("from");
          else {
            t1.expectIdentifier$2$name("to", '"to" or "from"');
            selectors.push("to");
          }
        else
          selectors.push(t1._percentage$0());
        t1.whitespace$0();
      } while (t2.scanChar$1(44));
      t2.expectDone$0();
      return selectors;
    },
    $signature: 46
  };
  A.MediaQueryParser.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(new A.MediaQueryParser_parse_closure(this));
    },
    _mediaQuery$0() {
      var identifier1, identifier2, type, modifier, features, _this = this, _null = null,
        t1 = _this.scanner;
      if (t1.peekChar$0() !== 40) {
        identifier1 = _this.identifier$0();
        _this.whitespace$0();
