he micro task queue, which is the same
 * queue used for promises. Basically after the current job, but before the next job.
 * Use this for asynchronous conversions.
 * @property {SchedulerLike} queue Schedules on a queue in the current event frame
 * (trampoline scheduler). Use this for iteration operations.
 * @property {SchedulerLike} animationFrame Schedules work with `requestAnimationFrame`.
 * Use this for synchronizing with the platform's painting.
 * @property {SchedulerLike} async Schedules work with `setInterval`. Use this for
 * time-based operations.
 */
let Scheduler = {
  asap,
  queue,
  animationFrame,
  async
};

/**
 * @typedef {Object} Rx.Symbol
 * @property {Symbol|string} rxSubscriber A symbol to use as a property name to
 * retrieve an "Rx safe" Observer from an object. "Rx safety" can be defined as
 * an object that