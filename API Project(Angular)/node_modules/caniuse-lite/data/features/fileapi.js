\s/g, ':')\n      .replace(/'/g, '\"')\n      .replace(/ }/g, '}')\n      .replace(/url\\((\\\"|\\s)(.+)(\\\"|\\s)\\)(\\s*)/g, (...match: string[]) => `url(\"${match[2]}\")`)\n      .replace(/\\[(.+)=([^\"\\]]+)\\]/g, (...match: string[]) => `[${match[1]}=\"${match[2]}\"]`);\n}\n\nfunction getAttributeMap(element: any): Map<string, string> {\n  const res = new Map<string, string>();\n  const elAttrs = element.attributes;\n  for (let i = 0; i < elAttrs.length; i++) {\n    const attrib = elAttrs.item(i);\n    res.set(attrib.name, attrib.value);\n  }\n  return res;\n}\n\nconst _selfClosingTags = ['br', 'hr', 'input'];\nexport function stringifyElement(el: any /** TODO #9100 */): string {\n  let result = '';\n  if (getDOM().isElementNode(el)) {\n    const tagName = el.tagName.toLowerCase();\n\n    // Opening tag\n    result += `<${tagName}`;\n\n    // Attributes in an ordered way\n    const attributeMap = getAttributeMap(el);\n    const sortedKeys = Array.from(attributeMap.keys()).sort();\n    for (const key of sortedKeys) {\n      const lowerCaseKey = key.toLowerCase();\n      let attValue = attributeMap.get(key);\n\n      if (typeof attValue !== 'string') {\n        result += ` ${lowerCaseKey}`;\n      } else {\n        // Browsers order style rules differently. Order them alphabetically for consistency.\n        if (lowerCaseKey === 'style') {\n          attValue = attValue.split(/; ?/).filter(s => !!s).sort().map(s => `${s}