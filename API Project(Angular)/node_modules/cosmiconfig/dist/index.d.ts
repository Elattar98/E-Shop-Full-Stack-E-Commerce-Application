QgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLy8gVEhJUyBDT0RFIElTIEdFTkVSQVRFRCAtIERPIE5PVCBNT0RJRlkuXG5jb25zdCB1ID0gdW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBwbHVyYWwodmFsOiBudW1iZXIpOiBudW1iZXIge1xuY29uc3QgbiA9IHZhbDtcblxuaWYgKG4gPT09IDEpXG4gICAgcmV0dXJuIDE7XG5yZXR1cm4gNTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW1wiYmV6XCIsW1tcInBhbWlsYXVcIixcInBhbXVueWlcIl0sdSx1XSx1LFtbXCJNXCIsXCJKXCIsXCJIXCIsXCJIXCIsXCJIXCIsXCJXXCIsXCJKXCJdLFtcIk11bFwiLFwiVmlsXCIsXCJIaXZcIixcIkhpZFwiLFwiSGl0XCIsXCJIaWhcIixcIkxlbVwiXSxbXCJwYSBtdWx1bmd1XCIsXCJwYSBzaGFodXZpbHVoYVwiLFwicGEgaGl2aWxpXCIsXCJwYSBoaWRhdHVcIixcInBhIGhpdGF5aVwiLFwicGEgaGloYW51XCIsXCJwYSBzaGFodWxlbWJlbGFcIl0sW1wiTXVsXCIsXCJWaWxcIixcIkhpdlwiLFwiSGlkXCIsXCJIaXRcIixcIkhpaFwiLFwiTGVtXCJdXSx1LFtbXCJIXCIsXCJWXCIsXCJEXCIsXCJUXCIsXCJIXCIsXCJTXCIsXCJTXCIsXCJOXCIsXCJUXCIsXCJLXCIsXCJLXCIsXCJLXCJdLFtcIkh1dFwiLFwiVmlsXCIsXCJEYXRcIixcIlRhaVwiLFwiSGFuXCIsXCJTaXRcIixcIlNhYlwiLFwiTmFuXCIsXCJUaXNcIixcIkt1bVwiLFwiS21qXCIsXCJLbWJcIl0sW1wicGEgbXdlZHppIGd3YSBodXRhbGFcIixcInBhIG13ZWR6aSBnd2Egd3V2aWxpXCIsXCJwYSBtd2VkemkgZ3dhIHd1ZGF0dVwiLFwicGEgbXdlZHppIGd3YSB3dXRhaVwiLFwicGEgbXdlZHppIGd3YSB3dWhhbnVcIixcInBhIG13ZWR6aSBnd2Egc2l0YVwiLFwicGEgbXdlZHppIGd3YSBzYWJhXCIsXCJwYSBtd2VkemkgZ3dhIG5hbmVcIixcInBhIG13ZWR6aSBnd2EgdGlzYVwiLFwicGEgbXdlZHppIGd3YSBrdW1pXCIsXCJwYSBtd2VkemkgZ3dhIGt1bWkgbmEgbW9qYVwiLFwicGEgbXdlZHppIGd3YSBrdW1pIG5hIG1iaWxpXCJdXSx1LFtbXCJLTVwiLFwiQk1cIl0sdSxbXCJLYWJsYSB5YSBNdHdhYVwiLFwiQmFhZGEgeWEgTXR3YWFcIl1dLDEsWzYsMF0sW1wiZGQvTU0veVwiLFwiZCBNTU0geVwiLFwiZCBNTU1NIHlcIixcIkVFRUUsIGQgTU1NTSB5XCJdLFtcIkhIOm1tXCIsXCJISDptbTpzc1wiLFwiSEg6bW06c3MgelwiLFwiSEg6bW06c3Mgenp6elwiXSxbXCJ7MX0gezB9XCIsdSx1LHVdLFtcIi5cIixcIixcIixcIjtcIixcIiVcIixcIitcIixcIi1cIixcIkVcIixcIsOXXCIsXCLigLBcIixcIuKInlwiLFwiTmFOXC