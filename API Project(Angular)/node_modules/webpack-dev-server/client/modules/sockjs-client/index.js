ist_empty);
          type = identifier2;
          modifier = identifier1;
        }
      } else {
        type = _null;
        modifier = type;
      }
      features = A._setArrayType([], type$.JSArray_String);
      do {
        _this.whitespace$0();
        t1.expectChar$1(40);
        features.push("(" + _this.declarationValue$0() + ")");
        t1.expectChar$1(41);
        _this.whitespace$0();
      } while (_this.scanIdentifier$1("and"));
      if (type == null)
        return new A.CssMediaQuery(_null, _null, A.List_List$unmodifiable(features, type$.String));
      else {
        t1 = A.List_List$unmodifiable(features, type$.String);
        return new A.CssMediaQuery(modifier, type, t1);
      }
    }
  };
  A.MediaQueryParser_parse_closure.prototype = {
    call$0() {
      var queries = A._setArrayType([], type$.JSArray_CssMediaQuery),
        t1 = this.$this,
        t2 = t1.scanner;
      do {
        t1.whitespace$0();
        queries.push(t1._mediaQuery$0());
      } while (t2.scanChar$1(44));
      t2.expectDone$0();
      return queries;
    },
    $signature: 103
  };
  A.Parser.prototype = {
    _parseIdentifier$0() {
      return this.wrapSpanFormatException$1(new A.Parser__parseIdentifier_closure(this));
    },
    _isVariableDeclarationLike$0() {
      var _this = this,
        t1 = _this.scanner;
      if (!t1.scanChar$1(36))
        return false;
      if (!_this.lookingAtIdentifier$0())
        return false;
      _this.identifier$0();
      _this.whitespace$0();
      return t1.scanChar$1(58);
    },
    whitespace$0() {
      do
        this.whitespaceWithoutComments$0();
      while (this.scanComment$0());
    },
    whitespaceWithoutComments$0() {
      var t3,
        t1 = this.scanner,
        t2 = t1.string.length;
      while (true) {
        if (t1._string_scanner$_position !== t2) {
          t3 = t1.peekChar$0();
          t3 = t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12;
        } else
          t3 = false;
        if (!t3)
          break;
        t1.readChar$0();
      }
    },
    spaces$0() {
      var t3,
        t1 = this.scanner,
        t2 = t1.string.length;
      while (true) {
        if (t1._string_scanner$_position !== t2) {
          t3 = t1.peekChar$0();
          t3 = t3 === 32 || t3 === 9;
        } else
          t3 = false;
        if (!t3)
          break;
        t1.readChar$0();
      }
    },
    scanComment$0() {
      var next,
        t1 = this.scanner;
      if (t1.peekChar$0() !== 47)
        return false;
      next = t1.peekChar$1(1);
      if (next === 47) {
        this.silentComment$0();
        return true;
      } else if (next === 42) {
        this.loudComment$0();
        return true;
      } else
        return false;
    },
    silentComment$0() {
      var t2, t3,
        t1 = this.scanner;
      t1.expect$1("//");
      t2 = t1.string.length;
      while (true) {
        if (t1._string_scanner$_position !== t2) {
          t3 = t1.peekChar$0();
          t3 = !(t3 === 10 || t3 === 13 || t3 === 12);
        } else
          t3 = false;
        if (!t3)
          break;
        t1.readChar$0();
      }
    },
    loudComment$0() {
      var next,
        t1 = this.scanner;
      t1.expect$1("/*");
      for (; true;) {
        if (t1.readChar$0() !== 42)
          continue;
        do
          next = t1.readChar$0();
        while (next === 42);
        if (next === 47)
          break;
      }
    },
    identifier$2$normalize$unit(normalize, unit) {
      var t2, first, _this = this,
        _s20_ = "Expected identifier.",
        text = new A.StringBuffer(""),
        t1 = _this.scanner;
      if (t1.scanChar$1(45)) {
        t2 = text._contents = "" + A.Primitives_stringFromCharCode(45);
        if (t1.scanChar$1(45)) {
          text._contents = t2 + A.Primitives_stringFromCharCode(45);
          _this._identifierBody$3$normalize$unit(text, normalize, unit);
          t1 = text._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      } else
        t2 = "";
      first = t1.peekChar$0();
      if (first == null)
        t1.error$1(0, _s20_);
      else if (normalize && first === 95) {
        t1.readChar$0();
        text._contents = t2 + A.Primitives_stringFromCharCode(45);
      } else if (first === 95 || A.isAlphabetic0(first) || first >= 128)
        text._contents = t2 + A.Primitives_stringFromCharCode(t1.readChar$0());
      else if (first === 92)
        text._contents = t2 + A.S(_this.escape$1$identifierStart(true));
      else
        t1.error$1(0, _s20_);
      _this._identifierBody$3$normalize$unit(text, normalize, unit);
      t1 = text._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    identifier$0() {
      return this.identifier$2$normalize$unit(false, false);
    },
    identifier$1$normalize(normalize) {
      return this.identifier$2$normalize$unit(normalize, false);
    },
    identifier$1$unit(unit) {
      return this.identifier$2$normalize$unit(false, unit);
    },
    _identifierBody$3$normalize$unit(text, normalize, unit) {
      var t1, next, second, t2;
      for (t1 = this.scanner; true;) {
        next = t1.peekChar$0();
        if (next == null)
          break;
        else if (unit && next === 45) {
          second = t1.peekChar$1(1);
          if (second != null)
            if (second !== 46)
              t2 = second >= 48 && second <= 57;
            else
              t2 = true;
          else
            t2 = false;
          if (t2)
            break;
          text._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
        } else if (normalize && next === 95) {
          t1.readChar$0();
          text._contents += A.Primitives_stringFromCharCode(45);
        } else {
          if (next !== 95) {
            if (!(next >= 97 && next <= 122))
              t2 = next >= 65 && next <= 90;
            else
              t2 = true;
            t2 = t2 || next >= 128;
          } else
            t2 = true;
          if (!t2) {
            t2 = next >= 48 && next <= 57;
            t2 = t2 || next === 45;
          } else
            t2 = true;
          if (t2)
            text._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 92)
            text._contents += A.S(this.escape$0());
          else
            break;
        }
      }
    },
    _identifierBody$1(text) {
      return this._identifierBody$3$normalize$unit(text, false, false);
    },
    string$0() {
      var buffer, next, t2,
        t1 = this.scanner,
        quote = t1.readChar$0();
      if (quote !== 39 && quote !== 34)
        t1.error$2$position(0, "Expected string.", t1._string_scanner$_position - 1);
      buffer = new A.StringBuffer("");
      for (; true;) {
        next = t1.peekChar$0();
        if (next === quote) {
          t1.readChar$0();
          break;
        } else if (next == null || next === 10 || next === 13 || next === 12)
          t1.error$1(0, "Expected " + A.Primitives_stringFromCharCode(quote) + ".");
        else if (next === 92) {
          t2 = t1.peekChar$1(1);
          if (t2 === 10 || t2 === 13 || t2 === 12) {
            t1.readChar$0();
            t1.readChar$0();
          } else
            buffer._contents += A.Primitives_stringFromCharCode(A.consumeEscapedCharacter(t1));
        } else
          buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    naturalNumber$0() {
      var number, t2,
        t1 = this.scanner,
        first = t1.readChar$0();
      if (!A.isDigit(first))
        t1.error$2$position(0, "Expected digit.", t1._string_scanner$_position - 1);
      number = first - 48;
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57))
          break;
        number = number * 10 + (t1.readChar$0() - 48);
      }
      return number;
    },
    declarationValue$1$allowEmpty(allowEmpty) {
      var t1, t2, wroteNewline, next, start, end, t3, url, _this = this,
        buffer = new A.StringBuffer(""),
        brackets = A._setArrayType([], type$.JSArray_int);
      $label0$1:
        for (t1 = _this.scanner, t2 = _this.get$string(), wroteNewline = false; true;) {
          next = t1.peekChar$0();
          switch (next) {
            case 92:
              buffer._contents += A.S(_this.escape$1$identifierStart(true));
              wroteNewline = false;
              break;
            case 34:
            case 39:
              start = t1._string_scanner$_position;
              t2.call$0();
              end = t1._string_scanner$_position;
              buffer._contents += B.JSString_methods.substring$2(t1.string, start, end);
              wroteNewline = false;
              break;
            case 47:
              if (t1.peekChar$1(1) === 42) {
                t3 = _this.get$loudComment();
                start = t1._string_scanner$_position;
                t3.call$0();
                end = t1._string_scanner$_position;
                buffer._contents += B.JSString_methods.substring$2(t1.string, start, end);
              } else
                buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            case 32:
            case 9:
              if (!wroteNewline) {
                t3 = t1.peekChar$1(1);
                t3 = !(t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12);
              } else
                t3 = true;
              if (t3)
                buffer._contents += A.Primitives_stringFromCharCode(32);
              t1.readChar$0();
              break;
            case 10:
            case 13:
            case 12:
              t3 = t1.peekChar$1(-1);
              if (!(t3 === 10 || t3 === 13 || t3 === 12))
                buffer._contents += "\n";
              t1.readChar$0();
              wroteNewline = true;
              break;
            case 40:
            case 123:
            case 91:
              next.toString;
              buffer._contents += A.Primitives_stringFromCharCode(next);
              brackets.push(A.opposite(t1.readChar$0()));
              wroteNewline = false;
              break;
            case 41:
            case 125:
            case 93:
              if (brackets.length === 0)
                break $label0$1;
              next.toString;
              buffer._contents += A.Primitives_stringFromCharCode(next);
              t1.expectChar$1(brackets.pop());
              wroteNewline = false;
              break;
            case 59:
              if (brackets.length === 0)
                break $label0$1;
              buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            case 117:
            case 85:
              url = _this.tryUrl$0();
              if (url != null)
                buffer._contents += url;
              else
                buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            default:
              if (next == null)
                break $label0$1;
              if (_this.lookingAtIdentifier$0())
                buffer._contents += _this.identifier$0();
              else
                buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
          }
        }
      if (brackets.length !== 0)
        t1.expectChar$1(B.JSArray_methods.get$last(brackets));
      if (!allowEmpty && buffer._contents.length === 0)
        t1.error$1(0, "Expected token.");
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    declarationValue$0() {
      return this.declarationValue$1$allowEmpty(false);
    },
    tryUrl$0() {
      var buffer, next, t2, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      if (!_this.scanIdentifier$1("url"))
        return null;
      if (!t1.scanChar$1(40)) {
        t1.set$state(start);
        return null;
      }
      _this.whitespace$0();
      buffer = new A.StringBuffer("");
      buffer._contents = "" + "url(";
      for (; true;) {
        next = t1.peekChar$0();
        if (next == null)
          break;
        else if (next === 92)
          buffer._contents += A.S(_this.escape$0());
        else {
          if (next !== 37)
            if (next !== 38)
              if (next !== 35)
                t2 = next >= 42 && next <= 126 || next >= 128;
              else
                t2 = true;
            else
              t2 = true;
          else
            t2 = true;
          if (t2)
            buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 32 || next === 9 || next === 10 || next === 13 || next === 12) {
            _this.whitespace$0();
            if (t1.peekChar$0() !== 41)
              break;
          } else if (next === 41) {
            t2 = buffer._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            return t2.charCodeAt(0) == 0 ? t2 : t2;
          } else
            break;
        }
      }
      t1.set$state(start);
      return null;
    },
    variableName$0() {
      this.scanner.expectChar$1(36);
      return this.identifier$1$normalize(true);
    },
    escape$1$identifierStart(identifierStart) {
      var value, first, i, next, t2, exception,
        _s25_ = "Expected escape sequence.",
        t1 = this.scanner,
        start = t1._string_scanner$_position;
      t1.expectChar$1(92);
      value = 0;
      first = t1.peekChar$0();
      if (first == null)
        t1.error$1(0, _s25_);
      else if (first === 10 || first === 13 || first === 12)
        t1.error$1(0, _s25_);
      else if (A.isHex(first)) {
        for (i = 0; i < 6; ++i) {
          next = t1.peekChar$0();
          if (next == null || !A.isHex(next))
            break;
          value *= 16;
          value += A.asHex(t1.readChar$0());
        }
        this.scanCharIf$1(A.character__isWhitespace$closure());
      } else
        value = t1.readChar$0();
      if (identifierStart) {
        t2 = value;
        t2 = t2 === 95 || A.isAlphabetic0(t2) || t2 >= 128;
      } else {
        t2 = value;
        t2 = t2 === 95 || A.isAlphabetic0(t2) || t2 >= 128 || A.isDigit(t2) || t2 === 45;
      }
      if (t2)
        try {
          t2 = A.Primitives_stringFromCharCode(value);
          return t2;
        } catch (exception) {
          if (type$.RangeError._is(A.unwrapException(exception)))
            t1.error$3$length$position(0, "Invalid Unicode code point.", t1._string_scanner$_position - start, start);
          else
            throw exception;
        }
      else {
        if (!(value <= 31))
          if (!J.$eq$(value, 127))
            t1 = identifierStart && A.isDigit(value);
          else
            t1 = true;
        else
          t1 = true;
        if (t1) {
          t1 = "" + A.Primitives_stringFromCharCode(92);
          if (value > 15)
            t1 += A.Primitives_stringFromCharCode(A.hexCharFor(B.JSNumber_methods._shrOtherPositive$1(value, 4)));
          t1 = t1 + A.Primitives_stringFromCharCode(A.hexCharFor(value & 15)) + A.Primitives_stringFromCharCode(32);
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else
          return A.String_String$fromCharCodes(A._setArrayType([92, value], type$.JSArray_int), 0, null);
      }
    },
    escape$0() {
      return this.escape$1$identifierStart(false);
    },
    scanCharIf$1(condition) {
      var t1 = this.scanner;
      if (!condition.call$1(t1.peekChar$0()))
        return false;
      t1.readChar$0();
      return true;
    },
    scanIdentChar$2$caseSensitive(char, caseSensitive) {
      var t3,
        t1 = new A.Parser_scanIdentChar_matches(caseSensitive, char),
        t2 = this.scanner,
        next = t2.peekChar$0();
      if (next != null && t1.call$1(next)) {
        t2.readChar$0();
        return true;
      } else if (next === 92) {
        t3 = t2._string_scanner$_position;
        if (t1.call$1(A.consumeEscapedCharacter(t2)))
          return true;
        t2.set$state(new A._SpanScannerState(t2, t3));
      }
      return false;
    },
    scanIdentChar$1(char) {
      return this.scanIdentChar$2$caseSensitive(char, false);
    },
    expectIdentChar$1(letter) {
      var t1;
      if (this.scanIdentChar$2$caseSensitive(letter, false))
        return;
      t1 = this.scanner;
      t1.error$2$position(0, 'Expected "' + A.Primitives_stringFromCharCode(letter) + '".', t1._string_scanner$_position);
    },
    lookingAtIdentifier$1($forward) {
      var t1, first, second;
      if ($forward == null)
        $forward = 0;
      t1 = this.scanner;
      first = t1.peekChar$1($forward);
      if (first == null)
        return false;
      if (first === 95 || A.isAlphabetic0(first) || first >= 128 || first === 92)
        return true;
      if (first !== 45)
        return false;
      second = t1.peekChar$1($forward + 1);
      if (second == null)
        return false;
      return second === 95 || A.isAlphabetic0(second) || second >= 128 || second === 92 || second === 45;
    },
    lookingAtIdentifier$0() {
      return this.lookingAtIdentifier$1(null);
    },
    lookingAtIdentifierBody$0() {
      var t1,
        next = this.scanner.peekChar$0();
      if (next != null)
        t1 = next === 95 || A.isAlphabetic0(next) || next >= 128 || A.isDigit(next) || next === 45 || next === 92;
      else
        t1 = false;
      return t1;
    },
    scanIdentifier$2$caseSensitive(text, caseSensitive) {
      var t1, start, t2, t3, t4, _this = this;
      if (!_this.lookingAtIdentifier$0())
        return false;
      t1 = _this.scanner;
      start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      for (t2 = new A.CodeUnits(text), t2 = new A.ListIterator(t2, t2.get$length(t2)), t3 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t4 = t2.__internal$_current;
        if (_this.scanIdentChar$2$caseSensitive(t4 == null ? t3._as(t4) : t4, caseSensitive))
          continue;
        if (start._scanner !== t1)
          A.throwExpression(A.ArgumentError$(string$.The_gi, null));
        t2 = start.position;
        if ((t2 === 0 ? 1 / t2 < 0 : t2 < 0) || t2 > t1.string.length)
          A.throwExpression(A.ArgumentError$("Invalid position " + t2, null));
        t1._string_scanner$_position = t2;
        t1._lastMatch = null;
        return false;
      }
      if (!_this.lookingAtIdentifierBody$0())
        return true;
      t1.set$state(start);
      return false;
    },
    scanIdentifier$1(text) {
      return this.scanIdentifier$2$caseSensitive(text, false);
    },
    expectIdentifier$2$name(text, $name) {
      var t1, start, t2, t3, t4, t5, t6;
      if ($name == null)
        $name = '"' + text + '"';
      t1 = this.scanner;
      start = t1._string_scanner$_position;
      for (t2 = new A.CodeUnits(text), t2 = new A.ListIterator(t2, t2.get$length(t2)), t3 = "Expected " + $name, t4 = t3 + ".", t5 = A._instanceType(t2)._precomputed1; t2.moveNext$0();) {
        t6 = t2.__internal$_current;
        if (this.scanIdentChar$2$caseSensitive(t6 == null ? t5._as(t6) : t6, false))
          continue;
        t1.error$2$position(0, t4, start);
      }
      if (!this.lookingAtIdentifierBody$0())
        return;
      t1.error$2$position(0, t3, start);
    },
    expectIdentifier$1(text) {
      return this.expectIdentifier$2$name(text, null);
    },
    rawText$1(consumer) {
      var t1 = this.scanner,
        start = t1._string_scanner$_position;
      consumer.call$0();
      return t1.substring$1(0, start);
    },
    error$3(_, message, span, trace) {
      var exception = new A.StringScannerException(this.scanner.string, message, span);
      if (trace == null)
        throw A.wrapException(exception);
      else
        A.throwWithTrace(exception, trace);
    },
    error$2($receiver, message, span) {
      return this.error$3($receiver, message, span, null);
    },
    withErrorMessage$1$2(message, callback) {
      var error, stackTrace, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.SourceSpanFormatException._is(t1)) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          t1 = J.get$span$z(error);
          A.throwWithTrace(new A.SourceSpanFormatException(error.get$source(), message, t1), stackTrace);
        } else
          throw exception;
      }
    },
    withErrorMessage$2(message, callback) {
      return this.withErrorMessage$1$2(message, callback, type$.dynamic);
    },
    wrapSpanFormatException$1$1(callback) {
      var error, stackTrace, span, startPosition, t1, exception;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.SourceSpanFormatException._is(t1)) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          span = J.get$span$z(error);
          if (A.startsWithIgnoreCase(error._span_exception$_message, "expected")) {
            t1 = span;
            t1 = t1._end - t1._file$_start === 0;
          } else
            t1 = false;
          if (t1) {
            t1 = span;
            startPosition = this._firstNewlineBefore$1(A.FileLocation$_(t1.file, t1._file$_start).offset);
            t1 = span;
            if (!J.$eq$(startPosition, A.FileLocation$_(t1.file, t1._file$_start).offset))
              span = span.file.span$2(0, startPosition, startPosition);
          }
          A.throwWithTrace(new A.SassFormatException(error._span_exception$_message, span), stackTrace);
        } else
          throw exception;
      }
    },
    wrapSpanFormatException$1(callback) {
      return this.wrapSpanFormatException$1$1(callback, type$.dynamic);
    },
    _firstNewlineBefore$1(position) {
      var t1, lastNewline, codeUnit,
        index = position - 1;
      for (t1 = this.scanner.string, lastNewline = null; index >= 0;) {
        codeUnit = B.JSString_methods.codeUnitAt$1(t1, index);
        if (!(codeUnit === 32 || codeUnit === 9 || codeUnit === 10 || codeUnit === 13 || codeUnit === 12))
          return lastNewline == null ? position : lastNewline;
        if (codeUnit === 10 || codeUnit === 13 || codeUnit === 12)
          lastNewline = index;
        --index;
      }
      return position;
    }
  };
  A.Parser__parseIdentifier_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        result = t1.identifier$0();
      t1.scanner.expectDone$0();
      return result;
    },
    $signature: 29
  };
  A.Parser_scanIdentChar_matches.prototype = {
    call$1(actual) {
      var t1 = this.char;
      return this.caseSensitive ? actual === t1 : A.characterEqualsIgnoreCase(t1, actual);
    },
    $signature: 57
  };
  A.SassParser.prototype = {
    get$currentIndentation() {
      return this._currentIndentation;
    },
    get$indented() {
      return true;
    },
    styleRuleSelector$0() {
      var t4,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new A.StringBuffer(""),
        buffer = new A.InterpolationBuffer(t3, A._setArrayType([], type$.JSArray_Object));
      do {
        buffer.addInterpolation$1(this.almostAnyValue$1$omitComments(true));
        t4 = t3._contents += A.Primitives_stringFromCharCode(10);
      } while (B.JSString_methods.endsWith$1(B.JSString_methods.trimRight$0(t4.charCodeAt(0) == 0 ? t4 : t4), ",") && this.scanCharIf$1(A.character__isNewline$closure()));
      return buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    expectStatementSeparator$1($name) {
      var t1, _this = this;
      if (!_this.atEndOfStatement$0())
        _this._expectNewline$0();
      if (_this._peekIndentation$0() <= _this._currentIndentation)
        return;
      t1 = $name == null ? "here" : "beneath a " + $name;
      _this.scanner.error$2$position(0, "Nothing may be indented " + t1 + ".", _this._nextIndentationEnd.position);
    },
    expectStatementSeparator$0() {
      return this.expectStatementSeparator$1(null);
    },
    atEndOfStatement$0() {
      var next = this.scanner.peekChar$0();
      return next == null || next === 10 || next === 13 || next === 12;
    },
    lookingAtChildren$0() {
      return this.atEndOfStatement$0() && this._peekIndentation$0() > this._currentIndentation;
    },
    importArgument$0() {
      var url, span, innerError, stackTrace, start, next, t2, exception, _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 117:
        case 85:
          start = new A._SpanScannerState(t1, t1._string_scanner$_position);
          if (_this.scanIdentifier$1("url"))
            if (t1.scanChar$1(40)) {
              t1.set$state(start);
              return _this.super$StylesheetParser$importArgument();
            } else
              t1.set$state(start);
          break;
        case 39:
        case 34:
          return _this.super$StylesheetParser$importArgument();
      }
      start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      next = t1.peekChar$0();
      while (true) {
        if (next != null)
          if (next !== 44)
            if (next !== 59)
              t2 = !(next === 10 || next === 13 || next === 12);
            else
              t2 = false;
          else
            t2 = false;
        else
          t2 = false;
        if (!t2)
          break;
        t1.readChar$0();
        next = t1.peekChar$0();
      }
      url = t1.substring$1(0, start.position);
      span = t1.spanFrom$1(start);
      if (_this.isPlainImportUrl$1(url))
        return new A.StaticImport(A.Interpolation$(A._setArrayType([A.serializeValue(new A.SassString(url, true), true, true)], type$.JSArray_Object), span), null, span);
      else
        try {
          t1 = _this.parseImportUrl$1(url);
          return new A.DynamicImport(t1, span);
        } catch (exception) {
          t1 = A.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            innerError = t1;
            stackTrace = A.getTraceFromException(exception);
            _this.error$3(0, "Invalid URL: " + J.get$message$x(innerError), span, stackTrace);
          } else
            throw exception;
        }
    },
    scanElse$1(ifIndentation) {
      var t1, t2, startIndentation, startNextIndentation, startNextIndentationEnd, _this = this;
      if (_this._peekIndentation$0() !== ifIndentation)
        return false;
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      startIndentation = _this._currentIndentation;
      startNextIndentation = _this._nextIndentation;
      startNextIndentationEnd = _this._nextIndentationEnd;
      _this._readIndentation$0();
      if (t1.scanChar$1(64) && _this.scanIdentifier$1("else"))
        return true;
      t1.set$state(new A._SpanScannerState(t1, t2));
      _this._currentIndentation = startIndentation;
      _this._nextIndentation = startNextIndentation;
      _this._nextIndentationEnd = startNextIndentationEnd;
      return false;
    },
    children$1(_, child) {
      var children = A._setArrayType([], type$.JSArray_Statement);
      this._whileIndentedLower$1(new A.SassParser_children_closure(this, child, children));
      return children;
    },
    statements$1(statement) {
      var statements, t2, child,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first === 9 || first === 32)
        t1.error$3$length$position(0, string$.Indent, t1._string_scanner$_position, 0);
      statements = A._setArrayType([], type$.JSArray_Statement);
      for (t2 = t1.string.length; t1._string_scanner$_position !== t2;) {
        child = this._child$1(statement);
        if (child != null)
          statements.push(child);
        this._readIndentation$0();
      }
      return statements;
    },
    _child$1(child) {
      var _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 13:
        case 10:
        case 12:
          return null;
        case 36:
          return _this.variableDeclarationWithoutNamespace$0();
        case 47:
          switch (t1.peekChar$1(1)) {
            case 47:
              return _this._silentComment$0();
            case 42:
              return _this._loudComment$0();
            default:
              return child.call$0();
          }
        default:
          return child.call$0();
      }
    },
    _silentComment$0() {
      var buffer, parentIndentation, t3, t4, t5, commentPrefix, i, t6, i0, t7, _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1("//");
      buffer = new A.StringBuffer("");
      parentIndentation = _this._currentIndentation;
      t3 = t1.string.length;
      t4 = 1 + parentIndentation;
      t5 = 2 + parentIndentation;
      $label0$0:
        do {
          commentPrefix = t1.scanChar$1(47) ? "///" : "//";
          for (i = commentPrefix.length; true;) {
            t6 = buffer._contents += commentPrefix;
            for (i0 = i; i0 < _this._currentIndentation - parentIndentation; ++i0) {
              t6 += A.Primitives_stringFromCharCode(32);
              buffer._contents = t6;
            }
            while (true) {
              if (t1._string_scanner$_position !== t3) {
                t7 = t1.peekChar$0();
                t7 = !(t7 === 10 || t7 === 13 || t7 === 12);
              } else
                t7 = false;
              if (!t7)
                break;
              t6 += A.Primitives_stringFromCharCode(t1.readChar$0());
              buffer._contents = t6;
            }
            buffer._contents = t6 + "\n";
            if (_this._peekIndentation$0() < parentIndentation)
              break $label0$0;
            if (_this._peekIndentation$0() === parentIndentation) {
              if (t1.peekChar$1(t4) === 47 && t1.peekChar$1(t5) === 47)
                _this._readIndentation$0();
              break;
            }
            _this._readIndentation$0();
          }
        } while (t1.scan$1("//"));
      t3 = buffer._contents;
      return _this.lastSilentComment = new A.SilentComment(t3.charCodeAt(0) == 0 ? t3 : t3, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _loudComment$0() {
      var t3, t4, buffer, parentIndentation, t5, t6, first, beginningOfComment, t7, end, i, _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1("/*");
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      t3._contents = "" + "/*";
      parentIndentation = _this._currentIndentation;
      for (t5 = t1.string, t6 = t5.length, first = true; true; first = false) {
        if (first) {
          beginningOfComment = t1._string_scanner$_position;
          _this.spaces$0();
          t7 = t1.peekChar$0();
          if (t7 === 10 || t7 === 13 || t7 === 12) {
            _this._readIndentation$0();
            t7 = t3._contents += A.Primitives_stringFromCharCode(32);
          } else {
            end = t1._string_scanner$_position;
            t7 = t3._contents += B.JSString_methods.substring$2(t5, beginningOfComment, end);
          }
        } else {
          t7 = t3._contents += "\n";
          t7 += " * ";
          t3._contents = t7;
        }
        for (i = 3; i < _this._currentIndentation - parentIndentation; ++i) {
          t7 += A.Primitives_stringFromCharCode(32);
          t3._contents = t7;
        }
        $label0$1:
          for (; t1._string_scanner$_position !== t6;)
            switch (t1.peekChar$0()) {
              case 10:
              case 13:
              case 12:
                break $label0$1;
              case 35:
                if (t1.peekChar$1(1) === 123) {
                  t7 = _this.singleInterpolation$0();
                  buffer._flushText$0();
                  t4.push(t7);
                } else
                  t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
                break;
              default:
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
                break;
            }
        if (_this._peekIndentation$0() <= parentIndentation)
          break;
        for (; _this._lookingAtDoubleNewline$0();) {
          _this._expectNewline$0();
          t7 = t3._contents += "\n";
          t3._contents = t7 + " *";
        }
        _this._readIndentation$0();
      }
      t4 = t3._contents;
      if (!B.JSString_methods.endsWith$1(B.JSString_methods.trimRight$0(t4.charCodeAt(0) == 0 ? t4 : t4), "*/"))
        t3._contents += " */";
      return new A.LoudComment(buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2))));
    },
    whitespaceWithoutComments$0() {
      var t1, t2, next;
      for (t1 = this.scanner, t2 = t1.string.length; t1._string_scanner$_position !== t2;) {
        next = t1.peekChar$0();
        if (next !== 9 && next !== 32)
          break;
        t1.readChar$0();
      }
    },
    loudComment$0() {
      var next,
        t1 = this.scanner;
      t1.expect$1("/*");
      for (; true;) {
        next = t1.readChar$0();
        if (next === 10 || next === 13 || next === 12)
          t1.error$1(0, "expected */.");
        if (next !== 42)
          continue;
        do
          next = t1.readChar$0();
        while (next === 42);
        if (next === 47)
          break;
      }
    },
    _expectNewline$0() {
      var t1 = this.scanner;
      switch (t1.peekChar$0()) {
        case 59:
          t1.error$1(0, string$.semico);
          break;
        case 13:
          t1.readChar$0();
          if (t1.peekChar$0() === 10)
            t1.readChar$0();
          return;
        case 10:
        case 12:
          t1.readChar$0();
          return;
        default:
          t1.error$1(0, "expected newline.");
      }
    },
    _lookingAtDoubleNewline$0() {
      var nextChar,
        t1 = this.scanner;
      switch (t1.peekChar$0()) {
        case 13:
          nextChar = t1.peekChar$1(1);
          if (nextChar === 10) {
            t1 = t1.peekChar$1(2);
            return t1 === 10 || t1 === 13 || t1 === 12;
          }
          return nextChar === 13 || nextChar === 12;
        case 10:
        case 12:
          t1 = t1.peekChar$1(1);
          return t1 === 10 || t1 === 13 || t1 === 12;
        default:
          return false;
      }
    },
    _whileIndentedLower$1(body) {
      var t1, t2, childIndentation, indentation, t3, t4, _this = this,
        parentIndentation = _this._currentIndentation;
      for (t1 = _this.scanner, t2 = t1._sourceFile, childIndentation = null; _this._peekIndentation$0() > parentIndentation;) {
        indentation = _this._readIndentation$0();
        if (childIndentation == null)
          childIndentation = indentation;
        if (childIndentation !== indentation) {
          t3 = t1._string_scanner$_position;
          t4 = t2.getColumn$1(t3);
          t1.error$3$length$position(0, "Inconsistent indentation, expected " + childIndentation + " spaces.", t2.getColumn$1(t1._string_scanner$_position), t3 - t4);
        }
        body.call$0();
      }
    },
    _readIndentation$0() {
      var t1, _this = this,
        currentIndentation = _this._nextIndentation;
      if (currentIndentation == null)
        currentIndentation = _this._nextIndentation = _this._peekIndentation$0();
      _this._currentIndentation = currentIndentation;
      t1 = _this._nextIndentationEnd;
      t1.toString;
      _this.scanner.set$state(t1);
      _this._nextIndentationEnd = _this._nextIndentation = null;
      return currentIndentation;
    },
    _peekIndentation$0() {
      var t1, t2, t3, start, containsTab, containsSpace, nextIndentation, next, t4, _this = this,
        cached = _this._nextIndentation;
      if (cached != null)
        return cached;
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      t3 = t1.string.length;
      if (t2 === t3) {
        _this._nextIndentation = 0;
        _this._nextIndentationEnd = new A._SpanScannerState(t1, t2);
        return 0;
      }
      start = new A._SpanScannerState(t1, t2);
      if (!_this.scanCharIf$1(A.character__isNewline$closure()))
        t1.error$2$position(0, "Expected newline.", t1._string_scanner$_position);
      containsTab = A._Cell$();
      containsSpace = A._Cell$();
      nextIndentation = A._Cell$();
      t2 = nextIndentation.__late_helper$_name;
      do {
        containsSpace._value = containsTab._value = false;
        nextIndentation._value = 0;
        for (; true;) {
          next = t1.peekChar$0();
          if (next === 32)
            containsSpace._value = true;
          else if (next === 9)
            containsTab._value = true;
          else
            break;
          t4 = nextIndentation._value;
          if (t4 === nextIndentation)
            A.throwExpression(A.LateError$localNI(t2));
          nextIndentation._value = t4 + 1;
          t1.readChar$0();
        }
        t4 = t1._string_scanner$_position;
        if (t4 === t3) {
          _this._nextIndentation = 0;
          _this._nextIndentationEnd = new A._SpanScannerState(t1, t4);
          t1.set$state(start);
          return 0;
        }
      } while (_this.scanCharIf$1(A.character__isNewline$closure()));
      t2 = containsTab._readLocal$0();
      t3 = containsSpace._readLocal$0();
      if (t2) {
        if (t3) {
          t2 = t1._string_scanner$_position;
          t3 = t1._sourceFile;
          t4 = t3.getColumn$1(t2);
          t1.error$3$length$position(0, "Tabs and spaces may not be mixed.", t3.getColumn$1(t1._string_scanner$_position), t2 - t4);
        } else if (_this._spaces === true) {
          t2 = t1._string_scanner$_position;
          t3 = t1._sourceFile;
          t4 = t3.getColumn$1(t2);
          t1.error$3$length$position(0, "Expected spaces, was tabs.", t3.getColumn$1(t1._string_scanner$_position), t2 - t4);
        }
      } else if (t3 && _this._spaces === false) {
        t2 = t1._string_scanner$_position;
        t3 = t1._sourceFile;
        t4 = t3.getColumn$1(t2);
        t1.error$3$length$position(0, "Expected tabs, was spaces.", t3.getColumn$1(t1._string_scanner$_position), t2 - t4);
      }
      _this._nextIndentation = nextIndentation._readLocal$0();
      if (nextIndentation._readLocal$0() > 0)
        if (_this._spaces == null)
          _this._spaces = containsSpace._readLocal$0();
      _this._nextIndentationEnd = new A._SpanScannerState(t1, t1._string_scanner$_position);
      t1.set$state(start);
      return nextIndentation._readLocal$0();
    }
  };
  A.SassParser_children_closure.prototype = {
    call$0() {
      var parsedChild = this.$this._child$1(this.child);
      if (parsedChild != null)
        this.children.push(parsedChild);
    },
    $signature: 0
  };
  A.ScssParser.prototype = {
    get$indented() {
      return false;
    },
    get$currentIndentation() {
      return 0;
    },
    styleRuleSelector$0() {
      return this.almostAnyValue$0();
    },
    expectStatementSeparator$1($name) {
      var t1, next;
      this.whitespaceWithoutComments$0();
      t1 = this.scanner;
      if (t1._string_scanner$_position === t1.string.length)
        return;
      next = t1.peekChar$0();
      if (next === 59 || next === 125)
        return;
      t1.expectChar$1(59);
    },
    expectStatementSeparator$0() {
      return this.expectStatementSeparator$1(null);
    },
    atEndOfStatement$0() {
      var next = this.scanner.peekChar$0();
      return next == null || next === 59 || next === 125 || next === 123;
    },
    lookingAtChildren$0() {
      return this.scanner.peekChar$0() === 123;
    },
    scanElse$1(ifIndentation) {
      var t3, _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      _this.whitespace$0();
      t3 = t1._string_scanner$_position;
      if (t1.scanChar$1(64)) {
        if (_this.scanIdentifier$2$caseSensitive("else", true))
          return true;
        if (_this.scanIdentifier$2$caseSensitive("elseif", true)) {
          _this.logger.warn$3$deprecation$span(0, string$.x40elsei, true, t1.spanFrom$1(new A._SpanScannerState(t1, t3)));
          t1.set$position(t1._string_scanner$_position - 2);
          return true;
        }
      }
      t1.set$state(new A._SpanScannerState(t1, t2));
      return false;
    },
    children$1(_, child) {
      var children, _this = this,
        t1 = _this.scanner;
      t1.expectChar$1(123);
      _this.whitespaceWithoutComments$0();
      children = A._setArrayType([], type$.JSArray_Statement);
      for (; true;)
        switch (t1.peekChar$0()) {
          case 36:
            children.push(_this.variableDeclarationWithoutNamespace$0());
            break;
          case 47:
            switch (t1.peekChar$1(1)) {
              case 47:
                children.push(_this._scss$_silentComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              case 42:
                children.push(_this._scss$_loudComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              default:
                children.push(child.call$0());
                break;
            }
            break;
          case 59:
            t1.readChar$0();
            _this.whitespaceWithoutComments$0();
            break;
          case 125:
            t1.expectChar$1(125);
            return children;
          default:
            children.push(child.call$0());
            break;
        }
    },
    statements$1(statement) {
      var t1, t2, child, _this = this,
        statements = A._setArrayType([], type$.JSArray_Statement);
      _this.whitespaceWithoutComments$0();
      for (t1 = _this.scanner, t2 = t1.string.length; t1._string_scanner$_position !== t2;)
        switch (t1.peekChar$0()) {
          case 36:
            statements.push(_this.variableDeclarationWithoutNamespace$0());
            break;
          case 47:
            switch (t1.peekChar$1(1)) {
              case 47:
                statements.push(_this._scss$_silentComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              case 42:
                statements.push(_this._scss$_loudComment$0());
                _this.whitespaceWithoutComments$0();
                break;
              default:
                child = statement.call$0();
                if (child != null)
                  statements.push(child);
                break;
            }
            break;
          case 59:
            t1.readChar$0();
            _this.whitespaceWithoutComments$0();
            break;
          default:
            child = statement.call$0();
            if (child != null)
              statements.push(child);
            break;
        }
      return statements;
    },
    _scss$_silentComment$0() {
      var t2, t3, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expect$1("//");
      t2 = t1.string.length;
      do {
        while (true) {
          if (t1._string_scanner$_position !== t2) {
            t3 = t1.readChar$0();
            t3 = !(t3 === 10 || t3 === 13 || t3 === 12);
          } else
            t3 = false;
          if (!t3)
            break;
        }
        if (t1._string_scanner$_position === t2)
          break;
        _this.whitespaceWithoutComments$0();
      } while (t1.scan$1("//"));
      if (_this.get$plainCss())
        _this.error$2(0, string$.Silent, t1.spanFrom$1(start));
      return _this.lastSilentComment = new A.SilentComment(t1.substring$1(0, start.position), t1.spanFrom$1(start));
    },
    _scss$_loudComment$0() {
      var t3, t4, buffer, t5, endPosition, t6, result,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1("/*");
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      t3._contents = "" + "/*";
      for (; true;)
        switch (t1.peekChar$0()) {
          case 35:
            if (t1.peekChar$1(1) === 123) {
              t5 = this.singleInterpolation$0();
              buffer._flushText$0();
              t4.push(t5);
            } else
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            break;
          case 42:
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            if (t1.peekChar$0() !== 47)
              break;
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            endPosition = t1._string_scanner$_position;
            t5 = t1._sourceFile;
            t6 = new A._SpanScannerState(t1, t2).position;
            t1 = new A._FileSpan(t5, t6, endPosition);
            t1._FileSpan$3(t5, t6, endPosition);
            t6 = type$.Object;
            t5 = A.List_List$of(t4, true, t6);
            t2 = t3._contents;
            if (t2.length !== 0)
              t5.push(t2.charCodeAt(0) == 0 ? t2 : t2);
            result = A.List_List$from(t5, false, t6);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t2 = new A.Interpolation(result, t1);
            t2.Interpolation$2(t5, t1);
            return new A.LoudComment(t2);
          case 13:
            t1.readChar$0();
            if (t1.peekChar$0() !== 10)
              t3._contents += A.Primitives_stringFromCharCode(10);
            break;
          case 12:
            t1.readChar$0();
            t3._contents += A.Primitives_stringFromCharCode(10);
            break;
          default:
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            break;
        }
    }
  };
  A.SelectorParser.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(new A.SelectorParser_parse_closure(this));
    },
    parseCompoundSelector$0() {
      return this.wrapSpanFormatException$1(new A.SelectorParser_parseCompoundSelector_closure(this));
    },
    _selectorList$0() {
      var t3, t4, lineBreak, _this = this,
        t1 = _this.scanner,
        t2 = t1._sourceFile,
        previousLine = t2.getLine$1(t1._string_scanner$_position),
        components = A._setArrayType([_this._complexSelector$0()], type$.JSArray_ComplexSelector);
      _this.whitespace$0();
      for (t3 = t1.string.length; t1.scanChar$1(44);) {
        _this.whitespace$0();
        if (t1.peekChar$0() === 44)
          continue;
        t4 = t1._string_scanner$_position;
        if (t4 === t3)
          break;
        lineBreak = t2.getLine$1(t4) !== previousLine;
        if (lineBreak)
          previousLine = t2.getLine$1(t1._string_scanner$_position);
        components.push(_this._complexSelector$1$lineBreak(lineBreak));
      }
      return A.SelectorList$(components);
    },
    _complexSelector$1$lineBreak(lineBreak) {
      var t1, next, _this = this,
        _s58_ = string$.x22x26__ma,
        components = A._setArrayType([], type$.JSArray_ComplexSelectorComponent);
      $label0$1:
        for (t1 = _this.scanner; true;) {
          _this.whitespace$0();
          next = t1.peekChar$0();
          switch (next) {
            case 43:
              t1.readChar$0();
              components.push(B.Combinator_uzg);
              break;
            case 62:
              t1.readChar$0();
              components.push(B.Combinator_sgq);
              break;
            case 126:
              t1.readChar$0();
              components.push(B.Combinator_CzM);
              break;
            case 91:
            case 46:
            case 35:
            case 37:
            case 58:
            case 38:
            case 42:
            case 124:
              components.push(_this._compoundSelector$0());
              if (t1.peekChar$0() === 38)
                t1.error$1(0, _s58_);
              break;
            default:
              if (next == null || !_this.lookingAtIdentifier$0())
                break $label0$1;
              components.push(_this._compoundSelector$0());
              if (t1.peekChar$0() === 38)
                t1.error$1(0, _s58_);
              break;
          }
        }
      if (components.length === 0)
        t1.error$1(0, "expected selector.");
      return A.ComplexSelector$(components, lineBreak);
    },
    _complexSelector$0() {
      return this._complexSelector$1$lineBreak(false);
    },
    _compoundSelector$0() {
      var t2,
        components = A._setArrayType([this._simpleSelector$0()], type$.JSArray_SimpleSelector),
        t1 = this.scanner;
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 === 42 || t2 === 91 || t2 === 46 || t2 === 35 || t2 === 37 || t2 === 58))
          break;
        components.push(this._simpleSelector$1$allowParent(false));
      }
      return A.CompoundSelector$(components);
    },
    _simpleSelector$1$allowParent(allowParent) {
      var $name, text, t2, suffix, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      if (allowParent == null)
        allowParent = _this._allowParent;
      switch (t1.peekChar$0()) {
        case 91:
          return _this._attributeSelector$0();
        case 46:
          t1.expectChar$1(46);
          return new A.ClassSelector(_this.identifier$0());
        case 35:
          t1.expectChar$1(35);
          return new A.IDSelector(_this.identifier$0());
        case 37:
          t1.expectChar$1(37);
          $name = _this.identifier$0();
          if (!_this._allowPlaceholder)
            _this.error$2(0, string$.Placeh, t1.spanFrom$1(start));
          return new A.PlaceholderSelector($name);
        case 58:
          return _this._pseudoSelector$0();
        case 38:
          t1.expectChar$1(38);
          if (_this.lookingAtIdentifierBody$0()) {
            text = new A.StringBuffer("");
            _this._identifierBody$1(text);
            if (text._contents.length === 0)
              t1.error$1(0, "Expected identifier body.");
            t2 = text._contents;
            suffix = t2.charCodeAt(0) == 0 ? t2 : t2;
          } else
            suffix = null;
          if (!allowParent)
            _this.error$2(0, "Parent selectors aren't allowed here.", t1.spanFrom$1(start));
          return new A.ParentSelector(suffix);
        default:
          return _this._typeOrUniversalSelector$0();
      }
    },
    _simpleSelector$0() {
      return this._simpleSelector$1$allowParent(null);
    },
    _attributeSelector$0() {
      var $name, operator, next, value, modifier, _this = this, _null = null,
        t1 = _this.scanner;
      t1.expectChar$1(91);
      _this.whitespace$0();
      $name = _this._attributeName$0();
      _this.whitespace$0();
      if (t1.scanChar$1(93))
        return new A.AttributeSelector($name, _null, _null, _null);
      operator = _this._attributeOperator$0();
      _this.whitespace$0();
      next = t1.peekChar$0();
      value = next === 39 || next === 34 ? _this.string$0() : _this.identifier$0();
      _this.whitespace$0();
      next = t1.peekChar$0();
      modifier = next != null && A.isAlphabetic0(next) ? A.Primitives_stringFromCharCode(t1.readChar$0()) : _null;
      t1.expectChar$1(93);
      return new A.AttributeSelector($name, operator, value, modifier);
    },
    _attributeName$0() {
      var nameOrNamespace, _this = this,
        t1 = _this.scanner;
      if (t1.scanChar$1(42)) {
        t1.expectChar$1(124);
        return new A.QualifiedName(_this.identifier$0(), "*");
      }
      if (t1.scanChar$1(124))
        return new A.QualifiedName(_this.identifier$0(), "");
      nameOrNamespace = _this.identifier$0();
      if (t1.peekChar$0() !== 124 || t1.peekChar$1(1) === 61)
        return new A.QualifiedName(nameOrNamespace, null);
      t1.readChar$0();
      return new A.QualifiedName(_this.identifier$0(), nameOrNamespace);
    },
    _attributeOperator$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      switch (t1.readChar$0()) {
        case 61:
          return B.AttributeOperator_sEs;
        case 126:
          t1.expectChar$1(61);
          return B.AttributeOperator_fz1;
        case 124:
          t1.expectChar$1(61);
          return B.AttributeOperator_AuK;
        case 94:
          t1.expectChar$1(61);
          return B.AttributeOperator_4L5;
        case 36:
          t1.expectChar$1(61);
          return B.AttributeOperator_mOX;
        case 42:
          t1.expectChar$1(61);
          return B.AttributeOperator_gqZ;
        default:
          t1.error$2$position(0, 'Expected "]".', t2);
      }
    },
    _pseudoSelector$0() {
      var element, $name, unvendored, selector, argument, t2, _this = this, _null = null,
        t1 = _this.scanner;
      t1.expectChar$1(58);
      element = t1.scanChar$1(58);
      $name = _this.identifier$0();
      if (!t1.scanChar$1(40))
        return A.PseudoSelector$($name, _null, element, _null);
      _this.whitespace$0();
      unvendored = A.unvendor($name);
      if (element)
        if ($._selectorPseudoElements.contains$1(0, unvendored)) {
          selector = _this._selectorList$0();
          argument = _null;
        } else {
          argument = _this.declarationValue$1$allowEmpty(true);
          selector = _null;
        }
      else if ($._selectorPseudoClasses.contains$1(0, unvendored)) {
        selector = _this._selectorList$0();
        argument = _null;
      } else if (unvendored === "nth-child" || unvendored === "nth-last-child") {
        argument = _this._aNPlusB$0();
        _this.whitespace$0();
        t2 = t1.peekChar$1(-1);
        if ((t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12) && t1.peekChar$0() !== 41) {
          _this.expectIdentifier$1("of");
          argument += " of";
          _this.whitespace$0();
          selector = _this._selectorList$0();
        } else
          selector = _null;
      } else {
        argument = B.JSString_methods.trimRight$0(_this.declarationValue$1$allowEmpty(true));
        selector = _null;
      }
      t1.expectChar$1(41);
      return A.PseudoSelector$($name, argument, element, selector);
    },
    _aNPlusB$0() {
      var t2, first, t3, next, last, _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 101:
        case 69:
          _this.expectIdentifier$1("even");
          return "even";
        case 111:
        case 79:
          _this.expectIdentifier$1("odd");
          return "odd";
        case 43:
        case 45:
          t2 = "" + A.Primitives_stringFromCharCode(t1.readChar$0());
          break;
        default:
          t2 = "";
      }
      first = t1.peekChar$0();
      if (first != null && A.isDigit(first)) {
        while (true) {
          t3 = t1.peekChar$0();
          if (!(t3 != null && t3 >= 48 && t3 <= 57))
            break;
          t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
        }
        _this.whitespace$0();
        if (!_this.scanIdentChar$1(110))
          return t2.charCodeAt(0) == 0 ? t2 : t2;
      } else
        _this.expectIdentChar$1(110);
      t2 += A.Primitives_stringFromCharCode(110);
      _this.whitespace$0();
      next = t1.peekChar$0();
      if (next !== 43 && next !== 45)
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
      _this.whitespace$0();
      last = t1.peekChar$0();
      if (last == null || !A.isDigit(last))
        t1.error$1(0, "Expected a number.");
      while (true) {
        t3 = t1.peekChar$0();
        if (!(t3 != null && t3 >= 48 && t3 <= 57))
          break;
        t2 += A.Primitives_stringFromCharCode(t1.readChar$0());
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    _typeOrUniversalSelector$0() {
      var nameOrNamespace, _this = this,
        t1 = _this.scanner,
        first = t1.peekChar$0();
      if (first === 42) {
        t1.readChar$0();
        if (!t1.scanChar$1(124))
          return new A.UniversalSelector(null);
        if (t1.scanChar$1(42))
          return new A.UniversalSelector("*");
        else
          return new A.TypeSelector(new A.QualifiedName(_this.identifier$0(), "*"));
      } else if (first === 124) {
        t1.readChar$0();
        if (t1.scanChar$1(42))
          return new A.UniversalSelector("");
        else
          return new A.TypeSelector(new A.QualifiedName(_this.identifier$0(), ""));
      }
      nameOrNamespace = _this.identifier$0();
      if (!t1.scanChar$1(124))
        return new A.TypeSelector(new A.QualifiedName(nameOrNamespace, null));
      else if (t1.scanChar$1(42))
        return new A.UniversalSelector(nameOrNamespace);
      else
        return new A.TypeSelector(new A.QualifiedName(_this.identifier$0(), nameOrNamespace));
    }
  };
  A.SelectorParser_parse_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        selector = t1._selectorList$0();
      t1 = t1.scanner;
      if (t1._string_scanner$_position !== t1.string.length)
        t1.error$1(0, "expected selector.");
      return selector;
    },
    $signature: 44
  };
  A.SelectorParser_parseCompoundSelector_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        compound = t1._compoundSelector$0();
      t1 = t1.scanner;
      if (t1._string_scanner$_position !== t1.string.length)
        t1.error$1(0, "expected selector.");
      return compound;
    },
    $signature: 340
  };
  A.StylesheetParser.prototype = {
    parse$0() {
      return this.wrapSpanFormatException$1(new A.StylesheetParser_parse_closure(this));
    },
    parseArgumentDeclaration$0() {
      return this._parseSingleProduction$1$1(new A.StylesheetParser_parseArgumentDeclaration_closure(this), type$.ArgumentDeclaration);
    },
    parseVariableDeclaration$0() {
      return this._parseSingleProduction$1$1(new A.StylesheetParser_parseVariableDeclaration_closure(this), type$.VariableDeclaration);
    },
    parseUseRule$0() {
      return this._parseSingleProduction$1$1(new A.StylesheetParser_parseUseRule_closure(this), type$.UseRule);
    },
    _parseSingleProduction$1$1(production, $T) {
      return this.wrapSpanFormatException$1(new A.StylesheetParser__parseSingleProduction_closure(this, production, $T));
    },
    _statement$1$root(root) {
      var t2, _this = this,
        t1 = _this.scanner;
      switch (t1.peekChar$0()) {
        case 64:
          return _this.atRule$2$root(new A.StylesheetParser__statement_closure(_this), root);
        case 43:
          if (!_this.get$indented() || !_this.lookingAtIdentifier$1(1))
            return _this._styleRule$0();
          _this._isUseAllowed = false;
          t2 = t1._string_scanner$_position;
          t1.readChar$0();
          return _this._includeRule$1(new A._SpanScannerState(t1, t2));
        case 61:
          if (!_this.get$indented())
            return _this._styleRule$0();
          _this._isUseAllowed = false;
          t2 = t1._string_scanner$_position;
          t1.readChar$0();
          _this.whitespace$0();
          return _this._mixinRule$1(new A._SpanScannerState(t1, t2));
        case 125:
          t1.error$2$length(0, 'unmatched "}".', 1);
          break;
        default:
          return _this._inStyleRule || _this._stylesheet$_inUnknownAtRule || _this._stylesheet$_inMixin || _this._inContentBlock ? _this._declarationOrStyleRule$0() : _this._variableDeclarationOrStyleRule$0();
      }
    },
    _statement$0() {
      return this._statement$1$root(false);
    },
    _variableDeclarationWithNamespace$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        namespace = this.identifier$0();
      t1.expectChar$1(46);
      return this.variableDeclarationWithoutNamespace$2(namespace, new A._SpanScannerState(t1, t2));
    },
    variableDeclarationWithoutNamespace$2(namespace, start_) {
      var t1, start, $name, t2, value, flagStart, t3, guarded, global, flag, endPosition, t4, t5, t6, declaration, _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      if (start_ == null) {
        t1 = _this.scanner;
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      } else
        start = start_;
      $name = _this.variableName$0();
      t1 = namespace != null;
      if (t1)
        _this._assertPublic$2($name, new A.StylesheetParser_variableDeclarationWithoutNamespace_closure(_this, start));
      if (_this.get$plainCss())
        _this.error$2(0, string$.Sass_v, _this.scanner.spanFrom$1(start));
      _this.whitespace$0();
      t2 = _this.scanner;
      t2.expectChar$1(58);
      _this.whitespace$0();
      value = _this._expression$0();
      flagStart = new A._SpanScannerState(t2, t2._string_scanner$_position);
      for (t3 = t2.string, guarded = false, global = false; t2.scanChar$1(33);) {
        flag = _this.identifier$0();
        if (flag === "default")
          guarded = true;
        else if (flag === "global") {
          if (t1) {
            endPosition = t2._string_scanner$_position;
            t4 = t2._sourceFile;
            t5 = flagStart.position;
            t6 = new A._FileSpan(t4, t5, endPosition);
            t6._FileSpan$3(t4, t5, endPosition);
            A.throwExpression(new A.StringScannerException(t3, string$.x21globa, t6));
          }
          global = true;
        } else {
          endPosition = t2._string_scanner$_position;
          t4 = t2._sourceFile;
          t5 = flagStart.position;
          t6 = new A._FileSpan(t4, t5, endPosition);
          t6._FileSpan$3(t4, t5, endPosition);
          A.throwExpression(new A.StringScannerException(t3, "Invalid flag name.", t6));
        }
        _this.whitespace$0();
        flagStart = new A._SpanScannerState(t2, t2._string_scanner$_position);
      }
      _this.expectStatementSeparator$1("variable declaration");
      declaration = A.VariableDeclaration$($name, value, t2.spanFrom$1(start), precedingComment, global, guarded, namespace);
      if (global)
        _this._globalVariables.putIfAbsent$2($name, new A.StylesheetParser_variableDeclarationWithoutNamespace_closure0(declaration));
      return declaration;
    },
    variableDeclarationWithoutNamespace$0() {
      return this.variableDeclarationWithoutNamespace$2(null, null);
    },
    _variableDeclarationOrStyleRule$0() {
      var t1, t2, variableOrInterpolation, t3, _this = this;
      if (_this.get$plainCss())
        return _this._styleRule$0();
      if (_this.get$indented() && _this.scanner.scanChar$1(92))
        return _this._styleRule$0();
      if (!_this.lookingAtIdentifier$0())
        return _this._styleRule$0();
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      variableOrInterpolation = _this._variableDeclarationOrInterpolation$0();
      if (variableOrInterpolation instanceof A.VariableDeclaration)
        return variableOrInterpolation;
      else {
        t3 = new A.InterpolationBuffer(new A.StringBuffer(""), A._setArrayType([], type$.JSArray_Object));
        t3.addInterpolation$1(type$.Interpolation._as(variableOrInterpolation));
        return _this._styleRule$2(t3, new A._SpanScannerState(t1, t2));
      }
    },
    _declarationOrStyleRule$0() {
      var t1, t2, declarationOrBuffer, _this = this;
      if (_this.get$plainCss() && _this._inStyleRule && !_this._stylesheet$_inUnknownAtRule)
        return _this._propertyOrVariableDeclaration$0();
      if (_this.get$indented() && _this.scanner.scanChar$1(92))
        return _this._styleRule$0();
      t1 = _this.scanner;
      t2 = t1._string_scanner$_position;
      declarationOrBuffer = _this._declarationOrBuffer$0();
      return type$.Statement._is(declarationOrBuffer) ? declarationOrBuffer : _this._styleRule$2(type$.InterpolationBuffer._as(declarationOrBuffer), new A._SpanScannerState(t1, t2));
    },
    _declarationOrBuffer$0() {
      var midBuffer, couldBeSelector, beforeDeclaration, additional, t3, startsWithPunctuation, variableOrInterpolation, t4, $name, postColonWhitespace, exception, _this = this, t1 = {},
        t2 = _this.scanner,
        start = new A._SpanScannerState(t2, t2._string_scanner$_position),
        nameBuffer = new A.InterpolationBuffer(new A.StringBuffer(""), A._setArrayType([], type$.JSArray_Object)),
        first = t2.peekChar$0();
      if (first !== 58)
        if (first !== 42)
          if (first !== 46)
            t3 = first === 35 && t2.peekChar$1(1) !== 123;
          else
            t3 = true;
        else
          t3 = true;
      else
        t3 = true;
      if (t3) {
        t3 = t2.readChar$0();
        nameBuffer._interpolation_buffer$_text._contents += A.Primitives_stringFromCharCode(t3);
        t3 = _this.rawText$1(_this.get$whitespace());
        nameBuffer._interpolation_buffer$_text._contents += t3;
        startsWithPunctuation = true;
      } else
        startsWithPunctuation = false;
      if (!_this._lookingAtInterpolatedIdentifier$0())
        return nameBuffer;
      variableOrInterpolation = startsWithPunctuation ? _this.interpolatedIdentifier$0() : _this._variableDeclarationOrInterpolation$0();
      if (variableOrInterpolation instanceof A.VariableDeclaration)
        return variableOrInterpolation;
      else
        nameBuffer.addInterpolation$1(type$.Interpolation._as(variableOrInterpolation));
      _this._isUseAllowed = false;
      if (t2.matches$1("/*")) {
        t3 = _this.rawText$1(_this.get$loudComment());
        nameBuffer._interpolation_buffer$_text._contents += t3;
      }
      midBuffer = new A.StringBuffer("");
      t3 = _this.get$whitespace();
      midBuffer._contents += _this.rawText$1(t3);
      t4 = t2._string_scanner$_position;
      if (!t2.scanChar$1(58)) {
        if (midBuffer._contents.length !== 0)
          nameBuffer._interpolation_buffer$_text._contents += A.Primitives_stringFromCharCode(32);
        return nameBuffer;
      }
      midBuffer._contents += A.Primitives_stringFromCharCode(58);
      $name = nameBuffer.interpolation$1(t2.spanFrom$2(start, new A._SpanScannerState(t2, t4)));
      if (B.JSString_methods.startsWith$1($name.get$initialPlain(), "--")) {
        t1 = _this._interpolatedDeclarationValue$0();
        _this.expectStatementSeparator$1("custom property");
        return A.Declaration$($name, new A.StringExpression(t1, false), t2.spanFrom$1(start));
      }
      if (t2.scanChar$1(58)) {
        t1 = nameBuffer;
        t2 = t1._interpolation_buffer$_text;
        t3 = t2._contents += A.S(midBuffer);
        t2._contents = t3 + A.Primitives_stringFromCharCode(58);
        return t1;
      } else if (_this.get$indented() && _this._lookingAtInterpolatedIdentifier$0()) {
        t1 = nameBuffer;
        t1._interpolation_buffer$_text._contents += A.S(midBuffer);
        return t1;
      }
      postColonWhitespace = _this.rawText$1(t3);
      if (_this.lookingAtChildren$0())
        return _this._withChildren$3(_this.get$_declarationChild(), start, new A.StylesheetParser__declarationOrBuffer_closure($name));
      midBuffer._contents += postColonWhitespace;
      couldBeSelector = postColonWhitespace.length === 0 && _this._lookingAtInterpolatedIdentifier$0();
      beforeDeclaration = new A._SpanScannerState(t2, t2._string_scanner$_position);
      t3 = t1.value = null;
      try {
        t3 = t1.value = _this._expression$0();
        if (_this.lookingAtChildren$0()) {
          if (couldBeSelector)
            _this.expectStatementSeparator$0();
        } else if (!_this.atEndOfStatement$0())
          _this.expectStatementSeparator$0();
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception))) {
          if (!couldBeSelector)
            throw exception;
          t2.set$state(beforeDeclaration);
          additional = _this.almostAnyValue$0();
          if (!_this.get$indented() && t2.peekChar$0() === 59)
            throw exception;
          nameBuffer._interpolation_buffer$_text._contents += A.S(midBuffer);
          nameBuffer.addInterpolation$1(additional);
          return nameBuffer;
        } else
          throw exception;
      }
      if (_this.lookingAtChildren$0())
        return _this._withChildren$3(_this.get$_declarationChild(), start, new A.StylesheetParser__declarationOrBuffer_closure0(t1, $name));
      else {
        _this.expectStatementSeparator$0();
        return A.Declaration$($name, t3, t2.spanFrom$1(start));
      }
    },
    _variableDeclarationOrInterpolation$0() {
      var t1, start, identifier, t2, buffer, _this = this;
      if (!_this.lookingAtIdentifier$0())
        return _this.interpolatedIdentifier$0();
      t1 = _this.scanner;
      start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      identifier = _this.identifier$0();
      if (t1.matches$1(".$")) {
        t1.readChar$0();
        return _this.variableDeclarationWithoutNamespace$2(identifier, start);
      } else {
        t2 = new A.StringBuffer("");
        buffer = new A.InterpolationBuffer(t2, A._setArrayType([], type$.JSArray_Object));
        t2._contents = "" + identifier;
        if (_this._lookingAtInterpolatedIdentifierBody$0())
          buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        return buffer.interpolation$1(t1.spanFrom$1(start));
      }
    },
    _styleRule$2(buffer, start_) {
      var t2, start, interpolation, wasInStyleRule, _this = this, t1 = {};
      _this._isUseAllowed = false;
      if (start_ == null) {
        t2 = _this.scanner;
        start = new A._SpanScannerState(t2, t2._string_scanner$_position);
      } else
        start = start_;
      interpolation = t1.interpolation = _this.styleRuleSelector$0();
      if (buffer != null) {
        buffer.addInterpolation$1(interpolation);
        t2 = t1.interpolation = buffer.interpolation$1(_this.scanner.spanFrom$1(start));
      } else
        t2 = interpolation;
      if (t2.contents.length === 0)
        _this.scanner.error$1(0, 'expected "}".');
      wasInStyleRule = _this._inStyleRule;
      _this._inStyleRule = true;
      return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser__styleRule_closure(t1, _this, wasInStyleRule, start));
    },
    _styleRule$0() {
      return this._styleRule$2(null, null);
    },
    _propertyOrVariableDeclaration$1$parseCustomProperties(parseCustomProperties) {
      var first, t3, nameBuffer, variableOrInterpolation, $name, value, _this = this,
        _s48_ = string$.Nested,
        t1 = {},
        t2 = _this.scanner,
        start = new A._SpanScannerState(t2, t2._string_scanner$_position);
      t1.name = null;
      first = t2.peekChar$0();
      if (first !== 58)
        if (first !== 42)
          if (first !== 46)
            t3 = first === 35 && t2.peekChar$1(1) !== 123;
          else
            t3 = true;
        else
          t3 = true;
      else
        t3 = true;
      if (t3) {
        t3 = new A.StringBuffer("");
        nameBuffer = new A.InterpolationBuffer(t3, A._setArrayType([], type$.JSArray_Object));
        t3._contents += A.Primitives_stringFromCharCode(t2.readChar$0());
        t3._contents += _this.rawText$1(_this.get$whitespace());
        nameBuffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        t3 = t1.name = nameBuffer.interpolation$1(t2.spanFrom$1(start));
      } else if (!_this.get$plainCss()) {
        variableOrInterpolation = _this._variableDeclarationOrInterpolation$0();
        if (variableOrInterpolation instanceof A.VariableDeclaration)
          return variableOrInterpolation;
        else {
          type$.Interpolation._as(variableOrInterpolation);
          t1.name = variableOrInterpolation;
        }
        t3 = variableOrInterpolation;
      } else {
        $name = _this.interpolatedIdentifier$0();
        t1.name = $name;
        t3 = $name;
      }
      _this.whitespace$0();
      t2.expectChar$1(58);
      if (parseCustomProperties && B.JSString_methods.startsWith$1(t3.get$initialPlain(), "--")) {
        t1 = _this._interpolatedDeclarationValue$0();
        _this.expectStatementSeparator$1("custom property");
        return A.Declaration$(t3, new A.StringExpression(t1, false), t2.spanFrom$1(start));
      }
      _this.whitespace$0();
      if (_this.lookingAtChildren$0()) {
        if (_this.get$plainCss())
          t2.error$1(0, _s48_);
        return _this._withChildren$3(_this.get$_declarationChild(), start, new A.StylesheetParser__propertyOrVariableDeclaration_closure(t1));
      }
      value = _this._expression$0();
      if (_this.lookingAtChildren$0()) {
        if (_this.get$plainCss())
          t2.error$1(0, _s48_);
        return _this._withChildren$3(_this.get$_declarationChild(), start, new A.StylesheetParser__propertyOrVariableDeclaration_closure0(t1, value));
      } else {
        _this.expectStatementSeparator$0();
        return A.Declaration$(t3, value, t2.spanFrom$1(start));
      }
    },
    _propertyOrVariableDeclaration$0() {
      return this._propertyOrVariableDeclaration$1$parseCustomProperties(true);
    },
    _declarationChild$0() {
      if (this.scanner.peekChar$0() === 64)
        return this._declarationAtRule$0();
      return this._propertyOrVariableDeclaration$1$parseCustomProperties(false);
    },
    atRule$2$root(child, root) {
      var $name, wasUseAllowed, value, optional, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$2$name(64, "@-rule");
      $name = _this.interpolatedIdentifier$0();
      _this.whitespace$0();
      wasUseAllowed = _this._isUseAllowed;
      _this._isUseAllowed = false;
      switch ($name.get$asPlain()) {
        case "at-root":
          return _this._atRootRule$1(start);
        case "content":
          return _this._contentRule$1(start);
        case "debug":
          return _this._debugRule$1(start);
        case "each":
          return _this._eachRule$2(start, child);
        case "else":
          return _this._disallowedAtRule$1(start);
        case "error":
          return _this._errorRule$1(start);
        case "extend":
          if (!_this._inStyleRule && !_this._stylesheet$_inMixin && !_this._inContentBlock)
            _this.error$2(0, string$.x40exten, t1.spanFrom$1(start));
          value = _this.almostAnyValue$0();
          optional = t1.scanChar$1(33);
          if (optional)
            _this.expectIdentifier$1("optional");
          _this.expectStatementSeparator$1("@extend rule");
          return new A.ExtendRule(value, optional, t1.spanFrom$1(start));
        case "for":
          return _this._forRule$2(start, child);
        case "forward":
          _this._isUseAllowed = wasUseAllowed;
          if (!root)
            _this._disallowedAtRule$1(start);
          return _this._forwardRule$1(start);
        case "function":
          return _this._functionRule$1(start);
        case "if":
          return _this._ifRule$2(start, child);
        case "import":
          return _this._importRule$1(start);
        case "include":
          return _this._includeRule$1(start);
        case "media":
          return _this.mediaRule$1(start);
        case "mixin":
          return _this._mixinRule$1(start);
        case "-moz-document":
          return _this.mozDocumentRule$2(start, $name);
        case "return":
          return _this._disallowedAtRule$1(start);
        case "supports":
          return _this.supportsRule$1(start);
        case "use":
          _this._isUseAllowed = wasUseAllowed;
          if (!root)
            _this._disallowedAtRule$1(start);
          return _this._useRule$1(start);
        case "warn":
          return _this._warnRule$1(start);
        case "while":
          return _this._whileRule$2(start, child);
        default:
          return _this.unknownAtRule$2(start, $name);
      }
    },
    _declarationAtRule$0() {
      var _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      switch (_this._plainAtRuleName$0()) {
        case "content":
          return _this._contentRule$1(start);
        case "debug":
          return _this._debugRule$1(start);
        case "each":
          return _this._eachRule$2(start, _this.get$_declarationChild());
        case "else":
          return _this._disallowedAtRule$1(start);
        case "error":
          return _this._errorRule$1(start);
        case "for":
          return _this._forRule$2(start, _this.get$_declarationChild());
        case "if":
          return _this._ifRule$2(start, _this.get$_declarationChild());
        case "include":
          return _this._includeRule$1(start);
        case "warn":
          return _this._warnRule$1(start);
        case "while":
          return _this._whileRule$2(start, _this.get$_declarationChild());
        default:
          return _this._disallowedAtRule$1(start);
      }
    },
    _functionChild$0() {
      var state, variableDeclarationError, stackTrace, statement, t2, exception, t3, start, value, _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() !== 64) {
        state = new A._SpanScannerState(t1, t1._string_scanner$_position);
        try {
          t2 = _this._variableDeclarationWithNamespace$0();
          return t2;
        } catch (exception) {
          t2 = A.unwrapException(exception);
          t3 = type$.SourceSpanFormatException;
          if (t3._is(t2)) {
            variableDeclarationError = t2;
            stackTrace = A.getTraceFromException(exception);
            t1.set$state(state);
            statement = null;
            try {
              statement = _this._declarationOrStyleRule$0();
            } catch (exception) {
              if (t3._is(A.unwrapException(exception)))
                throw A.wrapException(variableDeclarationError);
              else
                throw exception;
            }
            t2 = statement instanceof A.StyleRule ? "style rules" : "declarations";
            _this.error$3(0, "@function rules may not contain " + t2 + ".", J.get$span$z(statement), stackTrace);
          } else
            throw exception;
        }
      }
      start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      switch (_this._plainAtRuleName$0()) {
        case "debug":
          return _this._debugRule$1(start);
        case "each":
          return _this._eachRule$2(start, _this.get$_functionChild());
        case "else":
          return _this._disallowedAtRule$1(start);
        case "error":
          return _this._errorRule$1(start);
        case "for":
          return _this._forRule$2(start, _this.get$_functionChild());
        case "if":
          return _this._ifRule$2(start, _this.get$_functionChild());
        case "return":
          value = _this._expression$0();
          _this.expectStatementSeparator$1("@return rule");
          return new A.ReturnRule(value, t1.spanFrom$1(start));
        case "warn":
          return _this._warnRule$1(start);
        case "while":
          return _this._whileRule$2(start, _this.get$_functionChild());
        default:
          return _this._disallowedAtRule$1(start);
      }
    },
    _plainAtRuleName$0() {
      this.scanner.expectChar$2$name(64, "@-rule");
      var $name = this.identifier$0();
      this.whitespace$0();
      return $name;
    },
    _atRootRule$1(start) {
      var query, _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 40) {
        query = _this._atRootQuery$0();
        _this.whitespace$0();
        return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser__atRootRule_closure(query));
      } else if (_this.lookingAtChildren$0())
        return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser__atRootRule_closure0());
      else
        return A.AtRootRule$(A._setArrayType([_this._styleRule$0()], type$.JSArray_Statement), t1.spanFrom$1(start), null);
    },
    _atRootQuery$0() {
      var interpolation, t2, t3, t4, buffer, t5, _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 35) {
        interpolation = _this.singleInterpolation$0();
        return A.Interpolation$(A._setArrayType([interpolation], type$.JSArray_Object), interpolation.get$span(interpolation));
      }
      t2 = t1._string_scanner$_position;
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      t1.expectChar$1(40);
      t3._contents += A.Primitives_stringFromCharCode(40);
      _this.whitespace$0();
      t5 = _this._expression$0();
      buffer._flushText$0();
      t4.push(t5);
      if (t1.scanChar$1(58)) {
        _this.whitespace$0();
        t5 = t3._contents += A.Primitives_stringFromCharCode(58);
        t3._contents = t5 + A.Primitives_stringFromCharCode(32);
        t5 = _this._expression$0();
        buffer._flushText$0();
        t4.push(t5);
      }
      t1.expectChar$1(41);
      _this.whitespace$0();
      t3._contents += A.Primitives_stringFromCharCode(41);
      return buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _contentRule$1(start) {
      var t1, $arguments, t2, t3, _this = this;
      if (!_this._stylesheet$_inMixin)
        _this.error$2(0, string$.x40conte, _this.scanner.spanFrom$1(start));
      _this.whitespace$0();
      t1 = _this.scanner;
      if (t1.peekChar$0() === 40)
        $arguments = _this._argumentInvocation$1$mixin(true);
      else {
        t2 = A.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
        t3 = t2.offset;
        $arguments = A.ArgumentInvocation$empty(A._FileSpan$(t2.file, t3, t3));
      }
      _this.expectStatementSeparator$1("@content rule");
      return new A.ContentRule($arguments, t1.spanFrom$1(start));
    },
    _debugRule$1(start) {
      var value = this._expression$0();
      this.expectStatementSeparator$1("@debug rule");
      return new A.DebugRule(value, this.scanner.spanFrom$1(start));
    },
    _eachRule$2(start, child) {
      var variables, t1, _this = this,
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      variables = A._setArrayType([_this.variableName$0()], type$.JSArray_String);
      _this.whitespace$0();
      for (t1 = _this.scanner; t1.scanChar$1(44);) {
        _this.whitespace$0();
        t1.expectChar$1(36);
        variables.push(_this.identifier$1$normalize(true));
        _this.whitespace$0();
      }
      _this.expectIdentifier$1("in");
      _this.whitespace$0();
      return _this._withChildren$3(child, start, new A.StylesheetParser__eachRule_closure(_this, wasInControlDirective, variables, _this._expression$0()));
    },
    _errorRule$1(start) {
      var value = this._expression$0();
      this.expectStatementSeparator$1("@error rule");
      return new A.ErrorRule(value, this.scanner.spanFrom$1(start));
    },
    _functionRule$1(start) {
      var $name, $arguments, _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      $name = _this.identifier$1$normalize(true);
      _this.whitespace$0();
      $arguments = _this._argumentDeclaration$0();
      if (_this._stylesheet$_inMixin || _this._inContentBlock)
        _this.error$2(0, string$.Mixinscf, _this.scanner.spanFrom$1(start));
      else if (_this._inControlDirective)
        _this.error$2(0, string$.Functi, _this.scanner.spanFrom$1(start));
      switch (A.unvendor($name)) {
        case "calc":
        case "element":
        case "expression":
        case "url":
        case "and":
        case "or":
        case "not":
        case "clamp":
          _this.error$2(0, "Invalid function name.", _this.scanner.spanFrom$1(start));
          break;
      }
      _this.whitespace$0();
      return _this._withChildren$3(_this.get$_functionChild(), start, new A.StylesheetParser__functionRule_closure($name, $arguments, precedingComment));
    },
    _forRule$2(start, child) {
      var variable, from, _this = this, t1 = {},
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      variable = _this.variableName$0();
      _this.whitespace$0();
      _this.expectIdentifier$1("from");
      _this.whitespace$0();
      t1.exclusive = null;
      from = _this._expression$1$until(new A.StylesheetParser__forRule_closure(t1, _this));
      if (t1.exclusive == null)
        _this.scanner.error$1(0, 'Expected "to" or "through".');
      _this.whitespace$0();
      return _this._withChildren$3(child, start, new A.StylesheetParser__forRule_closure0(t1, _this, wasInControlDirective, variable, from, _this._expression$0()));
    },
    _forwardRule$1(start) {
      var prefix, members, shownMixinsAndFunctions, shownVariables, hiddenVariables, hiddenMixinsAndFunctions, configuration, span, t1, t2, t3, t4, _this = this, _null = null,
        url = _this._urlString$0();
      _this.whitespace$0();
      if (_this.scanIdentifier$1("as")) {
        _this.whitespace$0();
        prefix = _this.identifier$1$normalize(true);
        _this.scanner.expectChar$1(42);
        _this.whitespace$0();
      } else
        prefix = _null;
      if (_this.scanIdentifier$1("show")) {
        members = _this._memberList$0();
        shownMixinsAndFunctions = members.item1;
        shownVariables = members.item2;
        hiddenVariables = _null;
        hiddenMixinsAndFunctions = hiddenVariables;
      } else {
        if (_this.scanIdentifier$1("hide")) {
          members = _this._memberList$0();
          hiddenMixinsAndFunctions = members.item1;
          hiddenVariables = members.item2;
        } else {
          hiddenVariables = _null;
          hiddenMixinsAndFunctions = hiddenVariables;
        }
        shownVariables = _null;
        shownMixinsAndFunctions = shownVariables;
      }
      configuration = _this._stylesheet$_configuration$1$allowGuarded(true);
      _this.expectStatementSeparator$1("@forward rule");
      span = _this.scanner.spanFrom$1(start);
      if (!_this._isUseAllowed)
        _this.error$2(0, string$.x40forwa, span);
      if (shownMixinsAndFunctions != null) {
        shownVariables.toString;
        t1 = type$.String;
        t2 = A.LinkedHashSet_LinkedHashSet$of(shownMixinsAndFunctions, t1);
        t3 = type$.UnmodifiableSetView_String;
        t1 = A.LinkedHashSet_LinkedHashSet$of(shownVariables, t1);
        t4 = configuration == null ? B.List_empty6 : A.List_List$unmodifiable(configuration, type$.ConfiguredVariable);
        return new A.ForwardRule(url, new A.UnmodifiableSetView(t2, t3), new A.UnmodifiableSetView(t1, t3), _null, _null, prefix, t4, span);
      } else if (hiddenMixinsAndFunctions != null) {
        hiddenVariables.toString;
        t1 = type$.String;
        t2 = A.LinkedHashSet_LinkedHashSet$of(hiddenMixinsAndFunctions, t1);
        t3 = type$.UnmodifiableSetView_String;
        t1 = A.LinkedHashSet_LinkedHashSet$of(hiddenVariables, t1);
        t4 = configuration == null ? B.List_empty6 : A.List_List$unmodifiable(configuration, type$.ConfiguredVariable);
        return new A.ForwardRule(url, _null, _null, new A.UnmodifiableSetView(t2, t3), new A.UnmodifiableSetView(t1, t3), prefix, t4, span);
      } else
        return new A.ForwardRule(url, _null, _null, _null, _null, prefix, configuration == null ? B.List_empty6 : A.List_List$unmodifiable(configuration, type$.ConfiguredVariable), span);
    },
    _memberList$0() {
      var _this = this,
        t1 = type$.String,
        identifiers = A.LinkedHashSet_LinkedHashSet$_empty(t1),
        variables = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      t1 = _this.scanner;
      do {
        _this.whitespace$0();
        _this.withErrorMessage$2(string$.Expectv, new A.StylesheetParser__memberList_closure(_this, variables, identifiers));
        _this.whitespace$0();
      } while (t1.scanChar$1(44));
      return new A.Tuple2(identifiers, variables, type$.Tuple2_of_Set_String_and_Set_String);
    },
    _ifRule$2(start, child) {
      var condition, children, clauses, lastClause, span, _this = this,
        ifIndentation = _this.get$currentIndentation(),
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      condition = _this._expression$0();
      children = _this.children$1(0, child);
      _this.whitespaceWithoutComments$0();
      clauses = A._setArrayType([A.IfClause$(condition, children)], type$.JSArray_IfClause);
      while (true) {
        if (!_this.scanElse$1(ifIndentation)) {
          lastClause = null;
          break;
        }
        _this.whitespace$0();
        if (_this.scanIdentifier$1("if")) {
          _this.whitespace$0();
          clauses.push(A.IfClause$(_this._expression$0(), _this.children$1(0, child)));
        } else {
          lastClause = A.ElseClause$(_this.children$1(0, child));
          break;
        }
      }
      _this._inControlDirective = wasInControlDirective;
      span = _this.scanner.spanFrom$1(start);
      _this.whitespaceWithoutComments$0();
      return new A.IfRule(A.List_List$unmodifiable(clauses, type$.IfClause), lastClause, span);
    },
    _importRule$1(start) {
      var argument, _this = this,
        imports = A._setArrayType([], type$.JSArray_Import),
        t1 = _this.scanner;
      do {
        _this.whitespace$0();
        argument = _this.importArgument$0();
        if ((_this._inControlDirective || _this._stylesheet$_inMixin) && argument instanceof A.DynamicImport)
          _this._disallowedAtRule$1(start);
        imports.push(argument);
        _this.whitespace$0();
      } while (t1.scanChar$1(44));
      _this.expectStatementSeparator$1("@import rule");
      t1 = t1.spanFrom$1(start);
      return new A.ImportRule(A.List_List$unmodifiable(imports, type$.Import), t1);
    },
    importArgument$0() {
      var url, urlSpan, innerError, stackTrace, modifiers, t2, exception, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position),
        next = t1.peekChar$0();
      if (next === 117 || next === 85) {
        url = _this.dynamicUrl$0();
        _this.whitespace$0();
        modifiers = _this.tryImportModifiers$0();
        return new A.StaticImport(A.Interpolation$(A._setArrayType([url], type$.JSArray_Object), t1.spanFrom$1(start)), modifiers, t1.spanFrom$1(start));
      }
      url = _this.string$0();
      urlSpan = t1.spanFrom$1(start);
      _this.whitespace$0();
      modifiers = _this.tryImportModifiers$0();
      if (_this.isPlainImportUrl$1(url) || modifiers != null) {
        t2 = urlSpan;
        return new A.StaticImport(A.Interpolation$(A._setArrayType([A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t2.file._decodedChars, t2._file$_start, t2._end), 0, null)], type$.JSArray_Object), urlSpan), modifiers, t1.spanFrom$1(start));
      } else
        try {
          t1 = _this.parseImportUrl$1(url);
          return new A.DynamicImport(t1, urlSpan);
        } catch (exception) {
          t1 = A.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            innerError = t1;
            stackTrace = A.getTraceFromException(exception);
            _this.error$3(0, "Invalid URL: " + J.get$message$x(innerError), urlSpan, stackTrace);
          } else
            throw exception;
        }
    },
    parseImportUrl$1(url) {
      var t1 = $.$get$windows();
      if (t1.style.rootLength$1(url) > 0 && !$.$get$url().style.isRootRelative$1(url))
        return t1.toUri$1(url).toString$0(0);
      A.Uri_parse(url);
      return url;
    },
    isPlainImportUrl$1(url) {
      var first;
      if (url.length < 5)
        return false;
      if (B.JSString_methods.endsWith$1(url, ".css"))
        return true;
      first = B.JSString_methods._codeUnitAt$1(url, 0);
      if (first === 47)
        return B.JSString_methods._codeUnitAt$1(url, 1) === 47;
      if (first !== 104)
        return false;
      return B.JSString_methods.startsWith$1(url, "http://") || B.JSString_methods.startsWith$1(url, "https://");
    },
    tryImportModifiers$0() {
      var t1, start, t2, t3, buffer, identifier, t4, $name, query, endPosition, t5, result, _this = this;
      if (!_this._lookingAtInterpolatedIdentifier$0() && _this.scanner.peekChar$0() !== 40)
        return null;
      t1 = _this.scanner;
      start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      t2 = new A.StringBuffer("");
      t3 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t2, t3);
      for (; true;)
        if (_this._lookingAtInterpolatedIdentifier$0()) {
          if (!(t3.length === 0 && t2._contents.length === 0))
            t2._contents += A.Primitives_stringFromCharCode(32);
          identifier = _this.interpolatedIdentifier$0();
          buffer.addInterpolation$1(identifier);
          t4 = identifier.get$asPlain();
          $name = t4 == null ? null : t4.toLowerCase();
          if ($name !== "and" && t1.scanChar$1(40)) {
            if ($name === "supports") {
              query = _this._importSupportsQuery$0();
              t4 = !(query instanceof A.SupportsDeclaration);
              if (t4)
                t2._contents += A.Primitives_stringFromCharCode(40);
              buffer._flushText$0();
              t3.push(new A.SupportsExpression(query));
              if (t4)
                t2._contents += A.Primitives_stringFromCharCode(41);
            } else {
              t2._contents += A.Primitives_stringFromCharCode(40);
              buffer.addInterpolation$1(_this._interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(true, true));
              t2._contents += A.Primitives_stringFromCharCode(41);
            }
            t1.expectChar$1(41);
            _this.whitespace$0();
          } else {
            _this.whitespace$0();
            if (t1.scanChar$1(44)) {
              t2._contents += ", ";
              buffer.addInterpolation$1(_this._mediaQueryList$0());
              endPosition = t1._string_scanner$_position;
              t4 = t1._sourceFile;
              t5 = start.position;
              t1 = new A._FileSpan(t4, t5, endPosition);
              t1._FileSpan$3(t4, t5, endPosition);
              t5 = type$.Object;
              t4 = A.List_List$of(t3, true, t5);
              t3 = t2._contents;
              if (t3.length !== 0)
                t4.push(t3.charCodeAt(0) == 0 ? t3 : t3);
              result = A.List_List$from(t4, false, t5);
              result.fixed$length = Array;
              result.immutable$list = Array;
              t2 = new A.Interpolation(result, t1);
              t2.Interpolation$2(t4, t1);
              return t2;
            }
          }
        } else if (t1.peekChar$0() === 40) {
          if (!(t3.length === 0 && t2._contents.length === 0))
            t2._contents += A.Primitives_stringFromCharCode(32);
          buffer.addInterpolation$1(_this._mediaQueryList$0());
          endPosition = t1._string_scanner$_position;
          t1 = t1._sourceFile;
          t4 = start.position;
          t5 = new A._FileSpan(t1, t4, endPosition);
          t5._FileSpan$3(t1, t4, endPosition);
          t4 = type$.Object;
          t3 = A.List_List$of(t3, true, t4);
          t1 = t2._contents;
          if (t1.length !== 0)
            t3.push(t1.charCodeAt(0) == 0 ? t1 : t1);
          result = A.List_List$from(t3, false, t4);
          result.fixed$length = Array;
          result.immutable$list = Array;
          t1 = new A.Interpolation(result, t5);
          t1.Interpolation$2(t3, t5);
          return t1;
        } else {
          endPosition = t1._string_scanner$_position;
          t1 = t1._sourceFile;
          t4 = start.position;
          t5 = new A._FileSpan(t1, t4, endPosition);
          t5._FileSpan$3(t1, t4, endPosition);
          t4 = type$.Object;
          t3 = A.List_List$of(t3, true, t4);
          t1 = t2._contents;
          if (t1.length !== 0)
            t3.push(t1.charCodeAt(0) == 0 ? t1 : t1);
          result = A.List_List$from(t3, false, t4);
          result.fixed$length = Array;
          result.immutable$list = Array;
          t1 = new A.Interpolation(result, t5);
          t1.Interpolation$2(t3, t5);
          return t1;
        }
    },
    _importSupportsQuery$0() {
      var t1, t2, $function, $name, _this = this;
      if (_this.scanIdentifier$1("not")) {
        _this.whitespace$0();
        t1 = _this.scanner;
        t2 = t1._string_scanner$_position;
        return new A.SupportsNegation(_this._supportsConditionInParens$0(), t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
      } else {
        t1 = _this.scanner;
        if (t1.peekChar$0() === 40)
          return _this._supportsCondition$0();
        else {
          $function = _this._tryImportSupportsFunction$0();
          if ($function != null)
            return $function;
          t2 = t1._string_scanner$_position;
          $name = _this._expression$0();
          t1.expectChar$1(58);
          return _this._supportsDeclarationValue$2($name, new A._SpanScannerState(t1, t2));
        }
      }
    },
    _tryImportSupportsFunction$0() {
      var t1, start, $name, value, _this = this;
      if (!_this._lookingAtInterpolatedIdentifier$0())
        return null;
      t1 = _this.scanner;
      start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      $name = _this.interpolatedIdentifier$0();
      if (!t1.scanChar$1(40)) {
        t1.set$state(start);
        return null;
      }
      value = _this._interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(true, true);
      t1.expectChar$1(41);
      return new A.SupportsFunction($name, value, t1.spanFrom$1(start));
    },
    _includeRule$1(start) {
      var name0, namespace, $arguments, t2, t3, contentArguments, contentArguments_, wasInContentBlock, $content, _this = this, _null = null,
        $name = _this.identifier$0(),
        t1 = _this.scanner;
      if (t1.scanChar$1(46)) {
        name0 = _this._publicIdentifier$0();
        namespace = $name;
        $name = name0;
      } else {
        $name = A.stringReplaceAllUnchecked($name, "_", "-");
        namespace = _null;
      }
      _this.whitespace$0();
      if (t1.peekChar$0() === 40)
        $arguments = _this._argumentInvocation$1$mixin(true);
      else {
        t2 = A.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
        t3 = t2.offset;
        $arguments = A.ArgumentInvocation$empty(A._FileSpan$(t2.file, t3, t3));
      }
      _this.whitespace$0();
      if (_this.scanIdentifier$1("using")) {
        _this.whitespace$0();
        contentArguments = _this._argumentDeclaration$0();
        _this.whitespace$0();
      } else
        contentArguments = _null;
      t2 = contentArguments == null;
      if (!t2 || _this.lookingAtChildren$0()) {
        if (t2) {
          t2 = A.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
          t3 = t2.offset;
          contentArguments_ = new A.ArgumentDeclaration(B.List_empty8, _null, A._FileSpan$(t2.file, t3, t3));
        } else
          contentArguments_ = contentArguments;
        wasInContentBlock = _this._inContentBlock;
        _this._inContentBlock = true;
        $content = _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser__includeRule_closure(contentArguments_));
        _this._inContentBlock = wasInContentBlock;
      } else {
        _this.expectStatementSeparator$0();
        $content = _null;
      }
      t1 = t1.spanFrom$2(start, start);
      t2 = $content == null ? $arguments : $content;
      return new A.IncludeRule(namespace, $name, $arguments, $content, t1.expand$1(0, t2.get$span(t2)));
    },
    mediaRule$1(start) {
      return this._withChildren$3(this.get$_statement(), start, new A.StylesheetParser_mediaRule_closure(this._mediaQueryList$0()));
    },
    _mixinRule$1(start) {
      var $name, t1, $arguments, t2, t3, _this = this,
        precedingComment = _this.lastSilentComment;
      _this.lastSilentComment = null;
      $name = _this.identifier$1$normalize(true);
      _this.whitespace$0();
      t1 = _this.scanner;
      if (t1.peekChar$0() === 40)
        $arguments = _this._argumentDeclaration$0();
      else {
        t2 = A.FileLocation$_(t1._sourceFile, t1._string_scanner$_position);
        t3 = t2.offset;
        $arguments = new A.ArgumentDeclaration(B.List_empty8, null, A._FileSpan$(t2.file, t3, t3));
      }
      if (_this._stylesheet$_inMixin || _this._inContentBlock)
        _this.error$2(0, string$.Mixinscm, t1.spanFrom$1(start));
      else if (_this._inControlDirective)
        _this.error$2(0, string$.Mixinsb, t1.spanFrom$1(start));
      _this.whitespace$0();
      _this._stylesheet$_inMixin = true;
      return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser__mixinRule_closure(_this, $name, $arguments, precedingComment));
    },
    mozDocumentRule$2(start, $name) {
      var t5, t6, t7, identifier, contents, argument, trailing, endPosition, t8, t9, start0, end, _this = this, _box_0 = {},
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new A.StringBuffer(""),
        t4 = A._setArrayType([], type$.JSArray_Object),
        buffer = new A.InterpolationBuffer(t3, t4);
      _box_0.needsDeprecationWarning = false;
      for (t5 = _this.get$whitespace(), t6 = t1.string; true;) {
        if (t1.peekChar$0() === 35) {
          t7 = _this.singleInterpolation$0();
          buffer._flushText$0();
          t4.push(t7);
          _box_0.needsDeprecationWarning = true;
        } else {
          t7 = t1._string_scanner$_position;
          identifier = _this.identifier$0();
          switch (identifier) {
            case "url":
            case "url-prefix":
            case "domain":
              contents = _this._tryUrlContents$2$name(new A._SpanScannerState(t1, t7), identifier);
              if (contents != null)
                buffer.addInterpolation$1(contents);
              else {
                t1.expectChar$1(40);
                _this.whitespace$0();
                argument = _this.interpolatedString$0();
                t1.expectChar$1(41);
                t7 = t3._contents += identifier;
                t3._contents = t7 + A.Primitives_stringFromCharCode(40);
                buffer.addInterpolation$1(argument.asInterpolation$0());
                t3._contents += A.Primitives_stringFromCharCode(41);
              }
              t7 = t3._contents;
              trailing = t7.charCodeAt(0) == 0 ? t7 : t7;
              if (!B.JSString_methods.endsWith$1(trailing, "url-prefix()") && !B.JSString_methods.endsWith$1(trailing, "url-prefix('')") && !B.JSString_methods.endsWith$1(trailing, 'url-prefix("")'))
                _box_0.needsDeprecationWarning = true;
              break;
            case "regexp":
              t3._contents += "regexp(";
              t1.expectChar$1(40);
              buffer.addInterpolation$1(_this.interpolatedString$0().asInterpolation$0());
              t1.expectChar$1(41);
              t3._contents += A.Primitives_stringFromCharCode(41);
              _box_0.needsDeprecationWarning = true;
              break;
            default:
              endPosition = t1._string_scanner$_position;
              t8 = t1._sourceFile;
              t9 = new A._FileSpan(t8, t7, endPosition);
              t9._FileSpan$3(t8, t7, endPosition);
              A.throwExpression(new A.StringScannerException(t6, "Invalid function name.", t9));
          }
        }
        _this.whitespace$0();
        if (!t1.scanChar$1(44))
          break;
        t3._contents += A.Primitives_stringFromCharCode(44);
        start0 = t1._string_scanner$_position;
        t5.call$0();
        end = t1._string_scanner$_position;
        t3._contents += B.JSString_methods.substring$2(t6, start0, end);
      }
      return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser_mozDocumentRule_closure(_box_0, _this, $name, buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)))));
    },
    supportsRule$1(start) {
      var _this = this,
        condition = _this._supportsCondition$0();
      _this.whitespace$0();
      return _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser_supportsRule_closure(condition));
    },
    _useRule$1(start) {
      var namespace, configuration, span, t1, _this = this,
        _s9_ = "@use rule",
        url = _this._urlString$0();
      _this.whitespace$0();
      namespace = _this._useNamespace$2(url, start);
      _this.whitespace$0();
      configuration = _this._stylesheet$_configuration$0();
      _this.expectStatementSeparator$1(_s9_);
      span = _this.scanner.spanFrom$1(start);
      if (!_this._isUseAllowed)
        _this.error$2(0, string$.x40use_r, span);
      _this.expectStatementSeparator$1(_s9_);
      t1 = new A.UseRule(url, namespace, configuration == null ? B.List_empty6 : A.List_List$unmodifiable(configuration, type$.ConfiguredVariable), span);
      t1.UseRule$4$configuration(url, namespace, span, configuration);
      return t1;
    },
    _useNamespace$2(url, start) {
      var namespace, basename, dot, t1, exception, _this = this;
      if (_this.scanIdentifier$1("as")) {
        _this.whitespace$0();
        return _this.scanner.scanChar$1(42) ? null : _this.identifier$0();
      }
      basename = url.get$pathSegments().length === 0 ? "" : B.JSArray_methods.get$last(url.get$pathSegments());
      dot = B.JSString_methods.indexOf$1(basename, ".");
      t1 = B.JSString_methods.startsWith$1(basename, "_") ? 1 : 0;
      namespace = B.JSString_methods.substring$2(basename, t1, dot === -1 ? basename.length : dot);
      try {
        t1 = A.SpanScanner$(namespace, null);
        t1 = new A.Parser(t1, _this.logger)._parseIdentifier$0();
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.SassFormatException)
          _this.error$2(0, 'The default namespace "' + A.S(namespace) + string$.x22x20is_n, _this.scanner.spanFrom$1(start));
        else
          throw exception;
      }
    },
    _stylesheet$_configuration$1$allowGuarded(allowGuarded) {
      var variableNames, configuration, t1, t2, t3, $name, expression, t4, guarded, endPosition, t5, t6, span, _this = this;
      if (!_this.scanIdentifier$1("with"))
        return null;
      variableNames = A.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      configuration = A._setArrayType([], type$.JSArray_ConfiguredVariable);
      _this.whitespace$0();
      t1 = _this.scanner;
      t1.expectChar$1(40);
      for (t2 = t1.string; true;) {
        _this.whitespace$0();
        t3 = t1._string_scanner$_position;
        t1.expectChar$1(36);
        $name = _this.identifier$1$normalize(true);
        _this.whitespace$0();
        t1.expectChar$1(58);
        _this.whitespace$0();
        expression = _this.expressionUntilComma$0();
        t4 = t1._string_scanner$_position;
        if (allowGuarded && t1.scanChar$1(33))
          if (_this.identifier$0() === "default") {
            _this.whitespace$0();
            guarded = true;
          } else {
            endPosition = t1._string_scanner$_position;
            t5 = t1._sourceFile;
            t6 = new A._FileSpan(t5, t4, endPosition);
            t6._FileSpan$3(t5, t4, endPosition);
            A.throwExpression(new A.StringScannerException(t2, "Invalid flag name.", t6));
            guarded = false;
          }
        else
          guarded = false;
        endPosition = t1._string_scanner$_position;
        t4 = t1._sourceFile;
        span = new A._FileSpan(t4, t3, endPosition);
        span._FileSpan$3(t4, t3, endPosition);
        if (variableNames.contains$1(0, $name))
          A.throwExpression(new A.StringScannerException(t2, string$.The_sa, span));
        variableNames.add$1(0, $name);
        configuration.push(new A.ConfiguredVariable($name, expression, guarded, span));
        if (!t1.scanChar$1(44))
          break;
        _this.whitespace$0();
        if (!_this._lookingAtExpression$0())
          break;
      }
      t1.expectChar$1(41);
      return configuration;
    },
    _stylesheet$_configuration$0() {
      return this._stylesheet$_configuration$1$allowGuarded(false);
    },
    _warnRule$1(start) {
      var value = this._expression$0();
      this.expectStatementSeparator$1("@warn rule");
      return new A.WarnRule(value, this.scanner.spanFrom$1(start));
    },
    _whileRule$2(start, child) {
      var _this = this,
        wasInControlDirective = _this._inControlDirective;
      _this._inControlDirective = true;
      return _this._withChildren$3(child, start, new A.StylesheetParser__whileRule_closure(_this, wasInControlDirective, _this._expression$0()));
    },
    unknownAtRule$2(start, $name) {
      var t2, t3, rule, _this = this, t1 = {},
        wasInUnknownAtRule = _this._stylesheet$_inUnknownAtRule;
      _this._stylesheet$_inUnknownAtRule = true;
      t1.value = null;
      t2 = _this.scanner;
      t3 = t2.peekChar$0() !== 33 && !_this.atEndOfStatement$0() ? t1.value = _this.almostAnyValue$0() : null;
      if (_this.lookingAtChildren$0())
        rule = _this._withChildren$3(_this.get$_statement(), start, new A.StylesheetParser_unknownAtRule_closure(t1, $name));
      else {
        _this.expectStatementSeparator$0();
        rule = A.AtRule$($name, t2.spanFrom$1(start), null, t3);
      }
      _this._stylesheet$_inUnknownAtRule = wasInUnknownAtRule;
      return rule;
    },
    _disallowedAtRule$1(start) {
      this.almostAnyValue$0();
      this.error$2(0, "This at-rule is not allowed here.", this.scanner.spanFrom$1(start));
    },
    _argumentDeclaration$0() {
      var $arguments, named, restArgument, t3, t4, $name, defaultValue, endPosition, t5, t6, _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expectChar$1(40);
      _this.whitespace$0();
      $arguments = A._setArrayType([], type$.JSArray_Argument);
      named = A.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      t3 = t1.string;
      while (true) {
        if (!(t1.peekChar$0() === 36)) {
          restArgument = null;
          break;
        }
        t4 = t1._string_scanner$_position;
        t1.expectChar$1(36);
        $name = _this.identifier$1$normalize(true);
        _this.whitespace$0();
        if (t1.scanChar$1(58)) {
          _this.whitespace$0();
          defaultValue = _this.expressionUntilComma$0();
        } else {
          if (t1.scanChar$1(46)) {
            t1.expectChar$1(46);
            t1.expectChar$1(46);
            _this.whitespace$0();
            restArgument = $name;
            break;
          }
          defaultValue = null;
        }
        endPosition = t1._string_scanner$_position;
        t5 = t1._sourceFile;
        t6 = new A._FileSpan(t5, t4, endPosition);
        t6._FileSpan$3(t5, t4, endPosition);
        $arguments.push(new A.Argument($name, defaultValue, t6));
        if (!named.add$1(0, $name))
          A.throwExpression(new A.StringScannerException(t3, "Duplicate argument.", B.JSArray_methods.get$last($arguments).span));
        if (!t1.scanChar$1(44)) {
          restArgument = null;
          break;
        }
        _this.whitespace$0();
      }
      t1.expectChar$1(41);
      t1 = t1.spanFrom$1(new A._SpanScannerState(t1, t2));
      return new A.ArgumentDeclaration(A.List_List$unmodifiable($arguments, type$.Argument), restArgument, t1);
    },
    _argumentInvocation$2$allowEmptySecondArg$mixin(allowEmptySecondArg, mixin) {
      var positional, t3, t4, named, keywordRest, t5, t6, rest, expression, t7, result, _this = this, _null = null,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expectChar$1(40);
      _this.whitespace$0();
      positional = A._setArrayType([], type$.JSArray_Expression);
      t3 = type$.String;
      t4 = type$.Expression;
      named = A.LinkedHashMap_LinkedHashMap$_empty(t3, t4);
      t5 = !mixin;
      t6 = t1.string;
      rest = _null;
      while (true) {
        if (!_this._lookingAtExpression$0()) {
          keywordRest = _null;
          break;
        }
        expression = _this.expressionUntilComma$1$singleEquals(t5);
        _this.whitespace$0();
        if (expression instanceof A.VariableExpression && t1.scanChar$1(58)) {
          _this.whitespace$0();
          t7 = expression.name;
          if (named.containsKey$1(t7))
            A.throwExpression(new A.StringScannerException(t6, "Duplicate argument.", expression.span));
          named.$indexSet(0, t7, _this.expressionUntilComma$1$singleEquals(t5));
        } else if (t1.scanChar$1(46)) {
          t1.expectChar$1(46);
          t1.expectChar$1(46);
          if (rest != null) {
            _this.whitespace$0();
            keywordRest = expression;
            break;
          }
          rest = expression;
        } else if (named.__js_helper$_length !== 0)
          A.throwExpression(new A.StringScannerException(t6, string$.Positi, expression.get$span(expression)));
        else
          positional.push(expression);
        _this.whitespace$0();
        if (!t1.scanChar$1(44)) {
          keywordRest = _null;
          break;
        }
        _this.whitespace$0();
        if (allowEmptySecondArg && positional.length === 1 && named.__js_helper$_length === 0 && rest == null && t1.peekChar$0() === 41) {
          t5 = t1._sourceFile;
          t6 = t1._string_scanner$_position;
          new A.FileLocation(t5, t6).FileLocation$_$2(t5, t6);
          t7 = new A._FileSpan(t5, t6, t6);
          t7._FileSpan$3(t5, t6, t6);
          t6 = A._setArrayType([""], type$.JSArray_Object);
          result = A.List_List$from(t6, false, type$.Object);
          result.fixed$length = Array;
          result.immutable$list = Array;
          t5 = new A.Interpolation(result, t7);
          t5.Interpolation$2(t6, t7);
          positional.push(new A.StringExpression(t5, false));
          keywordRest = _null;
          break;
        }
      }
      t1.expectChar$1(41);
      t1 = t1.spanFrom$1(new A._SpanScannerState(t1, t2));
      return new A.ArgumentInvocation(A.List_List$unmodifiable(positional, t4), A.ConstantMap_ConstantMap$from(named, t3, t4), rest, keywordRest, t1);
    },
    _argumentInvocation$0() {
      return this._argumentInvocation$2$allowEmptySecondArg$mixin(false, false);
    },
    _argumentInvocation$1$allowEmptySecondArg(allowEmptySecondArg) {
      return this._argumentInvocation$2$allowEmptySecondArg$mixin(allowEmptySecondArg, false);
    },
    _argumentInvocation$1$mixin(mixin) {
      return this._argumentInvocation$2$allowEmptySecondArg$mixin(false, mixin);
    },
    _expression$3$bracketList$singleEquals$until(bracketList, singleEquals, until) {
      var t2, beforeBracket, start, wasInParentheses, resetState, resolveOneOperation, resolveOperations, addSingleExpression, addOperator, resolveSpaceExpressions, t3, first, next, t4, commaExpressions, spaceExpressions, singleExpression, _this = this,
        _s20_ = "Expected expression.",
        _box_0 = {},
        t1 = until != null;
      if (t1 && until.call$0())
        _this.scanner.error$1(0, _s20_);
      if (bracketList) {
        t2 = _this.scanner;
        beforeBracket = new A._SpanScannerState(t2, t2._string_scanner$_position);
        t2.expectChar$1(91);
        _this.whitespace$0();
        if (t2.scanChar$1(93)) {
          t1 = A._setArrayType([], type$.JSArray_Expression);
          t2 = t2.spanFrom$1(beforeBracket);
          return new A.ListExpression(A.List_List$unmodifiable(t1, type$.Expression), B.ListSeparator_undecided_null, true, t2);
        }
      } else
        beforeBracket = null;
      t2 = _this.scanner;
      start = new A._SpanScannerState(t2, t2._string_scanner$_position);
      wasInParentheses = _this._inParentheses;
      _box_0.operands_ = _box_0.operators_ = _box_0.spaceExpressions_ = _box_0.commaExpressions_ = null;
      _box_0.allowSlash = true;
      _box_0.singleExpression_ = _this._singleExpression$0();
      resetState = new A.StylesheetParser__expression_resetState(_box_0, _this, start);
      resolveOneOperation = new A.StylesheetParser__expression_resolveOneOperation(_box_0, _this);
      resolveOperations = new A.StylesheetParser__expression_resolveOperations(_box_0, resolveOneOperation);
      addSingleExpression = new A.StylesheetParser__expression_addSingleExpression(_box_0, _this, resetState, resolveOperations);
      addOperator = new A.StylesheetParser__expression_addOperator(_box_0, _this, resolveOneOperation);
      resolveSpaceExpressions = new A.StylesheetParser__expression_resolveSpaceExpressions(_box_0, _this, resolveOperations);
      $label0$0:
        for (t3 = type$.JSArray_Expression; true;) {
          _this.whitespace$0();
          if (t1 && until.call$0())
            break $label0$0;
          first = t2.peekChar$0();
          switch (first) {
            case 40:
              addSingleExpression.call$1(_this._parentheses$0());
              break;
            case 91:
              addSingleExpression.call$1(_this._expression$1$bracketList(true));
              break;
            case 36:
              addSingleExpression.call$1(_this._variable$0());
              break;
            case 38:
              addSingleExpression.call$1(_this._selector$0());
              break;
            case 39:
            case 34:
              addSingleExpression.call$1(_this.interpolatedString$0());
              break;
            case 35:
              addSingleExpression.call$1(_this._hashExpression$0());
              break;
            case 61:
              t2.readChar$0();
              if (singleEquals && t2.peekChar$0() !== 61)
                addOperator.call$1(B.BinaryOperator_kjl);
              else {
                t2.expectChar$1(61);
                addOperator.call$1(B.BinaryOperator_YlX);
              }
              break;
            case 33:
              next = t2.peekChar$1(1);
              if (next === 61) {
                t2.readChar$0();
                t2.readChar$0();
                addOperator.call$1(B.BinaryOperator_i5H);
              } else {
                if (next != null)
                  if ((next | 32) >>> 0 !== 105)
                    t4 = next === 32 || next === 9 || next === 10 || next === 13 || next === 12;
                  else
                    t4 = true;
                else
                  t4 = true;
                if (t4)
                  addSingleExpression.call$1(_this._importantExpression$0());
                else
                  break $label0$0;
              }
              break;
            case 60:
              t2.readChar$0();
              addOperator.call$1(t2.scanChar$1(61) ? B.BinaryOperator_33h : B.BinaryOperator_8qt);
              break;
            case 62:
              t2.readChar$0();
              addOperator.call$1(t2.scanChar$1(61) ? B.BinaryOperator_1da : B.BinaryOperator_AcR);
              break;
            case 42:
              t2.readChar$0();
              addOperator.call$1(B.BinaryOperator_O1M);
              break;
            case 43:
              if (_box_0.singleExpression_ == null)
                addSingleExpression.call$1(_this._unaryOperation$0());
              else {
                t2.readChar$0();
                addOperator.call$1(B.BinaryOperator_AcR0);
              }
              break;
            case 45:
              next = t2.peekChar$1(1);
              if (next != null && next >= 48 && next <= 57 || next === 46)
                if (_box_0.singleExpression_ != null) {
                  t4 = t2.peekChar$1(-1);
                  t4 = t4 === 32 || t4 === 9 || t4 === 10 || t4 === 13 || t4 === 12;
                } else
                  t4 = true;
              else
                t4 = false;
              if (t4)
                addSingleExpression.call$1(_this._number$0());
              else if (_this._lookingAtInterpolatedIdentifier$0())
                addSingleExpression.call$1(_this.identifierLike$0());
              else if (_box_0.singleExpression_ == null)
                addSingleExpression.call$1(_this._unaryOperation$0());
              else {
                t2.readChar$0();
                addOperator.call$1(B.BinaryOperator_iyO);
              }
              break;
            case 47:
              if (_box_0.singleExpression_ == null)
                addSingleExpression.call$1(_this._unaryOperation$0());
              else {
                t2.readChar$0();
                addOperator.call$1(B.BinaryOperator_RTB);
              }
              break;
            case 37:
              t2.readChar$0();
              addOperator.call$1(B.BinaryOperator_2ad);
              break;
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              addSingleExpression.call$1(_this._number$0());
              break;
            case 46:
              if (t2.peekChar$1(1) === 46)
                break $label0$0;
              addSingleExpression.call$1(_this._number$0());
              break;
            case 97:
              if (!_this.get$plainCss() && _this.scanIdentifier$1("and"))
                addOperator.call$1(B.BinaryOperator_and_and_2);
              else
                addSingleExpression.call$1(_this.identifierLike$0());
              break;
            case 111:
              if (!_this.get$plainCss() && _this.scanIdentifier$1("or"))
                addOperator.call$1(B.BinaryOperator_or_or_1);
              else
                addSingleExpression.call$1(_this.identifierLike$0());
              break;
            case 117:
            case 85:
              if (t2.peekChar$1(1) === 43)
                addSingleExpression.call$1(_this._unicodeRange$0());
              else
                addSingleExpression.call$1(_this.identifierLike$0());
              break;
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 95:
            case 92:
              addSingleExpression.call$1(_this.identifierLike$0());
              break;
            case 44:
              if (_this._inParentheses) {
                _this._inParentheses = false;
                if (_box_0.allowSlash) {
                  resetState.call$0();
                  break;
                }
              }
              commaExpressions = _box_0.commaExpressions_;
              if (commaExpressions == null)
                commaExpressions = _box_0.commaExpressions_ = A._setArrayType([], t3);
              if (_box_0.singleExpression_ == null)
                t2.error$1(0, _s20_);
              resolveSpaceExpressions.call$0();
              t4 = _box_0.singleExpression_;
              t4.toString;
              commaExpressions.push(t4);
              t2.readChar$0();
              _box_0.allowSlash = true;
              _box_0.singleExpression_ = null;
              break;
            default:
              if (first != null && first >= 128) {
                addSingleExpression.call$1(_this.identifierLike$0());
                break;
              } else
                break $label0$0;
          }
        }
      if (bracketList)
        t2.expectChar$1(93);
      commaExpressions = _box_0.commaExpressions_;
      spaceExpressions = _box_0.spaceExpressions_;
      if (commaExpressions != null) {
        resolveSpaceExpressions.call$0();
        _this._inParentheses = wasInParentheses;
        singleExpression = _box_0.singleExpression_;
        if (singleExpression != null)
          commaExpressions.push(singleExpression);
        t1 = t2.spanFrom$1(beforeBracket == null ? start : beforeBracket);
        return new A.ListExpression(A.List_List$unmodifiable(commaExpressions, type$.Expression), B.ListSeparator_kWM, bracketList, t1);
      } else if (bracketList && spaceExpressions != null) {
        resolveOperations.call$0();
        t1 = _box_0.singleExpression_;
        t1.toString;
        spaceExpressions.push(t1);
        beforeBracket.toString;
        t2 = t2.spanFrom$1(beforeBracket);
        return new A.ListExpression(A.List_List$unmodifiable(spaceExpressions, type$.Expression), B.ListSeparator_woc, true, t2);
      } else {
        resolveSpaceExpressions.call$0();
        if (bracketList) {
          t1 = _box_0.singleExpression_;
          t1.toString;
          t3 = A._setArrayType([t1], t3);
          beforeBracket.toString;
          t2 = t2.spanFrom$1(beforeBracket);
          _box_0.singleExpression_ = new A.ListExpression(A.List_List$unmodifiable(t3, type$.Expression), B.ListSeparator_undecided_null, true, t2);
        }
        t1 = _box_0.singleExpression_;
        t1.toString;
        return t1;
      }
    },
    _expression$0() {
      return this._expression$3$bracketList$singleEquals$until(false, false, null);
    },
    _expression$2$singleEquals$until(singleEquals, until) {
      return this._expression$3$bracketList$singleEquals$until(false, singleEquals, until);
    },
    _expression$1$bracketList(bracketList) {
      return this._expression$3$bracketList$singleEquals$until(bracketList, false, null);
    },
    _expression$1$until(until) {
      return this._expression$3$bracketList$singleEquals$until(false, false, until);
    },
    expressionUntilComma$1$singleEquals(singleEquals) {
      return this._expression$2$singleEquals$until(singleEquals, new A.StylesheetParser_expressionUntilComma_closure(this));
    },
    expressionUntilComma$0() {
      return this.expressionUntilComma$1$singleEquals(false);
    },
    _isSlashOperand$1(expression) {
      var t1;
      if (!(expression instanceof A.NumberExpression))
        if (!(expression instanceof A.CalculationExpression))
          t1 = expression instanceof A.BinaryOperationExpression && expression.allowsSlash;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _singleExpression$0() {
      var next, _this = this,
        t1 = _this.scanner,
        first = t1.peekChar$0();
      switch (first) {
        case 40:
          return _this._parentheses$0();
        case 47:
          return _this._unaryOperation$0();
        case 46:
          return _this._number$0();
        case 91:
          return _this._expression$1$bracketList(true);
        case 36:
          return _this._variable$0();
        case 38:
          return _this._selector$0();
        case 39:
        case 34:
          return _this.interpolatedString$0();
        case 35:
          return _this._hashExpression$0();
        case 43:
          next = t1.peekChar$1(1);
          return A.isDigit(next) || next === 46 ? _this._number$0() : _this._unaryOperation$0();
        case 45:
          return _this._minusExpression$0();
        case 33:
          return _this._importantExpression$0();
        case 117:
        case 85:
          if (t1.peekChar$1(1) === 43)
            return _this._unicodeRange$0();
          else
            return _this.identifierLike$0();
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          return _this._number$0();
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 92:
          return _this.identifierLike$0();
        default:
          if (first != null && first >= 128)
            return _this.identifierLike$0();
          t1.error$1(0, "Expected expression.");
      }
    },
    _parentheses$0() {
      var wasInParentheses, start, first, expressions, t1, t2, _this = this;
      if (_this.get$plainCss())
        _this.scanner.error$2$length(0, "Parentheses aren't allowed in plain CSS.", 1);
      wasInParentheses = _this._inParentheses;
      _this._inParentheses = true;
      try {
        t1 = _this.scanner;
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
        t1.expectChar$1(40);
        _this.whitespace$0();
        if (!_this._lookingAtExpression$0()) {
          t1.expectChar$1(41);
          t2 = A._setArrayType([], type$.JSArray_Expression);
          t1 = t1.spanFrom$1(start);
          t2 = A.List_List$unmodifiable(t2, type$.Expression);
          return new A.ListExpression(t2, B.ListSeparator_undecided_null, false, t1);
        }
        first = _this.expressionUntilComma$0();
        if (t1.scanChar$1(58)) {
          _this.whitespace$0();
          t1 = _this._stylesheet$_map$2(first, start);
          return t1;
        }
        if (!t1.scanChar$1(44)) {
          t1.expectChar$1(41);
          t1 = t1.spanFrom$1(start);
          return new A.ParenthesizedExpression(first, t1);
        }
        _this.whitespace$0();
        expressions = A._setArrayType([first], type$.JSArray_Expression);
        for (; true;) {
          if (!_this._lookingAtExpression$0())
            break;
          J.add$1$ax(expressions, _this.expressionUntilComma$0());
          if (!t1.scanChar$1(44))
            break;
          _this.whitespace$0();
        }
        t1.expectChar$1(41);
        t1 = t1.spanFrom$1(start);
        t2 = A.List_List$unmodifiable(expressions, type$.Expression);
        return new A.ListExpression(t2, B.ListSeparator_kWM, false, t1);
      } finally {
        _this._inParentheses = wasInParentheses;
      }
    },
    _stylesheet$_map$2(first, start) {
      var t2, key, _this = this,
        t1 = type$.Tuple2_Expression_Expression,
        pairs = A._setArrayType([new A.Tuple2(first, _this.expressionUntilComma$0(), t1)], type$.JSArray_Tuple2_Expression_Expression);
      for (t2 = _this.scanner; t2.scanChar$1(44);) {
        _this.whitespace$0();
        if (!_this._lookingAtExpression$0())
          break;
        key = _this.expressionUntilComma$0();
        t2.expectChar$1(58);
        _this.whitespace$0();
        pairs.push(new A.Tuple2(key, _this.expressionUntilComma$0(), t1));
      }
      t2.expectChar$1(41);
      t2 = t2.spanFrom$1(start);
      return new A.MapExpression(A.List_List$unmodifiable(pairs, t1), t2);
    },
    _hashExpression$0() {
      var start, first, t2, identifier, buffer, _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$1(1) === 123)
        return _this.identifierLike$0();
      start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$1(35);
      first = t1.peekChar$0();
      if (first != null && A.isDigit(first))
        return new A.ColorExpression(_this._hexColorContents$1(start), t1.spanFrom$1(start));
      t2 = t1._string_scanner$_position;
      identifier = _this.interpolatedIdentifier$0();
      if (_this._isHexColor$1(identifier)) {
        t1.set$state(new A._SpanScannerState(t1, t2));
        return new A.ColorExpression(_this._hexColorContents$1(start), t1.spanFrom$1(start));
      }
      t2 = new A.StringBuffer("");
      buffer = new A.InterpolationBuffer(t2, A._setArrayType([], type$.JSArray_Object));
      t2._contents = "" + A.Primitives_stringFromCharCode(35);
      buffer.addInterpolation$1(identifier);
      return new A.StringExpression(buffer.interpolation$1(t1.spanFrom$1(start)), false);
    },
    _hexColorContents$1(start) {
      var red, green, blue, alpha, digit4, t2, t3, _this = this,
        digit1 = _this._hexDigit$0(),
        digit2 = _this._hexDigit$0(),
        digit3 = _this._hexDigit$0(),
        t1 = _this.scanner;
      if (!A.isHex(t1.peekChar$0())) {
        red = (digit1 << 4 >>> 0) + digit1;
        green = (digit2 << 4 >>> 0) + digit2;
        blue = (digit3 << 4 >>> 0) + digit3;
        alpha = null;
      } else {
        digit4 = _this._hexDigit$0();
        t2 = digit1 << 4 >>> 0;
        t3 = digit3 << 4 >>> 0;
        if (!A.isHex(t1.peekChar$0())) {
          red = t2 + digit1;
          green = (digit2 << 4 >>> 0) + digit2;
          blue = t3 + digit3;
          alpha = ((digit4 << 4 >>> 0) + digit4) / 255;
        } else {
          red = t2 + digit2;
          green = t3 + digit4;
          blue = (_this._hexDigit$0() << 4 >>> 0) + _this._hexDigit$0();
          alpha = A.isHex(t1.peekChar$0()) ? ((_this._hexDigit$0() << 4 >>> 0) + _this._hexDigit$0()) / 255 : null;
        }
      }
      return A.SassColor$rgbInternal(red, green, blue, alpha, alpha == null ? new A.SpanColorFormat(t1.spanFrom$1(start)) : null);
    },
    _isHexColor$1(interpolation) {
      var t1,
        plain = interpolation.get$asPlain();
      if (plain == null)
        return false;
      t1 = plain.length;
      if (t1 !== 3 && t1 !== 4 && t1 !== 6 && t1 !== 8)
        return false;
      t1 = new A.CodeUnits(plain);
      return t1.every$1(t1, A.character__isHex$closure());
    },
    _hexDigit$0() {
      var t1 = this.scanner,
        char = t1.peekChar$0();
      if (char == null || !A.isHex(char))
        t1.error$1(0, "Expected hex digit.");
      return A.asHex(t1.readChar$0());
    },
    _minusExpression$0() {
      var _this = this,
        next = _this.scanner.peekChar$1(1);
      if (A.isDigit(next) || next === 46)
        return _this._number$0();
      if (_this._lookingAtInterpolatedIdentifier$0())
        return _this.identifierLike$0();
      return _this._unaryOperation$0();
    },
    _importantExpression$0() {
      var t1 = this.scanner,
        t2 = t1._string_scanner$_position;
      t1.readChar$0();
      this.whitespace$0();
      this.expectIdentifier$1("important");
      t2 = t1.spanFrom$1(new A._SpanScannerState(t1, t2));
      return new A.StringExpression(A.Interpolation$(A._setArrayType(["!important"], type$.JSArray_Object), t2), false);
    },
    _unaryOperation$0() {
      var _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        operator = _this._unaryOperatorFor$1(t1.readChar$0());
      if (operator == null)
        t1.error$2$position(0, "Expected unary operator.", t1._string_scanner$_position - 1);
      else if (_this.get$plainCss() && operator !== B.UnaryOperator_zDx)
        t1.error$3$length$position(0, "Operators aren't allowed in plain CSS.", 1, t1._string_scanner$_position - 1);
      _this.whitespace$0();
      return new A.UnaryOperationExpression(operator, _this._singleExpression$0(), t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _unaryOperatorFor$1(character) {
      switch (character) {
        case 43:
          return B.UnaryOperator_j2w;
        case 45:
          return B.UnaryOperator_U4G;
        case 47:
          return B.UnaryOperator_zDx;
        default:
          return null;
      }
    },
    _number$0() {
      var number, t4, unit, t5, _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        first = t1.peekChar$0(),
        t3 = first === 45,
        sign = t3 ? -1 : 1;
      if (first === 43 || t3)
        t1.readChar$0();
      number = t1.peekChar$0() === 46 ? 0 : _this.naturalNumber$0();
      t3 = _this._tryDecimal$1$allowTrailingDot(t1._string_scanner$_position !== t2);
      t4 = _this._tryExponent$0();
      if (t1.scanChar$1(37))
        unit = "%";
      else {
        if (_this.lookingAtIdentifier$0())
          t5 = t1.peekChar$0() !== 45 || t1.peekChar$1(1) !== 45;
        else
          t5 = false;
        unit = t5 ? _this.identifier$1$unit(true) : null;
      }
      return new A.NumberExpression(sign * ((number + t3) * t4), unit, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _tryDecimal$1$allowTrailingDot(allowTrailingDot) {
      var t2,
        t1 = this.scanner,
        start = t1._string_scanner$_position;
      if (t1.peekChar$0() !== 46)
        return 0;
      if (!A.isDigit(t1.peekChar$1(1))) {
        if (allowTrailingDot)
          return 0;
        t1.error$2$position(0, "Expected digit.", t1._string_scanner$_position + 1);
      }
      t1.readChar$0();
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57))
          break;
        t1.readChar$0();
      }
      return A.double_parse(t1.substring$1(0, start));
    },
    _tryExponent$0() {
      var next, t2, exponentSign, exponent,
        t1 = this.scanner,
        first = t1.peekChar$0();
      if (first !== 101 && first !== 69)
        return 1;
      next = t1.peekChar$1(1);
      if (!A.isDigit(next) && next !== 45 && next !== 43)
        return 1;
      t1.readChar$0();
      t2 = next === 45;
      exponentSign = t2 ? -1 : 1;
      if (next === 43 || t2)
        t1.readChar$0();
      if (!A.isDigit(t1.peekChar$0()))
        t1.error$1(0, "Expected digit.");
      exponent = 0;
      while (true) {
        t2 = t1.peekChar$0();
        if (!(t2 != null && t2 >= 48 && t2 <= 57))
          break;
        exponent = exponent * 10 + (t1.readChar$0() - 48);
      }
      return Math.pow(10, exponentSign * exponent);
    },
    _unicodeRange$0() {
      var firstRangeLength, hasQuestionMark, t2, secondRangeLength, _this = this,
        _s26_ = "Expected at most 6 digits.",
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      _this.expectIdentChar$1(117);
      t1.expectChar$1(43);
      for (firstRangeLength = 0; _this.scanCharIf$1(new A.StylesheetParser__unicodeRange_closure());)
        ++firstRangeLength;
      for (hasQuestionMark = false; t1.scanChar$1(63); hasQuestionMark = true)
        ++firstRangeLength;
      if (firstRangeLength === 0)
        t1.error$1(0, 'Expected hex digit or "?".');
      else if (firstRangeLength > 6)
        _this.error$2(0, _s26_, t1.spanFrom$1(start));
      else if (hasQuestionMark) {
        t2 = t1.substring$1(0, start.position);
        t1 = t1.spanFrom$1(start);
        return new A.StringExpression(A.Interpolation$(A._setArrayType([t2], type$.JSArray_Object), t1), false);
      }
      if (t1.scanChar$1(45)) {
        t2 = t1._string_scanner$_position;
        for (secondRangeLength = 0; _this.scanCharIf$1(new A.StylesheetParser__unicodeRange_closure0());)
          ++secondRangeLength;
        if (secondRangeLength === 0)
          t1.error$1(0, "Expected hex digit.");
        else if (secondRangeLength > 6)
          _this.error$2(0, _s26_, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
      }
      if (_this._lookingAtInterpolatedIdentifierBody$0())
        t1.error$1(0, "Expected end of identifier.");
      t2 = t1.substring$1(0, start.position);
      t1 = t1.spanFrom$1(start);
      return new A.StringExpression(A.Interpolation$(A._setArrayType([t2], type$.JSArray_Object), t1), false);
    },
    _variable$0() {
      var _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position),
        $name = _this.variableName$0();
      if (_this.get$plainCss())
        _this.error$2(0, string$.Sass_v, t1.spanFrom$1(start));
      return new A.VariableExpression(null, $name, t1.spanFrom$1(start));
    },
    _selector$0() {
      var t1, start, _this = this;
      if (_this.get$plainCss())
        _this.scanner.error$2$length(0, string$.The_pa, 1);
      t1 = _this.scanner;
      start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      t1.expectChar$1(38);
      if (t1.scanChar$1(38)) {
        _this.logger.warn$2$span(0, string$.In_Sas, t1.spanFrom$1(start));
        t1.set$position(t1._string_scanner$_position - 1);
      }
      return new A.SelectorExpression(t1.spanFrom$1(start));
    },
    interpolatedString$0() {
      var t3, t4, buffer, next, second, t5,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        quote = t1.readChar$0();
      if (quote !== 39 && quote !== 34)
        t1.error$2$position(0, "Expected string.", t2);
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      for (; true;) {
        next = t1.peekChar$0();
        if (next === quote) {
          t1.readChar$0();
          break;
        } else if (next == null || next === 10 || next === 13 || next === 12)
          t1.error$1(0, "Expected " + A.Primitives_stringFromCharCode(quote) + ".");
        else if (next === 92) {
          second = t1.peekChar$1(1);
          if (second === 10 || second === 13 || second === 12) {
            t1.readChar$0();
            t1.readChar$0();
            if (second === 13)
              t1.scanChar$1(10);
          } else
            t3._contents += A.Primitives_stringFromCharCode(A.consumeEscapedCharacter(t1));
        } else if (next === 35)
          if (t1.peekChar$1(1) === 123) {
            t5 = this.singleInterpolation$0();
            buffer._flushText$0();
            t4.push(t5);
          } else
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
        else
          t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
      }
      return new A.StringExpression(buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2))), true);
    },
    identifierLike$0() {
      var invocation, color, specialFunction, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position),
        identifier = _this.interpolatedIdentifier$0(),
        plain = identifier.get$asPlain(),
        lower = A._Cell$(),
        t2 = plain == null,
        t3 = !t2;
      if (t3) {
        if (plain === "if" && t1.peekChar$0() === 40) {
          invocation = _this._argumentInvocation$0();
          return new A.IfExpression(invocation, identifier.span.expand$1(0, invocation.span));
        } else if (plain === "not") {
          _this.whitespace$0();
          return new A.UnaryOperationExpression(B.UnaryOperator_not_not, _this._singleExpression$0(), identifier.span);
        }
        lower._value = plain.toLowerCase();
        if (t1.peekChar$0() !== 40) {
          switch (plain) {
            case "false":
              return new A.BooleanExpression(false, identifier.span);
            case "null":
              return new A.NullExpression(identifier.span);
            case "true":
              return new A.BooleanExpression(true, identifier.span);
          }
          color = $.$get$colorsByName().$index(0, lower._readLocal$0());
          if (color != null) {
            t1 = identifier.span;
            return new A.ColorExpression(A.SassColor$rgbInternal(color.get$red(color), color.get$green(color), color.get$blue(color), color._alpha, new A.SpanColorFormat(t1)), t1);
          }
        }
        specialFunction = _this.trySpecialFunction$2(lower._readLocal$0(), start);
        if (specialFunction != null)
          return specialFunction;
      }
      switch (t1.peekChar$0()) {
        case 46:
          if (t1.peekChar$1(1) === 46)
            return new A.StringExpression(identifier, false);
          t1.readChar$0();
          if (t3)
            return _this.namespacedExpression$2(plain, start);
          _this.error$2(0, string$.Interpn, identifier.span);
          break;
        case 40:
          if (t2)
            return new A.InterpolatedFunctionExpression(identifier, _this._argumentInvocation$0(), t1.spanFrom$1(start));
          else
            return new A.FunctionExpression(null, plain, _this._argumentInvocation$1$allowEmptySecondArg(J.$eq$(lower._readLocal$0(), "var")), t1.spanFrom$1(start));
        default:
          return new A.StringExpression(identifier, false);
      }
    },
    namespacedExpression$2(namespace, start) {
      var $name, _this = this,
        t1 = _this.scanner;
      if (t1.peekChar$0() === 36) {
        $name = _this.variableName$0();
        _this._assertPublic$2($name, new A.StylesheetParser_namespacedExpression_closure(_this, start));
        return new A.VariableExpression(namespace, $name, t1.spanFrom$1(start));
      }
      return new A.FunctionExpression(namespace, _this._publicIdentifier$0(), _this._argumentInvocation$0(), t1.spanFrom$1(start));
    },
    trySpecialFunction$2($name, start) {
      var t2, buffer, t3, next, _this = this, _null = null,
        t1 = _this.scanner,
        calculation = t1.peekChar$0() === 40 ? _this._tryCalculation$2($name, start) : _null;
      if (calculation != null)
        return calculation;
      switch (A.unvendor($name)) {
        case "calc":
        case "element":
        case "expression":
          if (!t1.scanChar$1(40))
            return _null;
          t2 = new A.StringBuffer("");
          buffer = new A.InterpolationBuffer(t2, A._setArrayType([], type$.JSArray_Object));
          t3 = "" + $name;
          t2._contents = t3;
          t2._contents = t3 + A.Primitives_stringFromCharCode(40);
          break;
        case "progid":
          if (!t1.scanChar$1(58))
            return _null;
          t2 = new A.StringBuffer("");
          buffer = new A.InterpolationBuffer(t2, A._setArrayType([], type$.JSArray_Object));
          t3 = "" + $name;
          t2._contents = t3;
          t2._contents = t3 + A.Primitives_stringFromCharCode(58);
          next = t1.peekChar$0();
          while (true) {
            if (next != null) {
              if (!(next >= 97 && next <= 122))
                t3 = next >= 65 && next <= 90;
              else
                t3 = true;
              t3 = t3 || next === 46;
            } else
              t3 = false;
            if (!t3)
              break;
            t2._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            next = t1.peekChar$0();
          }
          t1.expectChar$1(40);
          t2._contents += A.Primitives_stringFromCharCode(40);
          break;
        case "url":
          return A.NullableExtension_andThen(_this._tryUrlContents$1(start), new A.StylesheetParser_trySpecialFunction_closure());
        default:
          return _null;
      }
      buffer.addInterpolation$1(_this._interpolatedDeclarationValue$1$allowEmpty(true));
      t1.expectChar$1(41);
      buffer._interpolation_buffer$_text._contents += A.Primitives_stringFromCharCode(41);
      return new A.StringExpression(buffer.interpolation$1(t1.spanFrom$1(start)), false);
    },
    _tryCalculation$2($name, start) {
      var beforeArguments, $arguments, t1, exception, t2, _this = this;
      switch ($name) {
        case "calc":
          $arguments = _this._calculationArguments$1(1);
          t1 = _this.scanner.spanFrom$1(start);
          return new A.CalculationExpression($name, A.CalculationExpression__verifyArguments($arguments), t1);
        case "min":
        case "max":
          t1 = _this.scanner;
          beforeArguments = new A._SpanScannerState(t1, t1._string_scanner$_position);
          $arguments = null;
          try {
            $arguments = _this._calculationArguments$0();
          } catch (exception) {
            if (type$.FormatException._is(A.unwrapException(exception))) {
              t1.set$state(beforeArguments);
              return null;
            } else
              throw exception;
          }
          t2 = $arguments;
          t1 = t1.spanFrom$1(start);
          return new A.CalculationExpression($name, A.CalculationExpression__verifyArguments(t2), t1);
        case "clamp":
          $arguments = _this._calculationArguments$1(3);
          t1 = _this.scanner.spanFrom$1(start);
          return new A.CalculationExpression($name, A.CalculationExpression__verifyArguments($arguments), t1);
        default:
          return null;
      }
    },
    _calculationArguments$1(maxArgs) {
      var interpolation, $arguments, t2, _this = this,
        t1 = _this.scanner;
      t1.expectChar$1(40);
      interpolation = _this._containsCalculationInterpolation$0() ? new A.StringExpression(_this._interpolatedDeclarationValue$0(), false) : null;
      if (interpolation != null) {
        t1.expectChar$1(41);
        return A._setArrayType([interpolation], type$.JSArray_Expression);
      }
      _this.whitespace$0();
      $arguments = A._setArrayType([_this._calculationSum$0()], type$.JSArray_Expression);
      t2 = maxArgs != null;
      while (true) {
        if (!((!t2 || $arguments.length < maxArgs) && t1.scanChar$1(44)))
          break;
        _this.whitespace$0();
        $arguments.push(_this._calculationSum$0());
      }
      t1.expectChar$2$name(41, $arguments.length === maxArgs ? '"+", "-", "*", "/", or ")"' : '"+", "-", "*", "/", ",", or ")"');
      return $arguments;
    },
    _calculationArguments$0() {
      return this._calculationArguments$1(null);
    },
    _calculationSum$0() {
      var t1, next, t2, t3, _this = this,
        sum = _this._calculationProduct$0();
      for (t1 = _this.scanner; true;) {
        next = t1.peekChar$0();
        t2 = next === 43;
        if (t2 || next === 45) {
          t3 = t1.peekChar$1(-1);
          if (t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12) {
            t3 = t1.peekChar$1(1);
            t3 = !(t3 === 32 || t3 === 9 || t3 === 10 || t3 === 13 || t3 === 12);
          } else
            t3 = true;
          if (t3)
            t1.error$1(0, string$.x22x2b__an);
          t1.readChar$0();
          _this.whitespace$0();
          t2 = t2 ? B.BinaryOperator_AcR0 : B.BinaryOperator_iyO;
          sum = new A.BinaryOperationExpression(t2, sum, _this._calculationProduct$0(), false);
        } else
          return sum;
      }
    },
    _calculationProduct$0() {
      var t1, next, t2, _this = this,
        product = _this._calculationValue$0();
      for (t1 = _this.scanner; true;) {
        _this.whitespace$0();
        next = t1.peekChar$0();
        t2 = next === 42;
        if (t2 || next === 47) {
          t1.readChar$0();
          _this.whitespace$0();
          t2 = t2 ? B.BinaryOperator_O1M : B.BinaryOperator_RTB;
          product = new A.BinaryOperationExpression(t2, product, _this._calculationValue$0(), false);
        } else
          return product;
      }
    },
    _calculationValue$0() {
      var t2, value, start, ident, lowerCase, calculation, _this = this,
        t1 = _this.scanner,
        next = t1.peekChar$0();
      if (next === 43 || next === 45 || next === 46 || A.isDigit(next))
        return _this._number$0();
      else if (next === 36)
        return _this._variable$0();
      else if (next === 40) {
        t2 = t1._string_scanner$_position;
        t1.readChar$0();
        value = _this._containsCalculationInterpolation$0() ? new A.StringExpression(_this._interpolatedDeclarationValue$0(), false) : null;
        if (value == null) {
          _this.whitespace$0();
          value = _this._calculationSum$0();
        }
        _this.whitespace$0();
        t1.expectChar$1(41);
        return new A.ParenthesizedExpression(value, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
      } else if (!_this.lookingAtIdentifier$0())
        t1.error$1(0, string$.Expectn);
      else {
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
        ident = _this.identifier$0();
        if (t1.scanChar$1(46))
          return _this.namespacedExpression$2(ident, start);
        if (t1.peekChar$0() !== 40)
          t1.error$1(0, 'Expected "(" or ".".');
        lowerCase = ident.toLowerCase();
        calculation = _this._tryCalculation$2(lowerCase, start);
        if (calculation != null)
          return calculation;
        else if (lowerCase === "if")
          return new A.IfExpression(_this._argumentInvocation$0(), t1.spanFrom$1(start));
        else
          return new A.FunctionExpression(null, ident, _this._argumentInvocation$0(), t1.spanFrom$1(start));
      }
    },
    _containsCalculationInterpolation$0() {
      var t2, parens, next, target, t3, _null = null,
        _s64_ = string$.The_gi,
        _s17_ = "Invalid position ",
        brackets = A._setArrayType([], type$.JSArray_int),
        t1 = this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      for (t2 = t1.string.length, parens = 0; t1._string_scanner$_position !== t2;) {
        next = t1.peekChar$0();
        switch (next) {
          case 92:
            target = 1;
            break;
          case 47:
            target = 2;
            break;
          case 39:
          case 34:
            target = 3;
            break;
          case 35:
            target = 4;
            break;
          case 40:
            target = 5;
            break;
          case 123:
          case 91:
            target = 6;
            break;
          case 41:
            target = 7;
            break;
          case 125:
          case 93:
            target = 8;
            break;
          default:
            target = 9;
            break;
        }
        c$0:
          for (; true;)
            switch (target) {
              case 1:
                t1.readChar$0();
                t1.readChar$0();
                break c$0;
              case 2:
                if (!this.scanComment$0())
                  t1.readChar$0();
                break c$0;
              case 3:
                this.interpolatedString$0();
                break c$0;
              case 4:
                if (parens === 0 && t1.peekChar$1(1) === 123) {
                  if (start._scanner !== t1)
                    A.throwExpression(A.ArgumentError$(_s64_, _null));
                  t3 = start.position;
                  if ((t3 === 0 ? 1 / t3 < 0 : t3 < 0) || t3 > t2)
                    A.throwExpression(A.ArgumentError$(_s17_ + t3, _null));
                  t1._string_scanner$_position = t3;
                  t1._lastMatch = null;
                  return true;
                }
                t1.readChar$0();
                break c$0;
              case 5:
                ++parens;
                target = 6;
                continue c$0;
              case 6:
                next.toString;
                brackets.push(A.opposite(next));
                t1.readChar$0();
                break c$0;
              case 7:
                --parens;
                target = 8;
                continue c$0;
              case 8:
                if (brackets.length === 0 || brackets.pop() !== next) {
                  if (start._scanner !== t1)
                    A.throwExpression(A.ArgumentError$(_s64_, _null));
                  t3 = start.position;
                  if ((t3 === 0 ? 1 / t3 < 0 : t3 < 0) || t3 > t2)
                    A.throwExpression(A.ArgumentError$(_s17_ + t3, _null));
                  t1._string_scanner$_position = t3;
                  t1._lastMatch = null;
                  return false;
                }
                t1.readChar$0();
                break c$0;
              case 9:
                t1.readChar$0();
                break c$0;
            }
      }
      t1.set$state(start);
      return false;
    },
    _tryUrlContents$2$name(start, $name) {
      var t3, t4, buffer, t5, next, endPosition, result, _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      if (!t1.scanChar$1(40))
        return null;
      _this.whitespaceWithoutComments$0();
      t3 = new A.StringBuffer("");
      t4 = A._setArrayType([], type$.JSArray_Object);
      buffer = new A.InterpolationBuffer(t3, t4);
      t5 = "" + ($name == null ? "url" : $name);
      t3._contents = t5;
      t3._contents = t5 + A.Primitives_stringFromCharCode(40);
      for (; true;) {
        next = t1.peekChar$0();
        if (next == null)
          break;
        else if (next === 92)
          t3._contents += A.S(_this.escape$0());
        else {
          if (next !== 33)
            if (next !== 37)
              if (next !== 38)
                t5 = next >= 42 && next <= 126 || next >= 128;
              else
                t5 = true;
            else
              t5 = true;
          else
            t5 = true;
          if (t5)
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 35)
            if (t1.peekChar$1(1) === 123) {
              t5 = _this.singleInterpolation$0();
              buffer._flushText$0();
              t4.push(t5);
            } else
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
          else if (next === 32 || next === 9 || next === 10 || next === 13 || next === 12) {
            _this.whitespaceWithoutComments$0();
            if (t1.peekChar$0() !== 41)
              break;
          } else if (next === 41) {
            t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
            endPosition = t1._string_scanner$_position;
            t2 = t1._sourceFile;
            t5 = start.position;
            t1 = new A._FileSpan(t2, t5, endPosition);
            t1._FileSpan$3(t2, t5, endPosition);
            t5 = type$.Object;
            t2 = A.List_List$of(t4, true, t5);
            t4 = t3._contents;
            if (t4.length !== 0)
              t2.push(t4.charCodeAt(0) == 0 ? t4 : t4);
            result = A.List_List$from(t2, false, t5);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t3 = new A.Interpolation(result, t1);
            t3.Interpolation$2(t2, t1);
            return t3;
          } else
            break;
        }
      }
      t1.set$state(new A._SpanScannerState(t1, t2));
      return null;
    },
    _tryUrlContents$1(start) {
      return this._tryUrlContents$2$name(start, null);
    },
    dynamicUrl$0() {
      var contents, _this = this,
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position);
      _this.expectIdentifier$1("url");
      contents = _this._tryUrlContents$1(start);
      if (contents != null)
        return new A.StringExpression(contents, false);
      return new A.InterpolatedFunctionExpression(A.Interpolation$(A._setArrayType(["url"], type$.JSArray_Object), t1.spanFrom$1(start)), _this._argumentInvocation$0(), t1.spanFrom$1(start));
    },
    almostAnyValue$1$omitComments(omitComments) {
      var t4, t5, t6, next, commentStart, end, t7, contents, _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new A.StringBuffer(""),
        buffer = new A.InterpolationBuffer(t3, A._setArrayType([], type$.JSArray_Object));
      $label0$1:
        for (t4 = t1.string, t5 = t4.length, t6 = !omitComments; true;) {
          next = t1.peekChar$0();
          switch (next) {
            case 92:
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            case 34:
            case 39:
              buffer.addInterpolation$1(_this.interpolatedString$0().asInterpolation$0());
              break;
            case 47:
              commentStart = t1._string_scanner$_position;
              if (_this.scanComment$0()) {
                if (t6) {
                  end = t1._string_scanner$_position;
                  t3._contents += B.JSString_methods.substring$2(t4, commentStart, end);
                }
              } else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            case 35:
              if (t1.peekChar$1(1) === 123)
                buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
              else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            case 13:
            case 10:
            case 12:
              if (_this.get$indented())
                break $label0$1;
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
            case 33:
            case 59:
            case 123:
            case 125:
              break $label0$1;
            case 117:
            case 85:
              t7 = t1._string_scanner$_position;
              if (!_this.scanIdentifier$1("url")) {
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
                break;
              }
              contents = _this._tryUrlContents$1(new A._SpanScannerState(t1, t7));
              if (contents == null) {
                if ((t7 === 0 ? 1 / t7 < 0 : t7 < 0) || t7 > t5)
                  A.throwExpression(A.ArgumentError$("Invalid position " + t7, null));
                t1._string_scanner$_position = t7;
                t1._lastMatch = null;
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              } else
                buffer.addInterpolation$1(contents);
              break;
            default:
              if (next == null)
                break $label0$1;
              if (_this.lookingAtIdentifier$0())
                t3._contents += _this.identifier$0();
              else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              break;
          }
        }
      return buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    almostAnyValue$0() {
      return this.almostAnyValue$1$omitComments(false);
    },
    _interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(allowColon, allowEmpty, allowSemicolon) {
      var t4, t5, t6, t7, wroteNewline, next, t8, start, end, contents, _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new A.StringBuffer(""),
        buffer = new A.InterpolationBuffer(t3, A._setArrayType([], type$.JSArray_Object)),
        brackets = A._setArrayType([], type$.JSArray_int);
      $label0$1:
        for (t4 = t1.string, t5 = t4.length, t6 = !allowColon, t7 = !allowSemicolon, wroteNewline = false; true;) {
          next = t1.peekChar$0();
          switch (next) {
            case 92:
              t3._contents += A.S(_this.escape$1$identifierStart(true));
              wroteNewline = false;
              break;
            case 34:
            case 39:
              buffer.addInterpolation$1(_this.interpolatedString$0().asInterpolation$0());
              wroteNewline = false;
              break;
            case 47:
              if (t1.peekChar$1(1) === 42) {
                t8 = _this.get$loudComment();
                start = t1._string_scanner$_position;
                t8.call$0();
                end = t1._string_scanner$_position;
                t3._contents += B.JSString_methods.substring$2(t4, start, end);
              } else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            case 35:
              if (t1.peekChar$1(1) === 123)
                buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
              else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            case 32:
            case 9:
              if (!wroteNewline) {
                t8 = t1.peekChar$1(1);
                t8 = !(t8 === 32 || t8 === 9 || t8 === 10 || t8 === 13 || t8 === 12);
              } else
                t8 = true;
              if (t8)
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              else
                t1.readChar$0();
              break;
            case 10:
            case 13:
            case 12:
              if (_this.get$indented())
                break $label0$1;
              t8 = t1.peekChar$1(-1);
              if (!(t8 === 10 || t8 === 13 || t8 === 12))
                t3._contents += "\n";
              t1.readChar$0();
              wroteNewline = true;
              break;
            case 40:
            case 123:
            case 91:
              next.toString;
              t3._contents += A.Primitives_stringFromCharCode(next);
              brackets.push(A.opposite(t1.readChar$0()));
              wroteNewline = false;
              break;
            case 41:
            case 125:
            case 93:
              if (brackets.length === 0)
                break $label0$1;
              next.toString;
              t3._contents += A.Primitives_stringFromCharCode(next);
              t1.expectChar$1(brackets.pop());
              wroteNewline = false;
              break;
            case 59:
              if (t7 && brackets.length === 0)
                break $label0$1;
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            case 58:
              if (t6 && brackets.length === 0)
                break $label0$1;
              t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
            case 117:
            case 85:
              t8 = t1._string_scanner$_position;
              if (!_this.scanIdentifier$1("url")) {
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
                wroteNewline = false;
                break;
              }
              contents = _this._tryUrlContents$1(new A._SpanScannerState(t1, t8));
              if (contents == null) {
                if ((t8 === 0 ? 1 / t8 < 0 : t8 < 0) || t8 > t5)
                  A.throwExpression(A.ArgumentError$("Invalid position " + t8, null));
                t1._string_scanner$_position = t8;
                t1._lastMatch = null;
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              } else
                buffer.addInterpolation$1(contents);
              wroteNewline = false;
              break;
            default:
              if (next == null)
                break $label0$1;
              if (_this.lookingAtIdentifier$0())
                t3._contents += _this.identifier$0();
              else
                t3._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
              wroteNewline = false;
              break;
          }
        }
      if (brackets.length !== 0)
        t1.expectChar$1(B.JSArray_methods.get$last(brackets));
      if (!allowEmpty && buffer._interpolation_buffer$_contents.length === 0 && t3._contents.length === 0)
        t1.error$1(0, "Expected token.");
      return buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _interpolatedDeclarationValue$1$allowEmpty(allowEmpty) {
      return this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(true, allowEmpty, false);
    },
    _interpolatedDeclarationValue$0() {
      return this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(true, false, false);
    },
    _interpolatedDeclarationValue$2$allowEmpty$allowSemicolon(allowEmpty, allowSemicolon) {
      return this._interpolatedDeclarationValue$3$allowColon$allowEmpty$allowSemicolon(true, allowEmpty, allowSemicolon);
    },
    interpolatedIdentifier$0() {
      var first, _this = this,
        _s20_ = "Expected identifier.",
        t1 = _this.scanner,
        start = new A._SpanScannerState(t1, t1._string_scanner$_position),
        t2 = new A.StringBuffer(""),
        t3 = A._setArrayType([], type$.JSArray_Object),
        buffer = new A.InterpolationBuffer(t2, t3);
      if (t1.scanChar$1(45)) {
        t2._contents += A.Primitives_stringFromCharCode(45);
        if (t1.scanChar$1(45)) {
          t2._contents += A.Primitives_stringFromCharCode(45);
          _this._interpolatedIdentifierBody$1(buffer);
          return buffer.interpolation$1(t1.spanFrom$1(start));
        }
      }
      first = t1.peekChar$0();
      if (first == null)
        t1.error$1(0, _s20_);
      else if (first === 95 || A.isAlphabetic0(first) || first >= 128)
        t2._contents += A.Primitives_stringFromCharCode(t1.readChar$0());
      else if (first === 92)
        t2._contents += A.S(_this.escape$1$identifierStart(true));
      else if (first === 35 && t1.peekChar$1(1) === 123) {
        t2 = _this.singleInterpolation$0();
        buffer._flushText$0();
        t3.push(t2);
      } else
        t1.error$1(0, _s20_);
      _this._interpolatedIdentifierBody$1(buffer);
      return buffer.interpolation$1(t1.spanFrom$1(start));
    },
    _interpolatedIdentifierBody$1(buffer) {
      var t1, t2, t3, next, t4;
      for (t1 = buffer._interpolation_buffer$_contents, t2 = this.scanner, t3 = buffer._interpolation_buffer$_text; true;) {
        next = t2.peekChar$0();
        if (next == null)
          break;
        else {
          if (next !== 95)
            if (next !== 45) {
              if (!(next >= 97 && next <= 122))
                t4 = next >= 65 && next <= 90;
              else
                t4 = true;
              if (!t4)
                t4 = next >= 48 && next <= 57;
              else
                t4 = true;
              t4 = t4 || next >= 128;
            } else
              t4 = true;
          else
            t4 = true;
          if (t4)
            t3._contents += A.Primitives_stringFromCharCode(t2.readChar$0());
          else if (next === 92)
            t3._contents += A.S(this.escape$0());
          else if (next === 35 && t2.peekChar$1(1) === 123) {
            t4 = this.singleInterpolation$0();
            buffer._flushText$0();
            t1.push(t4);
          } else
            break;
        }
      }
    },
    singleInterpolation$0() {
      var contents, _this = this,
        t1 = _this.scanner,
        t2 = t1._string_scanner$_position;
      t1.expect$1("#{");
      _this.whitespace$0();
      contents = _this._expression$0();
      t1.expectChar$1(125);
      if (_this.get$plainCss())
        _this.error$2(0, string$.Interpp, t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
      return contents;
    },
    _mediaQueryList$0() {
      var t4,
        t1 = this.scanner,
        t2 = t1._string_scanner$_position,
        t3 = new A.StringBuffer(""),
        buffer = new A.InterpolationBuffer(t3, A._setArrayType([], type$.JSArray_Object));
      for (; true;) {
        this.whitespace$0();
        this._stylesheet$_mediaQuery$1(buffer);
        if (!t1.scanChar$1(44))
          break;
        t4 = t3._contents += A.Primitives_stringFromCharCode(44);
        t3._contents = t4 + A.Primitives_stringFromCharCode(32);
      }
      return buffer.interpolation$1(t1.spanFrom$1(new A._SpanScannerState(t1, t2)));
    },
    _stylesheet$_mediaQuery$1(buffer) {
      var t1, identifier, _this = this;
      if (_this.scanner.peekChar$0() !== 40) {
        buffer.addInterpolation$1(_this.interpolatedIdentifier$0());
        _this.whitespace$0();
        if (!_this._lookingAtInterpolatedIdentifier$0())
          return;
        t1 = buffer._interpolation_buffer$_text;
        t1._contents += A.Primitives_stringFromCharCode(32);
        identifier = _this.interpolatedIdentifier$0();
        _this.whitespace$0();
        if (A.equalsIgnoreCase(identifier.get$asPlain(), "and"))
          t1._contents += " and ";
        else {
          buffer.addInterpolation$1(identifier);
          if (_this.scanIdentifier$1("and")) {
            _this.whitespace$0();
            t1._contents += " and ";
          } else
            return;
        }
      }
      for (t1 = buffer._interpolation_buffer$_text; true;) {
        _this.whitespace$0();
        buffer.addInterpolatio